<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"file:./resources/docbook-xml-4.5/docbookx.dtd">
<book>
  <bookinfo>
    <title>Restful Objects 1.0 Users Guide</title>

    <subtitle>RESTful Web Services for Naked Objects 4.0.x</subtitle>

    <releaseinfo>0.1</releaseinfo>

    <authorgroup>
      <author>
        <firstname>Dan</firstname>

        <surname>Haywood</surname>
      </author>
    </authorgroup>

    <legalnotice>
      <para>Permission is granted to make and distribute verbatim copies of
      this manual provided that the copyright notice and this permission
      notice are preserved on all copies.</para>
    </legalnotice>
  </bookinfo>

  <!-- front matter -->

  <toc></toc>

  <preface id="preface">
    <title>Preface</title>

    <para><ulink url="http://restfulobjects.sourceforge.net">Restful
    Objects</ulink> is a sister project to <ulink
    url="http://nakedobjects.org">Naked Objects</ulink> and provides an
    implementation of a web-based viewer that exposes a RESTful web service
    for a Naked Objects domain model.</para>

    <para>This manual describes how to use the <emphasis>Restful
    Objects</emphasis> in both prototype mode and how to deploy it into
    production as a webapp. It also describes how to use <emphasis>Restful
    Objects</emphasis>' applib to write client-side applications.</para>

    <para><emphasis>Restful Objects</emphasis> is hosted on <ulink
    url="http://restfulobjects.sourceforge.net">SourceForge</ulink>, and is
    licensed under <ulink
    url="http://www.apache.org/licenses/LICENSE-2.0.html">Apache Software
    License v2</ulink>. Naked Objects is also hosted on SourceForge, and is
    also licensed under Apache Software License v2.</para>
  </preface>

  <!-- main content -->

  <chapter id="chp.Introduction">
    <title>Introduction</title>

    <para><emphasis>Restful Objects</emphasis> is a Naked Objects viewer
    implementation to expose a domain model using <acronym>REST</acronym>. So
    let's briefly explain what <acronym>REST</acronym> is, and why you might
    want to use it.</para>

    <sect1>
      <title>Introducing REST</title>

      <para>Web services were introduced as a means for different computer
      systems to interact by network even though they may be implemented in
      different technologies and with different implied domain models.
      <acronym>SOAP</acronym> is probably the best well-known protocol for
      doing this, though there have been others. These days there is a whole
      bunch of specifications over and above those for SOAP; together these
      are typically called <acronym>WS-*</acronym>.</para>

      <para>Whatever; what characterizes the <acronym>WS-*</acronym>
      implementations is that they expose only a single endpoint to be
      invoked; in effect just another way of doing a remote procedure call.
      Put another way, <acronym>WS-*</acronym> -style web services provide an
      for a verb - "do this for me". In fact, this <acronym>RPC</acronym>
      endpoint usually accepts many different message types, and uses some
      sort of dispatcher to route the message so it can be processed
      correctly.</para>

      <para><acronym>REST</acronym> (standing for <emphasis>REpresentational
      State Transfer</emphasis>) in contrast is a style of designing web
      services that is modelled on the human web sites. Rather than expose a
      single endpoint, it exposes multiple endpoints. And these endpoints
      don't represent verbs, they represent things (or nouns). But
      <acronym>REST</acronym> goes further than this, because it also
      restricts what we can do with those resources to the standard
      <acronym>HTTP</acronym> verbs: <acronym>GET</acronym> (read),
      <acronym>PUT</acronym> (update), <acronym>DELETE</acronym> (er, delete)
      and <acronym>POST</acronym> (invoke, or change in some way). The first
      three of these are idempotent (can be invoked multiple times with no
      side effects). This is an important characteristic for building scalable
      systems, and is not one that the <acronym>RPC</acronym> approach towards
      web services supports at all well.</para>

      <para>What happens if we perform an <acronym>HTTP</acronym>
      <acronym>GET</acronym> on a resource? Well, we get a representation of
      that resource. <acronym>REST</acronym> doesn't mandate what that
      representation is, but typical choices are <acronym>JSON</acronym>,
      <acronym>XHTML</acronym> or a custom <acronym>XML</acronym> dialect.
      However, what <acronym>REST</acronym> does emphasise is that these
      resources should be linked together, again analogous to the way that the
      human web works with hyperlinks.</para>

      <para>So <acronym>REST</acronym> is much more closely associated with
      the web - and <acronym>HTTP</acronym> in particular - than
      <acronym>WS-*</acronym> -style web services ever were. But - so the
      thinking goes - the vast majority of web services are deployed over the
      web, so why disregard the web's semantics?</para>

      <para>For much more on the design principles and philosophy behind
      <acronym>REST</acronym>, you might want to read Richardson &amp; Ruby's
      <ulink url="http://oreilly.com/catalog/9780596529260">RESTful Web
      Services</ulink>.</para>
    </sect1>

    <sect1 id="sec.IntroducingRestfulObjects">
      <title>Introducing Restful Objects</title>

      <para>As already stated, <emphasis>Restful Objects</emphasis> is a Naked
      Objects viewer implementation to expose a domain model using
      <acronym>REST</acronym>. That is, the resources are the actual domain
      objects, or - in some cases - a class member of one of those objects.
      The following table shows the resources exposed:</para>

      <table>
        <title>Verbs by Resources</title>

        <tgroup cols="5">
          <colspec align="center" />

          <thead>
            <row>
              <entry align="center">Verb \ Resource</entry>

              <entry align="center">Object</entry>

              <entry align="center">Property</entry>

              <entry align="center">Collection</entry>

              <entry align="center">Action</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>GET</entry>

              <entry>current state of all properties</entry>

              <entry>n/a</entry>

              <entry>current contents</entry>

              <entry>n/a</entry>
            </row>

            <row>
              <entry>PUT</entry>

              <entry>create</entry>

              <entry>set</entry>

              <entry>add to</entry>

              <entry>n/a</entry>
            </row>

            <row>
              <entry>DELETE</entry>

              <entry>remove</entry>

              <entry>clear</entry>

              <entry>remove from</entry>

              <entry>n/a</entry>
            </row>

            <row>
              <entry>POST</entry>

              <entry>n/a</entry>

              <entry>n/a</entry>

              <entry>n/a</entry>

              <entry>invoke</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>Restul Objects exposes a <acronym>URL</acronym> for each of the
      columns. So, for example:</para>

      <itemizedlist>
        <listitem>
          <para>a <classname>Customer</classname> instance id=12345 might be
          exposed as <uri>http://localhost:8080/object/CUS|12345</uri>, where
          "CUS|12345" is the (string representation of) the internal Naked
          Objects object identifier (or <acronym>Oid</acronym>) that uniquely
          identifies the domain object. Performing a <acronym>GET</acronym> on
          this would list all of the properties of the
          <classname>Customer</classname>.</para>
        </listitem>

        <listitem>
          <para>the <varname>orders</varname> collection for this same
          <classname>Customer</classname> would be exposed as
          <uri>http://localhost:8080/object/CUS|12345/collection/orders</uri>.
          Performing a <acronym>GET</acronym> on this would list (links to)
          the contents of the collection.</para>
        </listitem>
      </itemizedlist>

      <para>So much for interacting with the resources, but what of their
      representation? Well, (following the suggestion in Richardson &amp;
      Ruby's book) <emphasis>Restful Objects</emphasis> renders the domain
      objects using <acronym>XHTML</acronym>. This gives us a natural way to
      express links between resources: we just use hyperlinks using the
      <sgmltag>&lt;a href="..."/&gt;</sgmltag> tag. It also means that we can
      inspect the domain objects from an web browser. For example, here's
      Firefox displaying the resource representing an
      <classname>EmployeeRepository</classname> (part of of the example claims
      application that is in the Naked Objects Maven download):</para>

      <screenshot>
        <screeninfo>OID / Naked Object / pojo relationship and
        maps</screeninfo>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/resource-example.png" scale="40" />
          </imageobject>
        </mediaobject>
      </screenshot>

      <para>In fact, <emphasis>Restful Objects</emphasis> also serves up a
      smidgeon of Javascript as well, to allow the web browser to perform
      <acronym>PUT</acronym> and <acronym>DELETE</acronym> as well as the
      usual <acronym>GET</acronym> and <acronym>POST</acronym>. This won't be
      needed by your own custom written web apps, of course. (It also won't be
      needed once <acronym>XHTML</acronym> 5 - with its support for these
      additional <acronym>HTTP</acronym> verbs - becomes mainstream).</para>

      <para>Restful Objects itself is implemented using <ulink
      url="http://jboss.org/resteasy">JBoss RestEasy</ulink>.</para>
    </sect1>

    <sect1>
      <title>Limitations of REST</title>

      <para>Because <acronym>REST</acronym> is newer than the original
      <acronym>WS-*</acronym>-style services, it currently lacks some
      supporting features. For example, some of the supporting
      <acronym>WS-*</acronym> specifications deal with such things as security
      credentials and transaction propagation. At the time of writing
      <acronym>REST</acronym> is yet to gain these sorts of additional
      support. That said, <emphasis>Restful Objects</emphasis> provides some
      basic support for security, however.</para>
    </sect1>
  </chapter>

  <chapter>
    <title id="chp.Prototyping">Using Restful Objects in Prototypes</title>

    <para>Exposing a <abbrev>REST</abbrev>ful domain model with
    <emphasis>Restful Objects</emphasis> is really pretty straightforward; we
    just need to boot Naked Objects to use the <emphasis>Restful
    Objects</emphasis>' viewer rather than the <acronym>DnD</acronym> viewer
    or <acronym>HTML</acronym> viewer that comes out-of-the-box. That means
    adding references to the <acronym>POM</acronym>, and the running with the
    appropriate command line flags.</para>

    <para>If you ran the Naked Objects archetype then you'll have a Maven
    parent module with a number of child modules:</para>

    <programlisting>xxx/pom.xml
    xxx-dom/pom.xml          # domain object model
    xxx-fixture/pom.xml      # fixtures for seeding object store
    xxx-service/pom.xml      # in-memory object store implementations of repositories
    xxx-commandline/pom.xml  # for deploying as a commandline, also for prototyping
    xxx-webapp/pom.xml       # for deploying as a webapp</programlisting>

    <para>The instructions here assume this directory structure.</para>

    <sect1 id="sec.ParentModule">
      <title>Parent Module</title>

      <para>In the parent module, first add in a
      <sgmltag>&lt;properties&gt;</sgmltag> section to specify the version of
      <emphasis>Restful Objects</emphasis>. This will transitively bring in
      any dependencies:</para>

      <programlisting>&lt;properties&gt;
  &lt;restfulobjects.version&gt;1.0.0&lt;/restfulobjects.version&gt;             &lt;!-- or whatever --&gt;
&lt;/properties&gt;</programlisting>

      <para>Then, add in references to the <emphasis>Restful
      Objects</emphasis>' <filename>applib</filename> and
      <filename>viewer</filename> modules to the
      <sgmltag>&lt;dependencyManagement&gt;</sgmltag>:</para>

      <programlisting>&lt;dependencyManagement&gt;
  &lt;dependencies&gt;
    ...
    &lt;dependency&gt;
      &lt;groupId&gt;org.starobjects.restful&lt;/groupId&gt;
      &lt;artifactId&gt;applib&lt;/artifactId&gt;
      &lt;version&gt;${restfulobjects.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.starobjects.restful&lt;/groupId&gt;
      &lt;artifactId&gt;viewer&lt;/artifactId&gt;
      &lt;version&gt;${restfulobjects.version}&lt;/version&gt;
    &lt;/dependency&gt;
    ...
  &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;</programlisting>

      <para>Note that an alternate approach for setting up dependencies is to
      have the parent module inherit from
      <classname>org.starobjects.restful:release</classname>. Doing it this
      way means that it isn't necessary to add entries to
      <sgmltag>&lt;dependencyManagement&gt;</sgmltag> because they are
      inherited. However, Maven2 does only allow a single parent, so this may
      not be an option for you if you want to use some other
      <acronym>POM</acronym> as your parent.</para>
    </sect1>

    <sect1>
      <title>CommandLine Module</title>

      <para>When prototyping we run the viewer from the command line (rather
      than deploying to a full webapp, a topic we cover in <xref
      linkend="chp.DeployingRestfulObjectsWebapps" />). We therefore need to
      add a reference to the viewer in the <filename>commandline</filename>
      project's <filename>pom.xml</filename>:</para>

      <programlisting>&lt;dependencies&gt;
  ...
  &lt;dependency&gt;
    &lt;groupId&gt;org.starobjects.restful&lt;/groupId&gt;
    &lt;artifactId&gt;viewer&lt;/artifactId&gt;
    &lt;version&gt;${restfulobjects.version}&lt;/version&gt;
  &lt;/dependency&gt;
  ...
&lt;/dependencies&gt;</programlisting>
    </sect1>

    <sect1 id="sec.AlternativeApproach">
      <title>Launch Configuration</title>

      <para>To run using the Restul Viewer, we use the standard commandline
      bootstrapper
      <classname>org.nakedobjects.runtime.NakedObjects</classname> (as used
      for <acronym>DnD</acronym> and <acronym>HTML</acronym> viewer in
      prototype mode). Run with the arguments:</para>

      <itemizedlist>
        <listitem>
          <para>--type exploration</para>
        </listitem>

        <listitem>
          <para>--viewer
          <classname>org.starobjects.restful.viewer.embedded.RestfulViewerInstaller</classname></para>
        </listitem>
      </itemizedlist>

      <para>This sets up Jetty to run with the Restful Objects servlets and
      filters.</para>
    </sect1>

    <sect1>
      <title>Testing the Viewer</title>

      <para>Boot up Firefox and browse to <ulink
      url="http://localhost:8080">http://localhost:8080</ulink>. You should
      see links to access the services; these are (representations of) the
      registered services (typically repositories) in
      <filename>nakedobjects.properties</filename> configuration file.</para>

      <note>
        <para>Firefox is currently the only supported web browser for testing
        in this way.</para>
      </note>
    </sect1>
  </chapter>

  <chapter id="chp.Resources">
    <title>Resources</title>

    <para>Understanding how to interact with resources and how to interpret
    their representations is central to the <acronym>REST</acronym>ful
    approach. This chapter describes in detail the resources that are
    available; in effect, the <acronym>API</acronym> for using domain objects
    exposed using <emphasis>Restful Objects</emphasis>.</para>

    <para>In order to invoke a <acronym>HTTP</acronym> method on a resource,
    the <acronym>URL</acronym> must be constructed correctly. After that, the
    client code then needs to handle the response.</para>

    <para>Each of the resources is defined as interfaces annotated using
    <classname>javax.ws.rs</classname> (<acronym>JAX-RS</acronym>)
    annotations. <acronym>JAX-RS</acronym> is the Java <acronym>API</acronym>
    for Restful Web Services, part of Java EE 6. Its annotations are used by
    <acronym>JAX-RS</acronym> libraries such as RestEasy, or <ulink
    url="https://jersey.dev.java.net/">Jersey</ulink> (the latter is the
    reference implementation). These libraries expose the resources as
    endpoints and route requests through to server-side methods (implemented
    by <emphasis>Restful Objects</emphasis>).</para>

    <para>As such, we can use these interfaces as a way of describing the
    resources provided by <emphasis>Restful Objects</emphasis>. Let's go
    through each in turn.</para>

    <sect1 id="sec.HomePageResource">
      <title>HomePageResource</title>

      <para>To start with, we have
      <classname>HomePageResource</classname>:</para>

      <programlisting>import javax.ws.rs.GET;
import javax.ws.rs.Produces;

public interface HomePageResource {

    @GET
    @Produces( {"application/xhtml+xml", "text/html"} )
    public String resources();
}</programlisting>

      <para>Because there is no <classname>@javax.ws.rs.Path</classname>
      annotation, this in effect says that the root URL "/" (eg <ulink
      url="http://localhost:8080/">http://localhost:8080/</ulink>) is a valid
      resource. What you'll get back is an <acronym>XHTML</acronym> page that
      identifies the current user (in exploration mode this is always
      hard-coded), and then lists the resources available: the services (ie
      repositories), the specifications (metamodel), and details on the
      current user.</para>

      <screenshot>
        <screeninfo>Home Page Resource</screeninfo>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/home-page-resource.png" scale="40" />
          </imageobject>
        </mediaobject>
      </screenshot>

      <para>These blocks are always present on every page.</para>

      <para>Meanwhile the raw <acronym>XHTML</acronym> - what your client code
      must parse - looks something like:</para>

      <programlisting>&lt;?xml version="1.0"?&gt;
&lt;html&gt;
  &lt;head&gt;&lt;title&gt;Home Page&lt;/title&gt;&lt;/head&gt;
  &lt;body id="body"&gt;
    &lt;div&gt;
      &lt;p&gt;Logged in as&lt;/p&gt;
      &lt;ul class="nof-session"&gt;
        &lt;li&gt;&lt;a href="/user" rel="user" rev="resource" class="nof-user"&gt;sven&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
    &lt;div class="nof-section"&gt;
      &lt;p class="nof-section"&gt;Resources&lt;/p&gt;
      &lt;ul class="nof-resources"&gt;
        &lt;li&gt;
          &lt;a href="/services" rel="services" rev="resources" class="nof-resource"&gt;
            Services
          &lt;/a&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;a href="/specs" rel="specs" rev="resources" class="nof-resource"&gt;
            Specifications (MetaModel)
          &lt;/a&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;a href="/user" rel="user" rev="resources" class="nof-resource"&gt;
            User (Security)
          &lt;/a&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;</programlisting>

      <para>Note the use of <varname>class</varname> attributes to distinguish
      the different types of properties. For example, the XPath expression
      <emphasis>//a[@class='nof-resource']/@href</emphasis> will return the
      links to all resources available. One of these -
      <emphasis>/services</emphasis> - is the list of services, so lets look
      at that next.</para>

      <para><note>
          <para>Depending on feedback, the format of the XHTML may evolve in
          the future, eg to add in further class attributes.</para>
        </note></para>
    </sect1>

    <sect1>
      <title>Services Resource</title>

      <para>The <emphasis>/services</emphasis> link indicated in <xref
      linkend="sec.HomePageResource" /> corresponds to the
      <classname>ServicesResource</classname>:</para>

      <programlisting>import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;

public interface ServicesResource {

  @GET
  @Produces( {"application/xhtml+xml", "text/html"} )
  @Path("/")
  public String services();
}</programlisting>

      <para>The implementation of this interface in <emphasis>Restful
      Objects</emphasis> viewer (<classname>ServicesResourceImpl</classname>)
      also defines a <code>@Path("/services")</code> for the class as a whole.
      This therefore defines a <acronym>URL</acronym> in the form
      <emphasis>/services</emphasis> supporting the <acronym>GET</acronym>
      method.</para>

      <note>
        <para>I believe that the <code>@Path("/services")</code> annotation
        should reside on the interface, not the implementation. This seems to
        be a limitation with RestEasy, the underlying library used by
        <emphasis>Restful Objects</emphasis>. Certainly for RestEasy 1.0.2 and
        also 1.1-rc2 this did not work, however.</para>
      </note>

      <para>Here's the resource that's returned, as shown in a browser:</para>

      <para><screenshot>
          <screeninfo>Services Resource</screeninfo>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/services-resource.png" scale="40" />
            </imageobject>
          </mediaobject>
        </screenshot>The first two sections are the same; what's new is the
      list of services, corresponding to the registered services in
      <filename>nakedobjects.properties</filename>. The
      <acronym>XHTML</acronym> for this is:</para>

      <programlisting>&lt;?xml version="1.0"?&gt;
&lt;html&gt;
  &lt;head&gt;&lt;title&gt;Services&lt;/title&gt;&lt;/head&gt;
  &lt;body id="body"&gt;
    ...
    &lt;div class="nof-section"&gt;
      &lt;p class="nof-section"&gt;Services&lt;/p&gt;
      &lt;ul class="nof-services"&gt;
        &lt;li&gt;
          &lt;a href="/object/OID:1" rel="service" rev="services" class="nof-service"&gt;
            Employees
          &lt;/a&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;a href="/object/OID:2" rel="service" rev="services" class="nof-service"&gt;
            Claims
          &lt;/a&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;</programlisting>

      <para>Again, we can use XPath to pull back the resources:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>//a[@class='nof-service']/@href</emphasis> will
          return the hyperlinks to the object resources representing these
          services, in the form <emphasis>/object/OID</emphasis>.</para>
        </listitem>
      </itemizedlist>

      <para>And let's look at object resources next.</para>
    </sect1>

    <sect1>
      <title>Object Resource</title>

      <para>The <emphasis>/object</emphasis> link indicated above corresponds
      to the <classname>ObjectResource</classname> interface. This defines the
      set of interactions described in <xref
      linkend="sec.IntroducingRestfulObjects" />:</para>

      <programlisting>import java.io.InputStream;

import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;

public interface ObjectResource {

  ...
}</programlisting>

      <para>The implementation of this interface in <emphasis>Restful
      Objects</emphasis> viewer (<classname>ObjectResourceImpl</classname>)
      also defines a <code>@Path("/object")</code> for the class as a whole.
      All <acronym>URL</acronym> paths are therefore prefixed
      <emphasis>/object/{oid}</emphasis>.</para>

      <note>
        <para>I believe that the <code>@Path</code> annotation should reside
        on the interface, not the implementation. This seems to be a
        limitation with RestEasy 1.0.2, the underlying library used by
        <emphasis>Restful Objects</emphasis>.</para>
      </note>

      <para>Let's break it down into sections, starting with the
      object.</para>

      <sect2>
        <title>Objects</title>

        <para>The <emphasis>/objects/OID</emphasis> resource corresponds to
        the <classname>ObjectResource</classname> interface:</para>

        <programlisting>...

public interface ObjectResource {

  @GET
  @Path("/{oid}")
  @Produces( { "application/xhtml+xml", "text/html" })
  public String object(
    @PathParam("oid") final String oidStr);

  ...
}</programlisting>

        <para>This defines <emphasis>/object/{oid}</emphasis> as a
        <acronym>URL</acronym> supporting <acronym>GET</acronym>. Here's what
        calling this method gives for a repository object:</para>

        <para><screenshot>
            <screeninfo>ClaimRepository Resource</screeninfo>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/object-claims-resource.png"
                           scale="40" />
              </imageobject>
            </mediaobject>
          </screenshot>As ever, we get the initial "logged in" and "resources"
        sections. The remaining sections are details about this object,
        providing its title, the properties, the list of collections and then
        the actions. For repositories, the only items of significance here are
        the actions.</para>

        <para>Let's also look at a typical domain object:</para>

        <screenshot>
          <screeninfo>Claim Resource</screeninfo>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/object-claim-resource.png" scale="40" />
            </imageobject>
          </mediaobject>
        </screenshot>

        <para>The structure is the same, but here there are properties and
        collections, as well as actions. Let's look at the
        <acronym>XHTML</acronym> that represents this domain object, starting
        with the title:</para>

        <screenshot>
          <screeninfo>Object Resource's Title section</screeninfo>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/object-claim-title-section.png"
                         scale="70" />
            </imageobject>
          </mediaobject>
        </screenshot>

        <para>The raw <emphasis>XHTML</emphasis> looks like:</para>

        <programlisting>&lt;div&gt;
  &lt;table border="1"&gt;
    &lt;tr&gt;
      &lt;td&gt;Object title&lt;/td&gt;
      &lt;td class="nof-title"&gt;
        &lt;p&gt;New - 2009-11-28&lt;/p&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;OID&lt;/td&gt;
      &lt;td class="nof-oid"&gt;
        &lt;a href="/object/OID:C" rel="object" rev="object" class="nof-oid"&gt;
          OID:C
        &lt;/a&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Specification&lt;/td&gt;
      &lt;td class="nof-specification"&gt;
        &lt;a href="/specs/org.nakedobjects.examples.claims.dom.claim.Claim" 
           rel="spec" rev="object" class="nof-specification"&gt;
          org.nakedobjects.examples.claims.dom.claim.Claim
        &lt;/a&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/div&gt;</programlisting>

        <para>Some useful XPath expressions:</para>

        <itemizedlist>
          <listitem>
            <para><emphasis>//td[@class='nof-title']/p/text()</emphasis> will
            return the title</para>
          </listitem>

          <listitem>
            <para><emphasis>//td[@class='nof-oid']/a/text()</emphasis> is the
            OID (as a string)</para>
          </listitem>

          <listitem>
            <para><emphasis>//td[@class='nof-specification']/a/@href</emphasis>
            is a link the (resource repreenting the) specification of this
            object, in the form
            <emphasis>/specs/{fullyQualifiedClassName}</emphasis></para>
          </listitem>
        </itemizedlist>

        <para>Next up is the properties section:</para>

        <screenshot>
          <screeninfo>Object Resource's Properties section</screeninfo>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/object-claim-properties-section.png"
                         scale="50" />
            </imageobject>
          </mediaobject>
        </screenshot>

        <para>The raw <acronym>XHTML</acronym> (abbreviated; just the first
        property is listed) is:</para>

        <programlisting>&lt;div class="nof-properties"&gt;
  &lt;p class="nof-properties"&gt;Properties&lt;/p&gt;
  &lt;table border="1"&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Type&lt;/th&gt;
      &lt;th&gt;Hidden&lt;/th&gt;
      &lt;th&gt;Access&lt;/th&gt;
      &lt;th&gt;Disabled&lt;/th&gt;
      &lt;th&gt;Disabled Reason&lt;/th&gt;
      &lt;th&gt;Parseable&lt;/th&gt;
      &lt;th&gt;Modify&lt;/th&gt;
      &lt;th&gt;Clear&lt;/th&gt;
      &lt;th&gt;Invalid Reason&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;
        &lt;a href="/specs/org.nakedobjects.examples.claims.dom.claim.Claim/property/description" 
           rel="propertySpec" rev="property" class="nof-property"&gt;Description&lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;
        &lt;a href="/specs/java.lang.String" rel="propertyTypeSpec" 
           rev="property" class="nof-property"&gt;java.lang.String&lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;
        &lt;p class="nof-visible"&gt;N&lt;/p&gt;
      &lt;/td&gt;
      &lt;td&gt;
        &lt;p class="nof-property"&gt;Meeting at clients&lt;/p&gt;
      &lt;/td&gt;
      &lt;td&gt;
        &lt;p class="nof-usable"&gt;N&lt;/p&gt;
      &lt;/td&gt;
      &lt;td&gt;
        &lt;p /&gt;
      &lt;/td&gt;
      &lt;td&gt;
        &lt;p class="nof-visible"&gt;N&lt;/p&gt;
      &lt;/td&gt;
      &lt;td&gt;
        &lt;div class="nof-property"&gt;
          &lt;form name="property-description"&gt;
            &lt;input type="value" name="proposedValue" /&gt;
            &lt;input type="button" value="Set" 
              onclick="modifyProperty(&amp;quot;/object/OID:C&amp;quot;,&amp;quot;description&amp;quot;,proposedValue.value);" /&gt;
          &lt;/form&gt;
        &lt;/div&gt;
      &lt;/td&gt;
      &lt;td&gt;
        &lt;div class="nof-property"&gt;
          &lt;form name="property-description"&gt;
            &lt;input type="button" value="Clear" 
              onclick="clearProperty(&amp;quot;/object/OID:C&amp;quot;,&amp;quot;description&amp;quot;);" /&gt;
          &lt;/form&gt;
        &lt;/div&gt;
      &lt;/td&gt;
      &lt;td&gt;
        &lt;p class="nof-valid" id="property-invalid-description" /&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    ...
  &lt;/table&gt;
&lt;/div&gt;</programlisting>

        <para>Some useful XPath expressions are:</para>

        <itemizedlist>
          <listitem>
            <para><emphasis>//div[@class='nof-properties']//tr/td[1]/a/text()</emphasis>
            returns the property names</para>
          </listitem>

          <listitem>
            <para><emphasis>//div[@class='nof-properties']//tr/td[2]/a/@href</emphasis>
            returns links to (resources representing the) property types, in
            the form
            <emphasis>/specs/{fullyQualifiedClassName}</emphasis></para>
          </listitem>

          <listitem>
            <para><emphasis>//div[@class='nof-properties']//tr/td[3]/p/text()</emphasis>
            returns whether properties are invisible (N=not invisible)</para>
          </listitem>

          <listitem>
            <para><emphasis>//div[@class='nof-properties']//tr/td[4]</emphasis>
            returns the <sgmltag>&lt;td&gt;</sgmltag> table cells containing
            the values; the values will either be <sgmltag>&lt;p&gt;</sgmltag>
            (values) or <sgmltag>&lt;a href=...&gt;</sgmltag>
            (references)</para>
          </listitem>
        </itemizedlist>

        <para>and so on.</para>

        <para>The "modify" and "clear" columns bear further description. These
        are used to perform <acronym>PUT</acronym>s and
        <acronym>DELETE</acronym>s on the resources that represent the
        property. Because XHTML4 does not support <acronym>PUT</acronym> and
        <acronym>DELETE</acronym> verbs in forms, they actually call
        Javascript fragments to do these calls. See <xref
        linkend="sec.Properties" /> for further details of the format of these
        requests.</para>

        <para>The values that are entered into modify for value properties is
        the parseable text form (eg TRUE for a boolean); for reference
        properties it is the OID.</para>

        <para>If a property is disabled, then the "disabled reason" column
        will indicate why. If a property is enabled but the proposed property
        value is invalid, then the "invalid reason" will indicate why. Note
        that it takes a round-trip to do this validation, because the domain
        objects are not in any sense serialized into the browser.</para>

        <para>Let's now look at the collections section:</para>

        <screenshot>
          <screeninfo>Object Resource's Collections section</screeninfo>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/object-claim-collections-section.png"
                         scale="50" />
            </imageobject>
          </mediaobject>
        </screenshot>

        <para>The raw <acronym>XHTML</acronym> is:</para>

        <programlisting>&lt;div class="nof-collections"&gt;
  &lt;p class="nof-collections"&gt;Collections&lt;/p&gt;
  &lt;table border="1"&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Type&lt;/th&gt;
      &lt;th&gt;Hidden&lt;/th&gt;
      &lt;th&gt;Disabled&lt;/th&gt;
      &lt;th&gt;Access&lt;/th&gt;
      &lt;th&gt;AddTo&lt;/th&gt;
      &lt;th&gt;RemoveFrom&lt;/th&gt;
      &lt;th&gt;Invalid Reason&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;
        &lt;a href="/specs/org.nakedobjects.examples.claims.dom.claim.Claim/collection/items" 
           rel="propertySpec" rev="collection" class="nof-collection"&gt;
          Items
        &lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;
        &lt;a href="/specs/org.nakedobjects.examples.claims.dom.claim.ClaimItem" 
           rel="propertyTypeSpec" rev="property" class="nof-property"&gt;
          org.nakedobjects.examples.claims.dom.claim.ClaimItem
        &lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;
        &lt;p class="nof-visible"&gt;N&lt;/p&gt;
      &lt;/td&gt;
      &lt;td&gt;
        &lt;p class="nof-usable"&gt;N&lt;/p&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;a href="/object/OID:C/collection/items" 
          rel="collection" rev="nakedObject" class="nof-collection"&gt;items&lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;
        &lt;div class="nof-collection"&gt;
          &lt;form name="collection-items"&gt;
            &lt;input type="value" name="proposedValue" /&gt;
            &lt;input type="button" value="Add" 
              onclick="addToCollection(&amp;quot;/object/OID:C&amp;quot;, &amp;quot;items&amp;quot;, proposedValue.value);" /&gt;
          &lt;/form&gt;
        &lt;/div&gt;
      &lt;/td&gt;
      &lt;td&gt;
        &lt;div class="nof-collection"&gt;
          &lt;form name="collection-items"&gt;
            &lt;input type="value" name="proposedValue" /&gt;
            &lt;input type="button" value="Remove" 
              onclick="removeFromCollection(&amp;quot;/object/OID:C&amp;quot;, &amp;quot;items&amp;quot;, proposedValue.value);" /&gt;
          &lt;/form&gt;
        &lt;/div&gt;
      &lt;/td&gt;
      &lt;td&gt;
        &lt;p class="nof-valid" id="collection-invalid-items" /&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/div&gt;</programlisting>

        <para>In this particular case there is only a single collection, but
        in general there could be many.</para>

        <para>Some useful XPath expressions are:</para>

        <itemizedlist>
          <listitem>
            <para><emphasis>//div[@class='nof-collections']//tr/td[1]/a/text()</emphasis>
            returns the collection names</para>
          </listitem>

          <listitem>
            <para><emphasis>//div[@class='nof-properties']//tr/td[2]/a/@href</emphasis>
            returns links to (resources representing the) type of the
            collection, in the form
            <emphasis>/specs/{fullyQualifiedClassName}</emphasis></para>
          </listitem>

          <listitem>
            <para><emphasis>//div[@class='nof-properties']//tr/td[3]/p/text()</emphasis>
            returns whether collections are invisible (N=not invisible)</para>
          </listitem>

          <listitem>
            <para><emphasis>//div[@class='nof-collections']//tr/td[5]/a/@href</emphasis>
            returns a link to a resource representing the contents of the
            collection, in the form
            <emphasis>/object/{oid}/collection/{collectionId}</emphasis></para>
          </listitem>
        </itemizedlist>

        <para>and so on. Note that the table doesn't show the contents of each
        collection, instead it gives us a link to access the contents</para>

        <para>Similar to properties, the "addTo" and "removeFrom" columns are
        used to submit <acronym>PUT</acronym> or <acronym>DELETE</acronym>s
        against the collection resource. See <xref
        linkend="sec.Collections" /> for more details. The arguments provided
        are the OIDs of objects in the collection.</para>

        <para>Finally, let's look at actions:</para>

        <screenshot>
          <screeninfo>Object Resource's Actions section</screeninfo>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/object-claim-actions-section.png"
                         scale="50" />
            </imageobject>
          </mediaobject>
        </screenshot>

        <para>The raw <acronym>XHTML</acronym> (abbreviated; just the first
        action is listed) is:</para>

        <programlisting>&lt;div class="nof-actions"&gt;
  &lt;p class="nof-actions"&gt;Actions&lt;/p&gt;
  &lt;table border="1"&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Type&lt;/th&gt;
      &lt;th&gt;Type&lt;/th&gt;
      &lt;th&gt;# Params&lt;/th&gt;
      &lt;th&gt;Hidden&lt;/th&gt;
      &lt;th&gt;Disabled&lt;/th&gt;
      &lt;th&gt;Disabled Reason&lt;/th&gt;
      &lt;th&gt;Real Target&lt;/th&gt;
      &lt;th&gt;Invoke&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;
        &lt;a href="/specs/org.nakedobjects.examples.claims.dom.claim.Claim/action/addItem(int,double,java.lang.String)"
           rel="actionSpec" rev="action" class="nof-action"&gt;Add Item&lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;
        &lt;p class="nof-action"&gt;USER&lt;/p&gt;
      &lt;/td&gt;
      &lt;td&gt;
        &lt;a href="/specs/void" rel="actionReturnTypeSpec" rev="action" class="nof-action"&gt;void&lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;
        &lt;p class="nof-action"&gt;3&lt;/p&gt;
      &lt;/td&gt;
      &lt;td&gt;
        &lt;p class="nof-visible"&gt;N&lt;/p&gt;
      &lt;/td&gt;
      &lt;td&gt;
        &lt;p class="nof-usable"&gt;N&lt;/p&gt;
      &lt;/td&gt;
      &lt;td&gt;
        &lt;p /&gt;
      &lt;/td&gt;
      &lt;td&gt;
        &lt;a href="/object/OID:C" rel="actionRealTarget" rev="action" class="nof-action"&gt;OID:C&lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;
        &lt;div class="nof-action"&gt;
          &lt;form name="action-addItem(int,double,java.lang.String)" method="POST" 
                action="/object/OID:C/action/addItem(int,double,java.lang.String)"&gt;
            &lt;p&gt;Days since&lt;/p&gt;
            &lt;input type="value" name="arg0" /&gt;
            &lt;p&gt;Amount&lt;/p&gt;
            &lt;input type="value" name="arg1" /&gt;
            &lt;p&gt;Description&lt;/p&gt;
            &lt;input type="value" name="arg2" /&gt;
            &lt;input type="submit" value="Invoke" /&gt;
          &lt;/form&gt;
        &lt;/div&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    ...
  &lt;/table&gt;
&lt;/div&gt;</programlisting>

        <para>Some useful XPath expressions are:</para>

        <itemizedlist>
          <listitem>
            <para><emphasis>//div[@class='nof-actions']//tr/td[1]/a/text()</emphasis>
            returns the names of each action</para>
          </listitem>

          <listitem>
            <para><emphasis>//div[@class='nof-actions']//tr/td[3]/a/@href</emphasis>
            returns links to (resources representing the) type of the returned
            result of each action, in the form
            <emphasis>/specs/{fullyQualifiedClassName}</emphasis></para>
          </listitem>

          <listitem>
            <para><emphasis>//div[@class='nof-actions']//tr/td[5]/p/text()</emphasis>
            returns whether each action is invisible or not (N=not
            invisible)</para>
          </listitem>

          <listitem>
            <para><emphasis>//div[@class='nof-actions']//tr/td[8]/a/text()</emphasis>
            returns the OID of the real target; more on this in a
            moment</para>
          </listitem>

          <listitem>
            <para><emphasis>//div[@class='nof-actions']//tr/td[9]//form</emphasis>
            returns a form to invoke the action using
            <acronym>POST</acronym></para>
          </listitem>
        </itemizedlist>

        <para>and so on. Note that the table doesn't show the contents of each
        collection, instead it gives us a link to access the contents</para>

        <para>There is no javascript calls this time; invoking actions is just
        a <acronym>POST</acronym>. The arguments provided are the same as for
        properties: text for parseable values, or the OIDs of objects for
        references.</para>

        <para>The "realTarget" column is provided to support contributed
        actions. For example, here are the actions listed for a domain object
        (<classname>Employee</classname>) where the
        <methodname>claimsFor()</methodname> action is contributed (by the
        <classname>ClaimsRepository</classname>):</para>

        <screenshot>
          <screeninfo>Contributed Actions</screeninfo>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/object-employee-contributed-actions.png"
                         scale="50" />
            </imageobject>
          </mediaobject>
        </screenshot>

        <para>In the DnD viewer this action would appear to reside on the
        domain object. In reality though the action resides on the repository,
        taking a single argument - the domain object
        (<classname>Employee</classname>).</para>

        <para>And that concludes our run-through of the <acronym>GET</acronym>
        verb for object resources. Phew!</para>

        <note>
          <para><acronym>PUT</acronym> and <acronym>DELETE</acronym> verbs for
          object resources have not yet been implemented.</para>
        </note>
      </sect2>

      <sect2 id="sec.Properties">
        <title>Properties</title>

        <para>The next set of resources exposed by
        <classname>ObjectResource</classname> are those specific to
        properties:</para>

        <programlisting>...
public interface ObjectResource {
  ...
  @PUT
  @Path("/{oid}/property/{propertyId}")
  @Produces( { "application/xhtml+xml", "text/html" })
  public String modifyProperty(
    @PathParam("oid") final String oidStr,
    @PathParam("propertyId") final String propertyId,
    @QueryParam("proposedValue") final String proposedValue);

  @DELETE
  @Path("/{oid}/property/{propertyId}")
  @Produces( { "application/xhtml+xml", "text/html" })
  public String clearProperty(
    @PathParam("oid") final String oidStr,
    @PathParam("propertyId") final String propertyId);
  ...
}</programlisting>

        <para>This defines
        <emphasis>/object/{oid}/property/{propertyId}</emphasis> as the
        <acronym>URL</acronym> supporting:</para>

        <itemizedlist>
          <listitem>
            <para><acronym>PUT</acronym>, to change the value of a property;
            the proposedValue should be a query parameter to this
            <acronym>URL</acronym>;</para>
          </listitem>

          <listitem>
            <para><acronym>DELETE</acronym>, to clear the property</para>
          </listitem>
        </itemizedlist>

        <para>Calling these will first validate the change, and if accepted
        apply the change:</para>

        <itemizedlist>
          <listitem>
            <para>If the validation fails, then an exception will be thrown.
            This translates to a response with error code in the range [400,
            500), and with a response header of "nof-reason".</para>
          </listitem>

          <listitem>
            <para>If the validation succeeds, the returned
            <acronym>XHTML</acronym> is the object's title only.</para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="sec.Collections">
        <title>Collections</title>

        <para>The next set of resources exposed by
        <classname>ObjectResource</classname> are those for
        collections:</para>

        <programlisting>...
public interface ObjectResource {
  ...
  @GET
  @Path("/{oid}/collection/{collectionId}")
  @Produces( { "application/xhtml+xml", "text/html" })
  public String accessCollection(
    @PathParam("oid") final String oidStr,
    @PathParam("collectionId") final String collectionId);

  @PUT
  @Path("/{oid}/collection/{collectionId}")
  @Produces( { "application/xhtml+xml", "text/html" })
  public String addToCollection(
    @PathParam("oid") final String oidStr,
    @PathParam("collectionId") final String collectionId,
    @QueryParam("proposedValue") final String proposedValueOidStr);

  @DELETE
  @Path("/{oid}/collection/{collectionId}")
  @Produces( { "application/xhtml+xml", "text/html" })
  public String removeFromCollection(
    @PathParam("oid") final String oidStr,
    @PathParam("collectionId") final String collectionId,
    @QueryParam("proposedValue") final String proposedValueOidStr);
  ...
}</programlisting>

        <para>This defines
        <emphasis>/object/{oid}/property/{collectionId}</emphasis> as a
        <acronym>URL</acronym> supporting:</para>

        <itemizedlist>
          <listitem>
            <para><acronym>GET</acronym>, to read the contents of this
            collection.</para>
          </listitem>

          <listitem>
            <para><acronym>PUT</acronym>, to add an item to the collection;
            the proposedValue should be a query parameter to this
            <acronym>URL</acronym> and contain an OID;</para>
          </listitem>

          <listitem>
            <para><acronym>DELETE</acronym>, to remove an item to the
            collection; the proposedValue should be a query parameter to this
            <acronym>URL</acronym> and contain an OID;</para>
          </listitem>
        </itemizedlist>

        <para>The handling of <acronym>PUT</acronym> and the
        <acronym>DELETE</acronym> is similar to that of properties. The
        proposed value is validated first, and if invalid then a exception is
        thrown resulting in a response in range [400, 500) with a response
        header of "nof-reason". Otherwise the object's title and OID are
        returned.</para>

        <note>
          <para>We could perhaps change this to return the new contents of the
          collection, ie as if a GET had been performed?</para>
        </note>

        <para>A <acronym>GET</acronym> meanwhile returns the following:</para>

        <screenshot>
          <screeninfo>Collection Contents</screeninfo>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/collection-items-resource.png"
                         scale="50" />
            </imageobject>
          </mediaobject>
        </screenshot>

        <para>The raw <acronym>XHTML</acronym> for the contents part of this
        is:</para>

        <programlisting>&lt;div class="nof-collection"&gt;
  &lt;p class="nof-collection"&gt;items&lt;/p&gt;
  &lt;ul class="nof-collection"&gt;
    &lt;li&gt;
      &lt;a href="/object/OID:D" rel="object" rev="results" class="nof-action-result"&gt;
        Car parking
      &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href="/object/OID:E" rel="object" rev="results" class="nof-action-result"&gt;
        Reading - London (return)
      &lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</programlisting>

        <para>Useful XPath here is:</para>

        <itemizedlist>
          <listitem>
            <para><emphasis>//div[@class='nof-collection']//li/a/@href</emphasis>
            to return the links to object resources in the collection</para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="sec.Actions">
        <title>Actions</title>

        <para>The final set of resources exposed by
        <classname>ObjectResource</classname> is for actions:</para>

        <programlisting>...
public interface ObjectResource {
  ...
  @POST
  @Path("/{oid}/action/{actionId}")
  @Produces( { "application/xhtml+xml", "text/html" })
  public String invokeAction(
    @PathParam("oid") final String oidStr,
    @PathParam("actionId") final String actionId, 
    final InputStream body);
  ...
}</programlisting>

        <para>This defines
        <emphasis>/object/{oid}/property/{actionId}</emphasis> as a
        <acronym>URL</acronym> supporting a <acronym>POST</acronym>. What's
        noteworthy here is the last argument, an
        <classname>java.io.InputStream</classname>. This provides a handle to
        the POST's input stream which contains the parameter/argument
        pairs.</para>

        <para>The parameters should be named arg0, arg1, arg2 and so on, with
        the parameter value representing the argument. What this value is will
        depend on whether the parameter's type is a reference (entity) type or
        a parseable value type:</para>

        <itemizedlist>
          <listitem>
            <para>for reference types, the value should be the (string
            representation of the) OID of the entity</para>
          </listitem>

          <listitem>
            <para>for value types, the value should be in parseable string
            format. In practical terms, use the same string format as would
            work in the the DnD viewer. (To be precise, it's the format
            understood by the <classname>ParseableFacet</classname> for the
            parameter's type) </para>
          </listitem>
        </itemizedlist>

        <para>For example, for an action findCustomers(registeredDate,
        CustomerType) then the parameters would be something like: </para>

        <itemizedlist>
          <listitem>
            <para>arg0=20090103</para>
          </listitem>

          <listitem>
            <para>arg1=CTP|12</para>
          </listitem>
        </itemizedlist>

        <para>where <userinput>20090103</userinput> is 3-Jan-2009 in parseable
        format, and <userinput>CTP|12</userinput> is the
        <acronym>OID</acronym> (as assigned by the object store) for
        <classname>CustomerType</classname> with ID=12. </para>

        <para>When an action is invoked, the response always includes the OID
        and title of the object on which the action was invoked. In
        addition:</para>

        <itemizedlist>
          <listitem>
            <para>if the action returned an object, then the response will
            include a link to the object</para>

            <note>
              <para>We could perhaps change this to return the GET of the
              returned object?</para>
            </note>
          </listitem>

          <listitem>
            <para>if the action returned a collection of objects, then the
            response will return a list of links to the objects</para>
          </listitem>

          <listitem>
            <para>if the action returned void; then nothing further is added
            to the response</para>
          </listitem>
        </itemizedlist>
      </sect2>
    </sect1>

    <sect1>
      <title>Metamodel (specs) Resource</title>

      <para>The
      <emphasis><emphasis>/</emphasis>specs/{fullyQualifedClassName}</emphasis>
      links indicated in several places in the representations produced by
      <classname>ObjectResource</classname> corresponds to the
      <classname>SpecsResource</classname>:</para>

      <programlisting>import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;

public interface SpecsResource {
  ...
}</programlisting>

      <para>The implementation of this interface in <emphasis>Restful
      Objects</emphasis> viewer (<classname>SpecsResourceImpl</classname>)
      also defines a <code>@Path("/specs")</code> for the class as a whole.
      This therefore defines a <acronym>URL</acronym> in the form
      <emphasis>/services</emphasis> supporting the <acronym>GET</acronym>
      method.</para>

      <note>
        <para>I believe that the <code>@Path</code> annotation should reside
        on the interface, not the implementation. This seems to be a
        limitation with RestEasy 1.0.2, the underlying library used by
        <emphasis>Restful Objects</emphasis>.</para>
      </note>

      <para>The purpose of the /specs/ family of resources is to describe the
      structure of the domain objects, ie expose a metamodel for the domain
      objects. Client-side applications might choose to iterate through all
      the specs resources first and cache them; this would then simplify the
      task of rendering domain objects.</para>

      <para>Again, let's break the resources provided by
      <classname>SpecsResource</classname> into sections.</para>

      <sect2>
        <title>All Classes</title>

        <para>First up, we have a resource to list all classes (or
        specs):</para>

        <programlisting>import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;

public interface SpecsResource {

  @GET
  @Path("/")
  @Produces( { "application/xhtml+xml", "text/html" })
  public abstract String specs();

  ...
}</programlisting>

        <para>This defines <emphasis>/specs</emphasis> as a
        <acronym>URL</acronym> accepting <acronym>GET</acronym>. This returns
        the following:</para>

        <screenshot>
          <screeninfo>Specs Resource</screeninfo>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/specs-resource.png" scale="50" />
            </imageobject>
          </mediaobject>
        </screenshot>

        <para>The raw <acronym>XHTML</acronym> produced (abbreviated)
        is:</para>

        <programlisting>&lt;div class="nof-section"&gt;
  &lt;p class="nof-section"&gt;Specifications&lt;/p&gt;
  &lt;ul class="nof-specifications"&gt;
    ...
    &lt;li&gt;
      &lt;a href="/specs/int" rel="spec" rev="specs" 
         class="nof-specification"&gt;int&lt;/a&gt;
    &lt;/li&gt;
    ...
    &lt;li&gt;
      &lt;a href="/specs/java.lang.String" rel="spec" rev="specs" 
         class="nof-specification"&gt;java.lang.String&lt;/a&gt;
    &lt;/li&gt;
    ...
    &lt;li&gt;
      &lt;a href="/specs/org.nakedobjects.applib.value.Date" rel="spec" rev="specs" 
         class="nof-specification"&gt;org.nakedobjects.applib.value.Date&lt;/a&gt;
    &lt;/li&gt;
    ..
    &lt;li&gt;
      &lt;a href="/specs/org.nakedobjects.examples.claims.dom.claim.Claim" rel="spec" rev="specs" 
         class="nof-specification"&gt;org.nakedobjects.examples.claims.dom.claim.Claim&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href="/specs/org.nakedobjects.examples.claims.dom.claim.ClaimItem" rel="spec" rev="specs" 
         class="nof-specification"&gt;org.nakedobjects.examples.claims.dom.claim.ClaimItem&lt;/a&gt;
    &lt;/li&gt;
    ...
    &lt;li&gt;
      &lt;a href="/specs/void" rel="spec" rev="specs" 
         class="nof-specification"&gt;void&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</programlisting>

        <para>Useful XPath expressions:</para>

        <itemizedlist>
          <listitem>
            <para><emphasis>//a[@class='nof-specification']/@href</emphasis>
            will give links to resources for all specifications</para>
          </listitem>
        </itemizedlist>

        <para>Let's look at an individual specification next.</para>
      </sect2>

      <sect2 id="sec.spec">
        <title>Class (<classname>NakedObjectSpecification</classname>)</title>

        <para>The resource for a specification is:</para>

        <programlisting>...

public interface SpecsResource {
  ...
  @GET
  @Path("/{specFullName}")
  @Produces( { "application/xhtml+xml", "text/html" })
  public abstract String spec(
    @PathParam("specFullName") final String specFullName);
  ...
}</programlisting>

        <para>This defines <emphasis>/specs/{specFullName}</emphasis> as a
        <acronym>URL</acronym> accepting <acronym>GET</acronym>. This
        returns:</para>

        <screenshot>
          <screeninfo>Spec Resource</screeninfo>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/spec-resource.png" scale="36" />
            </imageobject>
          </mediaobject>
        </screenshot>

        <para>The raw <acronym>XHTML</acronym> for this breaks into five
        regions.</para>

        <para>First (abbreviated) we have the facets, which define additional
        semantics to the holder (in this case, the spec):</para>

        <programlisting>&lt;div class="nof-facets"&gt;
  &lt;p class="nof-facets"&gt;Facets&lt;/p&gt;
  &lt;table border="1"&gt;
     &lt;tr&gt;
       &lt;th&gt;FacetType&lt;/th&gt;
       &lt;th&gt;Implementation&lt;/th&gt;
       ...
     &lt;/tr&gt;
     ...
     &lt;tr&gt;
       &lt;td&gt;
         &lt;a href="org.nakedobjects.examples.claims.dom.claim.Claim/facet/org.nakedobjects.metamodel.facets.object.ident.plural.PluralFacet"
            rel="facet" rev="spec" class="nof-facet"&gt;org.nakedobjects.metamodel.facets.object.ident.plural.PluralFacet&lt;/a&gt;
       &lt;/td&gt;
       &lt;td&gt;
         &lt;p&gt;org.nakedobjects.metamodel.facets.object.ident.plural.PluralFacetInferred&lt;/p&gt;
       &lt;/td&gt;
       ...
     &lt;/tr&gt;
     ...
     &lt;tr&gt;
       &lt;td&gt;
         &lt;a href="org.nakedobjects.examples.claims.dom.claim.Claim/facet/org.nakedobjects.metamodel.facets.naming.named.NamedFacet"
            rel="facet" rev="spec" class="nof-facet"&gt;org.nakedobjects.metamodel.facets.naming.named.NamedFacet&lt;/a&gt;
       &lt;/td&gt;
       &lt;td&gt;
         &lt;p&gt;org.nakedobjects.metamodel.facets.naming.named.NamedFacetInferred&lt;/p&gt;
       &lt;/td&gt;
       ...
     &lt;/tr&gt;
     ...
     &lt;tr&gt;
       &lt;td&gt;
         &lt;a href="org.nakedobjects.examples.claims.dom.claim.Claim/facet/org.nakedobjects.metamodel.facets.naming.describedas.DescribedAsFacet" rel="facet" rev="spec" class="nof-facet"&gt;org.nakedobjects.metamodel.facets.naming.describedas.DescribedAsFacet&lt;/a&gt;
       &lt;/td&gt;
       &lt;td&gt;
         &lt;p&gt;org.nakedobjects.metamodel.facets.naming.describedas.DescribedAsFacetNone&lt;/p&gt;
       &lt;/td&gt;
       ...
     &lt;/tr&gt;
     ...
   &lt;/table&gt;
&lt;/div&gt;</programlisting>

        <para>Many of the facets listed will not be that relevant to us, but
        some - such as the singular name of a class
        (<classname>NamedFacet</classname>), the plural name of a class
        (<classname>PluralFacet</classname>) and the description of a class
        (<classname>DescribedAsFacet</classname>) will be useful for
        presentation purposes. It is also possible to define additional facets
        that might be relevant to your own client-side application. For
        example, if you were writing a mash-up <acronym>GUI</acronym> and
        wanted to render an Address domain object within a map, you might want
        to define a <classname>MapCoordinatesFacet</classname>.</para>

        <note>
          <para>Actually, this isn't quite true; there is currently no way to
          evaluate a facet for a particular domain object instance.</para>
        </note>

        <para>As ever, we can use XPath to pull out values:</para>

        <itemizedlist>
          <listitem>
            <para><emphasis>//div[@class='nof-facets']//a[.='org.nakedobjects.metamodel.facets.object.ident.plural.PluralFacet']/@href</emphasis>
            will pull out the link for the <classname>PluralFacet</classname>,
            if there is one.</para>
          </listitem>
        </itemizedlist>

        <para>Next we have the (definition of the) properties for a
        spec:</para>

        <programlisting>&lt;div class="nof-properties"&gt;
  &lt;p class="nof-properties"&gt;Properties&lt;/p&gt;
  &lt;ul class="nof-properties"&gt;
    &lt;li&gt;
      &lt;a href="/specs/org.nakedobjects.examples.claims.dom.claim.Claim/property/description" 
         rel="property" rev="spec" class="nof-property"&gt;description&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href="/specs/org.nakedobjects.examples.claims.dom.claim.Claim/property/date" 
         rel="property" rev="spec" class="nof-property"&gt;date&lt;/a&gt;
   &lt;/li&gt;
   ...
  &lt;/ul&gt;
&lt;/div&gt;</programlisting>

        <para>Useful XPath queries here:</para>

        <itemizedlist>
          <listitem>
            <para><emphasis>//div[@class='nof-properties']//a/text()</emphasis>
            returns the property names</para>
          </listitem>

          <listitem>
            <para><emphasis>//div[@class='nof-properties']//a/@href</emphasis>
            returns links to the property definitions (see <xref
            linkend="sec.SpecMembers" />)</para>
          </listitem>
        </itemizedlist>

        <para>Similarly, we have collections:</para>

        <programlisting>&lt;div class="nof-collections"&gt;
  &lt;p class="nof-collections"&gt;Collections&lt;/p&gt;
  &lt;ul class="nof-collections"&gt;
    &lt;li&gt;
      &lt;a href="/specs/org.nakedobjects.examples.claims.dom.claim.Claim/collection/items"
         rel="collection" rev="spec" class="nof-collection"&gt;items&lt;/a&gt;
    &lt;/li&gt;
    ...
  &lt;/ul&gt;
&lt;/div&gt;</programlisting>

        <para>Useful XPath queries here:</para>

        <itemizedlist>
          <listitem>
            <para><emphasis>//div[@class='nof-collections']//a/text()</emphasis>
            returns the collection names</para>
          </listitem>

          <listitem>
            <para><emphasis>//div[@class='nof-collections']//a/@href</emphasis>
            returns links to the collection definitions (see <xref
            linkend="sec.SpecMembers" />)</para>
          </listitem>
        </itemizedlist>

        <para>Lastly, the actions. These fall into three groups: regular
        (USER) actions, debug actions (annotated with
        <classname>@Debug</classname>) and exploration actions (that are
        available only in exploration mode):</para>

        <programlisting>&lt;div class="nof-actions"&gt;
  &lt;p class="nof-actions"&gt;USER actions&lt;/p&gt;
  &lt;ul class="nof-actions"&gt;
    &lt;li&gt;
      &lt;a href="/specs/org.nakedobjects.examples.claims.dom.claim.Claim/action/addItem(int,double,java.lang.String)"
         rel="action" rev="spec" class="nof-action"&gt;addItem(int,double,java.lang.String)&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href="/specs/org.nakedobjects.examples.claims.dom.claim.Claim/action/submit(org.nakedobjects.examples.claims.dom.claim.Approver)"
         rel="action" rev="spec" class="nof-action"&gt;submit(org.nakedobjects.examples.claims.dom.claim.Approver)&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
&lt;div class="nof-actions"&gt;
  &lt;p class="nof-actions"&gt;DEBUG actions&lt;/p&gt;
  &lt;ul class="nof-actions" /&gt;
&lt;/div&gt;
&lt;div class="nof-actions"&gt;
  &lt;p class="nof-actions"&gt;EXPLORATION actions&lt;/p&gt;
  &lt;ul class="nof-actions" /&gt;
&lt;/div&gt;</programlisting>

        <para>Useful XPath queries here:</para>

        <itemizedlist>
          <listitem>
            <para><emphasis>//div[@class='nof-actions' and p/text()='USER
            actions']//a/@href</emphasis> returns links to the regular user
            actions</para>
          </listitem>

          <listitem>
            <para><emphasis>//div[@class='nof-actions' and p/text()='DEBUG
            actions']//a/@href</emphasis> returns links to the debug
            actions</para>
          </listitem>

          <listitem>
            <para><emphasis>//div[@class='nof-actions' and
            p/text()='EXPLORATION actions']//a/@href</emphasis> returns links
            to the exploration actions</para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="sec.SpecMembers">
        <title>Class Members
        (<classname>NakedObjectMember</classname>)</title>

        <para>The next set of resources provided by SpecsResource are for the
        individual class members (properties, collections or actions):</para>

        <programlisting>...

public interface SpecsResource {
  ...
  @GET
  @Path("/{specFullName}/property/{propertyName}")
  @Produces( { "application/xhtml+xml", "text/html" })
  public abstract String specProperty(
    @PathParam("specFullName") final String specFullName,
    @PathParam("propertyName") final String propertyName);

  @GET
  @Path("/{specFullName}/collection/{collectionName}")
  @Produces( { "application/xhtml+xml", "text/html" })
  public abstract String specCollection(
    @PathParam("specFullName") final String specFullName,
    @PathParam("collectionName") final String collectionName);

  @GET
  @Path("/{specFullName}/action/{actionId}")
  @Produces( { "application/xhtml+xml", "text/html" })
  public abstract String specAction(
    @PathParam("specFullName") final String specFullName,
    @PathParam("actionId") final String actionId);
  ...
}</programlisting>

        <para>This defines the following <acronym>URL</acronym>s all accepting
        <acronym>GET</acronym>:</para>

        <itemizedlist>
          <listitem>
            <para><emphasis>/specs/{specFullName}/property/{propertyName}</emphasis>
            for a resource representing a property definition</para>
          </listitem>

          <listitem>
            <para><emphasis>/specs/{specFullName}/collection/{propertyName}</emphasis>
            for a resource representing a collection definition</para>
          </listitem>

          <listitem>
            <para><emphasis>/specs/{specFullName}/action/{actionId}</emphasis>
            for a resource representing a action definition</para>
          </listitem>
        </itemizedlist>

        <para>Each of these resources generates a similar representation,
        listing the facets for that class member. For example, here is the
        resource for a property spec:</para>

        <screenshot>
          <screeninfo>Spec Member Resource</screeninfo>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/spec-member-resource.png" scale="33" />
            </imageobject>
          </mediaobject>
        </screenshot>

        <para>The raw <acronym>XHTML</acronym> (abbreviated) is:</para>

        <programlisting>&lt;div&gt;
  &lt;p&gt;Owners&lt;/p&gt;
  &lt;ul class="nof-specification"&gt;
    &lt;a href="/specs/org.nakedobjects.examples.claims.dom.claim.Claim" rel="spec" rev="property" class="nof-specification"&gt;owning spec&lt;/a&gt;
  &lt;/ul&gt;
&lt;/div&gt;
&lt;div class="nof-facets"&gt;
  &lt;p class="nof-facets"&gt;Facets&lt;/p&gt;
  &lt;table border="1"&gt;
    &lt;tr&gt;
      &lt;th&gt;FacetType&lt;/th&gt;
      &lt;th&gt;Implementation&lt;/th&gt;
      ...
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;
        &lt;a href="description/facet/org.nakedobjects.metamodel.facets.propparam.typicallength.TypicalLengthFacet" rel="facet" rev="spec" class="nof-facet"&gt;org.nakedobjects.metamodel.facets.propparam.typicallength.TypicalLengthFacet&lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;
        &lt;p&gt;org.nakedobjects.metamodel.facets.propparam.typicallength.TypicalLengthFacetDerivedFromType&lt;/p&gt;
      &lt;/td&gt;
      ...
    &lt;/tr&gt;
    ...
    &lt;tr&gt;
      &lt;td&gt;
        &lt;a href="description/facet/org.nakedobjects.metamodel.facets.ordering.memberorder.MemberOrderFacet" rel="facet" rev="spec" class="nof-facet"&gt;org.nakedobjects.metamodel.facets.ordering.memberorder.MemberOrderFacet&lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;
        &lt;p&gt;org.nakedobjects.metamodel.facets.ordering.memberorder.MemberOrderFacetAnnotation&lt;/p&gt;
      &lt;/td&gt;
      ...
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;
        &lt;a href="description/facet/org.nakedobjects.metamodel.facets.propparam.validate.mandatory.MandatoryFacet" rel="facet" rev="spec" class="nof-facet"&gt;org.nakedobjects.metamodel.facets.propparam.validate.mandatory.MandatoryFacet&lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;
        &lt;p&gt;org.nakedobjects.metamodel.facets.propparam.validate.mandatory.MandatoryFacetDefault&lt;/p&gt;
      &lt;/td&gt;
      ...
    &lt;/tr&gt;
    ...
  &lt;/table&gt;
&lt;/div&gt;</programlisting>

        <para>As for specifications themselves (see <xref
        linkend="sec.spec" />), many of the facets will not be that relevant.
        However, <classname>NamedFacet</classname> and
        <classname>DescribedAsFacet</classname> mentioned earlier would be,
        for presentation purposes. In addition, for properties the
        <classname>TypicalLengthFacet</classname> can be used as a hint for a
        field in the <acronym>UI</acronym>, and
        <classname>MemberOrderFacet</classname> annotation can be used to
        indicate the order of fields in the <acronym>UI</acronym>. The
        <classname>MandatoryFacet</classname> can be used to indicate
        mandatory properties.</para>

        <para>As ever, XPath can be used to pull out information from the
        resource.</para>

        <note>
          <para>Although actions produce a similar output, they ought to be
          extended to provide information on action parameters; both how many
          parameters there are, and also facets associated with those
          parameters.</para>
        </note>
      </sect2>

      <sect2>
        <title>Facets</title>

        <para>A facet resource allows the value of a facet to be inspected.
        The resources provided by <classname>SpecsResource</classname>
        are:</para>

        <programlisting>...

public interface SpecsResource {
  ...
  @GET
  @Path("/{specFullName}/facet/{facetType}")
  @Produces( { "application/xhtml+xml", "text/html" })
  public abstract String specFacet(
    @PathParam("specFullName") final String specFullName,
    @PathParam("facetType") final String facetTypeName);

  @GET
  @Path("/{specFullName}/property/{propertyName}/facet/{facetType}")
  @Produces( { "application/xhtml+xml", "text/html" })
  public abstract String specPropertyFacet(
    @PathParam("specFullName") final String specFullName,
    @PathParam("propertyName") final String propertyName,
    @PathParam("facetType") final String facetTypeName);

  @GET
  @Path("/{specFullName}/collection/{collectionName}/facet/{facetType}")
  @Produces( { "application/xhtml+xml", "text/html" })
  public abstract String specCollectionFacet(
    @PathParam("specFullName") final String specFullName,
    @PathParam("collectionName") final String collectionName,
    @PathParam("facetType") final String facetTypeName);

  @GET
  @Path("/{specFullName}/action/{actionId}/facet/{facetType}")
  @Produces( { "application/xhtml+xml", "text/html" })
  public abstract String specActionFacet(
    @PathParam("specFullName") final String specFullName,
    @PathParam("actionId") final String actionId,
    @PathParam("facetType") final String facetTypeName);
  ...
}</programlisting>

        <para>This defines the following <acronym>URL</acronym>s all accepting
        <acronym>GET</acronym>:</para>

        <itemizedlist>
          <listitem>
            <para><emphasis>/specs/{specFullName}/facet/{facetType}</emphasis>
            for a facet on a spec</para>
          </listitem>

          <listitem>
            <para><emphasis>/specs/{specFullName}/property/{propertyName}/facet/{facetType}</emphasis>
            for a facet on a property</para>
          </listitem>

          <listitem>
            <para><emphasis>/specs/{specFullName}/collection/{propertyName}/facet/{facetType}</emphasis>
            for a facet on a collection</para>
          </listitem>

          <listitem>
            <para><emphasis>/specs/{specFullName}/action/{actionId}/facet/{facetType}</emphasis>
            for a facet on an action</para>
          </listitem>
        </itemizedlist>

        <note>
          <para>In addition we need a resource to allow the facets of an
          actions parameter to be queried.</para>
        </note>

        <note>
          <para>(Mentioned elsewhere), we also need to provide the ability to
          evaluate facets per instance. Although many facets are per class,
          some (such as <classname>TitleFacet</classname>) will vary by
          instance. This will (presumably) need some additional resource
          methods (eg <methodname>specActionFacetFor(...)</methodname>) that
          take an oid as a parameter.</para>
        </note>

        <para>Each of these resources generates a similar representation,
        evaluating a facets for its facet holder. For example, here is the
        resource for a property spec:</para>

        <screenshot>
          <screeninfo>Spec Facet Resource</screeninfo>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/spec-member-facet.png" scale="40" />
            </imageobject>
          </mediaobject>
        </screenshot>

        <para>The raw <acronym>XHTML</acronym> (abbreviated) is:</para>

        <programlisting>&lt;div&gt;
  &lt;p&gt;Owners&lt;/p&gt;
  &lt;ul class="nof-properties"&gt;
    &lt;li&gt;
      &lt;a href="/specs/org.nakedobjects.examples.claims.dom.claim.Claim" rel="owning spec" 
         rev="spec" class="facet"&gt;
        org.nakedobjects.examples.claims.dom.claim.Claim
      &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href="/specs/org.nakedobjects.examples.claims.dom.claim.Claim/property/description"
         rel="owning property" rev="property" class="facet"&gt;
        description
      &lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
&lt;div class="nof-facet-elements"&gt;
  &lt;p class="nof-facet-elements"&gt;Facet Elements&lt;/p&gt;
  &lt;dl class="nof-facet-elements"&gt;
    &lt;dt&gt;class&lt;/dt&gt;
    &lt;dd&gt;class org.nakedobjects.metamodel.facets.propparam.typicallength.TypicalLengthFacetDerivedFromType&lt;/dd&gt;
    &lt;dt&gt;derived&lt;/dt&gt;
    &lt;dd&gt;false&lt;/dd&gt;
    &lt;dt&gt;facetHolder&lt;/dt&gt;
    &lt;dd&gt;Reference Association [name="org.nakedobjects.examples.claims.dom.claim.Claim#description(), type=JavaSpecification@9c22ff[class=java.lang.String,type=Object,persistable=User Persistable,superclass=Object] ]&lt;/dd&gt;
    &lt;dt&gt;identified&lt;/dt&gt;
    &lt;dd&gt;Reference Association [name="org.nakedobjects.examples.claims.dom.claim.Claim#description(), type=JavaSpecification@9c22ff[class=java.lang.String,type=Object,persistable=User Persistable,superclass=Object] ]&lt;/dd&gt;
    &lt;dt&gt;noop&lt;/dt&gt;
    &lt;dd&gt;false&lt;/dd&gt;
    &lt;dt&gt;underlyingFacet&lt;/dt&gt;
    &lt;dd&gt;(null)&lt;/dd&gt;
  &lt;/dl&gt;
&lt;/div&gt;</programlisting>

        <para>This representation is created by applying a JavaBean
        conventions on the facet (all <methodname>getXxx()</methodname> and
        <methodname>isXxx()</methodname> methods exposed by the facet
        itself).</para>

        <note>
          <para>We need a more general purpose mechanism to query facets. As
          can be seen, the above doesn't actually expose the typical value of
          the facet, because the method we want is called
          <methodname>value()</methodname>, not
          <methodname>getValue()</methodname>.</para>
        </note>

        <para>Some XPath queries that might be useful are:</para>

        <itemizedlist>
          <listitem>
            <para><emphasis>//div[@class='nof-facet-elements']//dt[.='class']/following-sibling::dd[1]</emphasis>
            will return the <sgmltag>&lt;dd&gt;</sgmltag> element
            corresponding to the 'class' <sgmltag>&lt;dt&gt;</sgmltag></para>
          </listitem>

          <listitem>
            <para><emphasis>//div[@class='nof-facet-elements']//dt[.='derived']/following-sibling::dd[1]</emphasis>
            will return the <sgmltag>&lt;dd&gt;</sgmltag> element
            corresponding to the 'derived'
            <sgmltag>&lt;dt&gt;d</sgmltag></para>
          </listitem>
        </itemizedlist>
      </sect2>
    </sect1>

    <sect1 id="sec.SecurityResource">
      <title>Security (user) Resource</title>

      <para>To finish up, the <emphasis>/user</emphasis> link indicated in
      <xref linkend="sec.HomePageResource" /> corresponds to the
      <classname>UserResource</classname>:</para>

      <programlisting>import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;

public interface UserResource {

  @GET
  @Produces( { "application/xhtml+xml", "text/html" })
  public String user();
}</programlisting>

      <para>The implementation of this interface in <emphasis>Restful
      Objects</emphasis> viewer (<classname>UserResourceImpl</classname>) also
      defines a <code>@Path("/user")</code> for the class as a whole. Taken
      together this therefore defines a <acronym>URL</acronym> in the form
      <emphasis>/user</emphasis> supporting the <acronym>GET</acronym>
      method.</para>

      <note>
        <para>I believe that the <code>@Path("/user")</code> annotation should
        reside on the interface, not the implementation. This seems to be a
        limitation with RestEasy 1.0.2, the underlying library used by
        <emphasis>Restful Objects</emphasis>.</para>
      </note>

      <para>Here's the resource that's returned, as shown in a browser:</para>

      <para><screenshot>
          <screeninfo>User Resource</screeninfo>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/user-resource.png" scale="50" />
            </imageobject>
          </mediaobject>
        </screenshot>The first section (as ever) lists the current user, while
      the final section lists out the roles for the current user. The
      <acronym>XHTML</acronym> for this is:</para>

      <programlisting>&lt;?xml version="1.0"?&gt;
&lt;html&gt;
  &lt;head&gt;&lt;title&gt;User&lt;/title&gt;&lt;/head&gt;
  &lt;body id="body"&gt;
    &lt;div&gt;
      &lt;p&gt;Logged in as&lt;/p&gt;
      &lt;ul class="nof-session"&gt;
        &lt;li&gt;
          &lt;a href="/user" rel="user" rev="resource" class="nof-user"&gt;sven&lt;/a&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
    ...
    &lt;div class="nof-section"&gt;
      &lt;p class="nof-section"&gt;Roles&lt;/p&gt;
      &lt;ul class="nof-roles"&gt;
        &lt;li&gt;
          &lt;p class="nof-role"&gt;role1&lt;/p&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;</programlisting>

      <para>Again, we can use XPath to pull back the resources:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>//a[@class="nof-user"]/text()</emphasis> returns the
          current user name</para>
        </listitem>

        <listitem>
          <para><emphasis>//p[@class="nof-role"]/text()</emphasis> returns the
          role names</para>
        </listitem>
      </itemizedlist>
    </sect1>
  </chapter>

  <chapter>
    <title>Writing Client-side Applications</title>

    <para>The point of <emphasis>Restful Objects</emphasis> is to provide our
    domain objects as <acronym>REST</acronym>ful resources so that they can be
    used by any other client application. These applications can be written in
    any language; so long as they can submit <acronym>HTTP </acronym>requests
    and can parse <acronym>XHTML</acronym>, they can interact with the
    resources provided by <emphasis>Restful Objects</emphasis>.</para>

    <para>That said, if you are writing Java applications, then
    <emphasis>Restful Objects</emphasis> provides an application library
    (applib) to simplify the task. To reference this applib, add the following
    to your Maven pom's <sgmltag>&lt;dependencies&gt;</sgmltag>
    section:</para>

    <programlisting>&lt;properties&gt;
  &lt;restfulobjects.version&gt;1.0.0&lt;/restfulobjects.version&gt;   &lt;!-- OR WHATEVER --&gt;
&lt;/properties&gt;

&lt;dependencies&gt;
  ...
  &lt;dependency&gt;
    &lt;groupId&gt;org.starobjects.restful&lt;/groupId&gt;
    &lt;artifactId&gt;applib&lt;/artifactId&gt;
    &lt;version&gt;${restfulobjects.version}&lt;/version&gt;
  &lt;/dependency&gt;
  ...
&lt;/dependencies&gt;</programlisting>

    <para>You then have a choice of approaches.</para>

    <sect1>
      <title>AbstractRestfulClient</title>

      <para>To get you started you might want to use the adapter,
      <classname>AbstractRestfulClient</classname>, available in the
      <emphasis>Restful Objects</emphasis>' applib. This exposes some of the
      <acronym>HTTP</acronym> methods, including <acronym>GET</acronym> and
      <acronym>POST</acronym>, and serves up resources as
      <acronym>XML</acronym> documents (using Elliot Rusty Harold's <ulink
      url="http://www.xom.nu/">XOM</ulink> library). There is also a
      <classname>XomUtils</classname> class, that provides some
      pretty-printing support and a couple of other helper methods.</para>

      <note>
        <para><classname>AbstractRestfulClient</classname> is not particularly
        comprehensive (at the time of writing it doesn't include support for
        <acronym>PUT</acronym> or <acronym>DELETE</acronym>, for example). It
        may well gain extra methods in future releases, however.</para>
      </note>
    </sect1>

    <sect1 id="sec.CodingApproaches">
      <title>RestEasy's Client-side Framework</title>

      <para>Alternatively, you might want to look into JBoss RestEasy, which
      provides a <ulink
      url="http://www.jboss.org/file-access/default/members/resteasy/freezone/docs/1.0.2.GA/userguide/html_single/index.html#RESTEasy_Client_Framework">client-side
      framework</ulink> to eliminate some of the boilerplate. This uses the
      resource interfaces (see <xref linkend="chp.Resources" />) to create
      client-side stubs.</para>

      <note>
        <para>Due to a fact that <classname>@Path</classname> is annotated on
        the implementations - not the interfaces - of
        <classname>ObjectResource</classname>,
        <classname>ServiceResource</classname>,
        <classname>SpecsResource</classname> and
        <classname>UserResource</classname>, it's possible that this approach
        will not work until we upgrade the version of RestEasy.</para>
      </note>
    </sect1>
  </chapter>

  <chapter id="chp.DeployingRestfulObjectsWebapps">
    <title>Deploying Restful Objects Webapps</title>

    <para>At some point you'll presumably want to deploy your domain object
    using <emphasis>Restful Objects</emphasis> as a webapp.</para>

    <para>If you've used the Naked Objects archetype then it will have created
    a webapp project for you, with its <filename>web.xml</filename> set up
    with the servlets and filters for the <acronym>HTML</acronym> viewer. We
    can use this as the basis for <emphasis>Restful Objects</emphasis>'
    configuration. (In principle, the <filename>web.xml</filename> could
    support both the <acronym>HTML</acronym> viewer and <emphasis>Restful
    Objects</emphasis>. This chapter assumes you only want to expose the
    latter interface, however).</para>

    <para>In addition, you'll need to decide on the authentication mechanism.
    <emphasis>Restful Objects</emphasis> comes with some out-of-the-box
    support, but you may want to extend it for your own purposes. This chapter
    shows you how.d</para>

    <sect1>
      <title>Update POM Dependencies</title>

      <para>First up (just as we did when prototyping, see <xref
      linkend="chp.Prototyping" />), we need to reference the
      <emphasis>Restful Objects</emphasis> viewer:</para>

      <programlisting>&lt;dependencies&gt;
  ...
  &lt;dependency&gt;
    &lt;groupId&gt;org.starobjects.restful&lt;/groupId&gt;
    &lt;artifactId&gt;viewer&lt;/artifactId&gt;
  &lt;/dependency&gt;
  ...
&lt;/dependencies&gt;</programlisting>

      <para>Here I'm assuming that this is in the webapp submodule where the
      parent defines the version in its
      <sgmltag>&lt;dependencyManagement&gt;</sgmltag> section (see <xref
      linkend="sec.ParentModule" />).</para>
    </sect1>

    <sect1>
      <title>web.xml</title>

      <para>Next, we need to update <filename>web.xml</filename> to specify
      the servlets, listeners and filters needed for <emphasis>Restful
      Objects</emphasis>. You'll find that some of these are shared with
      <acronym>HTML</acronym> viewer.</para>

      <sect2>
        <title>DTD and Display Name</title>

        <para>To start with, we have the boilerplate DTD reference and
        <sgmltag>&lt;displayname&gt;</sgmltag>:t</para>

        <programlisting>&lt;!DOCTYPE web-app PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN" "http://java.sun.com/dtd/web-app_2_3.dtd"[]&gt;
&lt;web-app&gt;
  &lt;display-name&gt;Restful Objects&lt;/display-name&gt;

  ...
&lt;/web-app&gt; </programlisting>
      </sect2>

      <sect2>
        <title>Context Parameters</title>

        <para>There is one context parameter to add:</para>

        <programlisting>&lt;web-app&gt;
  ...
  &lt;context-param&gt;
    &lt;param-name&gt;javax.ws.rs.Application&lt;/param-name&gt;
    &lt;param-value&gt;org.starobjects.restful.viewer.RestfulApplication&lt;/param-value&gt;
  &lt;/context-param&gt;
  ...
&lt;/web-app&gt;</programlisting>

        <para>This is used by RestEasy to defines the supported
        resources.</para>
      </sect2>

      <sect2>
        <title>Filters and Filter Mappings</title>

        <para>Next, filters.</para>

        <programlisting>&lt;web-app&gt;
  ...
  &lt;filter&gt;
    &lt;filter-name&gt;NakedObjectsSessionFilter&lt;/filter-name&gt;
    &lt;filter-class&gt;org.nakedobjects.webapp.NakedObjectsSessionFilter&lt;/filter-class&gt;
    &lt;init-param&gt;
      &lt;param-name&gt;authenticationSessionLookupStrategy&lt;/param-name&gt;
      &lt;param-value&gt;org.starobjects.restful.viewer.authentication.AuthenticationSessionLookupStrategyExtended&lt;/param-value&gt;
    &lt;/init-param&gt;
  &lt;/filter&gt;

  &lt;filter&gt;
    &lt;filter-name&gt;NakedObjectsStaticContentFilter&lt;/filter-name&gt;
    &lt;filter-class&gt;org.nakedobjects.webapp.NakedObjectsSessionFilter&lt;/filter-class&gt;
  &lt;/filter&gt;
  ...
&lt;/web-app&gt;</programlisting>

        <para>The <classname>NakedObjectsSessionFilter</classname> is used to
        ensure that there is an authentication session in place. As you might
        infer from its <sgmltag>&lt;init-param&gt;</sgmltag>, the mechanism it
        does to lookup this authentication session is pluggable. The one
        specified will fake a session if running in EXPLORATION mode. But,
        again, more on this in <xref linkend="sec.Authentication" />.</para>

        <para>The <classname>NakedObjectsStaticContentFilter</classname> is
        used to decorate any static resources (Javascript, CSS or images) so
        that they are cached client-side.</para>

        <para>The mappings for these two filters are:</para>

        <programlisting>&lt;web-app&gt;
  ...
  &lt;filter-mapping&gt;
    &lt;filter-name&gt;NakedObjectsSessionFilter&lt;/filter-name&gt;
    &lt;url-pattern&gt;*&lt;/url-pattern&gt;
  &lt;/filter-mapping&gt;

  &lt;filter-mapping&gt;
    &lt;filter-name&gt;NakedObjectsStaticContentFilter&lt;/filter-name&gt;
    &lt;url-pattern&gt;*.js&lt;/url-pattern&gt;
  &lt;/filter-mapping&gt;
  &lt;filter-mapping&gt;
    &lt;filter-name&gt;NakedObjectsStaticContentFilter&lt;/filter-name&gt;
    &lt;url-pattern&gt;*.css&lt;/url-pattern&gt;
  &lt;/filter-mapping&gt;
  &lt;filter-mapping&gt;
    &lt;filter-name&gt;NakedObjectsStaticContentFilter&lt;/filter-name&gt;
    &lt;url-pattern&gt;*.png&lt;/url-pattern&gt;
  &lt;/filter-mapping&gt;
  &lt;filter-mapping&gt;
    &lt;filter-name&gt;NakedObjectsStaticContentFilter&lt;/filter-name&gt;
    &lt;url-pattern&gt;*.jpg&lt;/url-pattern&gt;
  &lt;/filter-mapping&gt;
  &lt;filter-mapping&gt;
    &lt;filter-name&gt;NakedObjectsStaticContentFilter&lt;/filter-name&gt;
    &lt;url-pattern&gt;*.gif&lt;/url-pattern&gt;
  &lt;/filter-mapping&gt;
  ...
&lt;/web-app&gt;</programlisting>
      </sect2>

      <sect2>
        <title>Listeners</title>

        <para>Two listeners are required, one for <emphasis>Restful
        Objects</emphasis>/Naked Objects and one for RestEasy. These both
        bootstrap the respective libraries:</para>

        <programlisting>&lt;web-app&gt;
  ...
  &lt;listener&gt;
    &lt;listener-class&gt;org.nakedobjects.webapp.NakedObjectsWebAppBootstrapper&lt;/listener-class&gt;
  &lt;/listener&gt;

  &lt;listener&gt;
    &lt;listener-class&gt;org.jboss.resteasy.plugins.server.servlet.ResteasyBootstrap&lt;/listener-class&gt;
  &lt;/listener&gt;
  ...
&lt;/web-app&gt;</programlisting>
      </sect2>

      <sect2>
        <title>Servlets and Servlet Mappings</title>

        <para>Finally, we have the servlets:</para>

        <programlisting>&lt;web-app&gt;
  ...
  &lt;servlet&gt;
    &lt;servlet-name&gt;RestEasyDispatcher&lt;/servlet-name&gt;
    &lt;servlet-class&gt;org.jboss.resteasy.plugins.server.servlet.HttpServletDispatcher&lt;/servlet-class&gt;
  &lt;/servlet&gt;

  &lt;servlet&gt;
    &lt;servlet-name&gt;ResourceServlet&lt;/servlet-name&gt;
    &lt;servlet-class&gt;org.nakedobjects.webapp.servlets.ResourceServlet&lt;/servlet-class&gt;
  &lt;/servlet&gt;
  ...
&lt;/web-app&gt;</programlisting>

        <para>The main servlet is RestEasy's
        <classname>HttpServletDispatcher</classname> servlet, that handles all
        inbound requests. In addition though we configure a Naked Objects'
        <classname>ResourceServlet</classname> to serve up Javascript, CSS and
        images (the same as those decorated by the
        <classname>NakedObjectsStaticContentFilter</classname>).</para>

        <para>The mappings for these servlets are:</para>

        <programlisting>&lt;web-app&gt;
  ...
  &lt;servlet-mapping&gt;
    &lt;servlet-name&gt;RestEasyDispatcher&lt;/servlet-name&gt;
    &lt;url-pattern&gt;/&lt;/url-pattern&gt;
  &lt;/servlet-mapping&gt;

  &lt;servlet-mapping&gt;
    &lt;servlet-name&gt;ResourceServlet&lt;/servlet-name&gt;
    &lt;url-pattern&gt;*.js&lt;/url-pattern&gt;
  &lt;/servlet-mapping&gt;
  &lt;servlet-mapping&gt;
    &lt;servlet-name&gt;ResourceServlet&lt;/servlet-name&gt;
    &lt;url-pattern&gt;*.css&lt;/url-pattern&gt;
  &lt;/servlet-mapping&gt;
  &lt;servlet-mapping&gt;
    &lt;servlet-name&gt;ResourceServlet&lt;/servlet-name&gt;
    &lt;url-pattern&gt;*.png&lt;/url-pattern&gt;
  &lt;/servlet-mapping&gt;
  &lt;servlet-mapping&gt;
    &lt;servlet-name&gt;ResourceServlet&lt;/servlet-name&gt;
    &lt;url-pattern&gt;*.jpg&lt;/url-pattern&gt;
  &lt;/servlet-mapping&gt;
  &lt;servlet-mapping&gt;
    &lt;servlet-name&gt;ResourceServlet&lt;/servlet-name&gt;
    &lt;url-pattern&gt;*.gif&lt;/url-pattern&gt;
  &lt;/servlet-mapping&gt;

&lt;/web-app&gt;</programlisting>
      </sect2>
    </sect1>

    <sect1>
      <title>Testing</title>

      <para>There are several ways you can run up the webapp.</para>

      <sect2 id="sec.NakedObjectsWebServer">
        <title>Using NakedObjectsWebServer</title>

        <para>The Naked Objects framework provides a simple bootstrapper class
        that will run an embedded instance of Jetty against the
        <methodname>web.xml</methodname>. By default the reference to this
        bootstrapper is deliberately excluded, so to use it comment back in
        the reference to
        <classname>org.nakedobjects.core:webserver</classname>:</para>

        <programlisting>&lt;dependency&gt;
  &lt;groupId&gt;org.nakedobjects.core&lt;/groupId&gt;
  &lt;artifactId&gt;webserver&lt;/artifactId&gt;
&lt;/dependency&gt;
</programlisting>

        <para>To run, just run
        <classname>org.nakedobjects.webserver.WebServer</classname>. This
        takes the following arguments:</para>

        <itemizedlist>
          <listitem>
            <para>--deploymentType (defaults to SERVER)</para>
          </listitem>

          <listitem>
            <para>--port (defaults to 8080)</para>
          </listitem>

          <listitem>
            <para>--address (defaults to localhost)</para>
          </listitem>

          <listitem>
            <para>--webapp resourceDirectory</para>
          </listitem>
        </itemizedlist>

        <para>For testing purposes you'll probably want EXPLORATION, which
        means you don't have to worry about authentication. For production
        you'll probably want SERVER, in which case you <emphasis>do</emphasis>
        need to decide how to handle authentication; but we'll discuss this
        more in <xref linkend="sec.Authentication" />.</para>
      </sect2>

      <sect2>
        <title>Using Maven Jetty plugin</title>

        <para>Using the maven-jetty-plugin, we can use Maven to run an
        embedded instance of Jetty. First, add:</para>

        <programlisting>&lt;build&gt;
  &lt;plugins&gt;
    &lt;plugin&gt;
      &lt;groupId&gt;org.mortbay.jetty&lt;/groupId&gt;
      &lt;artifactId&gt;maven-jetty-plugin&lt;/artifactId&gt;
      &lt;configuration&gt;
        &lt;contextPath&gt;/&lt;/contextPath&gt;
      &lt;/configuration&gt;
    &lt;/plugin&gt;
  &lt;/plugins&gt;
&lt;/build&gt;</programlisting>

        <note>
          <para>Due to a bug in <emphasis>Restful Objects</emphasis>, it is
          currently necessary to deploy to the root context
          (<code>/</code>).</para>
        </note>

        <para>Next, to run in EXPLORATION mode, update the
        <filename>web.xml</filename>:</para>

        <programlisting>&lt;web-app&gt;
  ...
  &lt;context-param&gt;
    &lt;param-name&gt;deploymentType&lt;/param-name&gt;
    &lt;param-value&gt;EXPLORATION&lt;/param-value&gt;
  &lt;/context-param&gt;
  ...
&lt;/web-app&gt;</programlisting>

        <para>As we've already mentioned, for testing you'll probably want
        EXPLORATION, while for production you'll probably want SERVER. See
        <xref linkend="sec.Authentication" /> for more on this.</para>

        <note>
          <para>In case you were wondering,
          <classname>NakedObjectsWebServer</classname> (<xref
          linkend="sec.NakedObjectsWebServer" />) does not currently honour
          deploymentType setting.</para>
        </note>

        <para>You can then run Jetty from Maven using:</para>

        <programlisting>mvn jetty:run</programlisting>
      </sect2>

      <sect2>
        <title>Deploy to an External Servlet Container</title>

        <para>Finally, you can copy the WAR file and deploy it to an external
        servlet container.</para>

        <note>
          <para>Again, because of a bug in <emphasis>Restful
          Objects</emphasis> you will need to map it to the root context for
          this to work.</para>
        </note>
      </sect2>
    </sect1>

    <sect1 id="sec.Authentication">
      <title>Authentication</title>

      <para>The RESTful architecture doesn't have too much to say about
      authentication, and (at the time of writing) there are no supplementary
      standards to define how authentication should be implemented. And
      because <acronym>REST</acronym> runs over <acronym>HTTP</acronym> we
      don't get any particular support from the network stack either. In fact,
      because <acronym>HTTP</acronym> is stateless we don't even get the
      notion of a session or a connection.</para>

      <para><emphasis>Restful Objects</emphasis> therefore uses Naked Objects'
      authentication mechanism, with authentication performed for each RESTful
      call. What this means depends on the deploymentType:</para>

      <itemizedlist>
        <listitem>
          <para>if running in SERVER_EXPLORATION mode, then authentication is
          in effect switched off; no credentials are supplied, and Naked
          Objects will use the first exploration user defined in
          nakedobjects.properties, or a fallback "exploration" user
          otherwise</para>

          <para>For example, if running in SERVER_EXPLORATION mode, then you
          can specify the user using:</para>

          <programlisting>nakedobjects.exploration.users=sven:role1, dick:role2, bob:role1|role2</programlisting>
        </listitem>

        <listitem>
          <para>otherwise (if running SERVER_PROTOTYPE or SERVER), then
          authentication credentials are needed.</para>
        </listitem>
      </itemizedlist>

      <note>
        <para>You can if you want run in EXPLORATION (or PROTOTYPE) mode
        rather than SERVER_EXPLORATION (or SERVER_PROTOTYPE) mode. The
        difference is that former only support single-users, while SERVER_*
        supports multiple concurrent users.</para>
      </note>

      <para>Calling Restful Objects in SERVER mode with no credentials will
      result in an exception:</para>

      <screenshot>
        <screeninfo>Server mode, no credentials</screeninfo>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/server-mode-no-credentials.png"
                       scale="40" />
          </imageobject>
        </mediaobject>
      </screenshot>

      <para>On the other hand, if user and password parameters are supplied,
      then we can login:</para>

      <screenshot>
        <screeninfo>Server mode, with credentials</screeninfo>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/server-mode-with-credentials.png"
                       scale="40" />
          </imageobject>
        </mediaobject>
      </screenshot>

      <para>This behaviour is pluggable however, at two levels:</para>

      <itemizedlist>
        <listitem>
          <para><classname>NakedObjectsSessionFilter</classname> uses the
          <varname>authenticationManagerLookupStrategy</varname> property to
          specify a strategy for both finding credentials and for validating
          them against the Naked Objects authentication manager.</para>

          <para>The implementation provided by <emphasis>Restful
          Objects</emphasis> -
          <classname>AuthenticationSessionLookupStrategyExtended</classname>
          in the package
          <classname>org.starobjects.restful.viewer.authentication</classname>
          - is responsible for looking up credentials using the username and
          password parameters. Once validated, it also binds the results to
          the <classname>HttpSession</classname> so that future interactions
          do not credentials.</para>
        </listitem>

        <listitem>
          <para>If you lookup strategy implementation delegates to the Naked
          Objects authentication manager (recommended), you might also want to
          change the Naked Objects'
          <classname>AuthenticationManager</classname> implementation itself.
          This is done using the
          <varname>nakedobjects.authentication</varname> key in
          <filename>nakedobjects.properties</filename>:</para>

          <programlisting>nakedobjects.authentication=com.mycompany.nakedobjects.authentication.MyAuthenticationManagerInstaller</programlisting>
        </listitem>
      </itemizedlist>

      <para>In the future there will doubtless be standardized (WS-* style)
      approaches for RESTful authenticatication, but the above should provide
      enough flexibility in the meantime.</para>
    </sect1>
  </chapter>
</book>
