<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"file:./src/docbkx/dtd-4.5/docbookx.dtd">
<book>
  <bookinfo>
    <title><?eval ${docbkxGuideTitle}?></title>

    <subtitle><?eval ${docbkxGuideSubTitle}?></subtitle>

    <releaseinfo><?eval ${project.version}?></releaseinfo>

    <authorgroup>
      <author>
        <firstname>Dan</firstname>

        <surname>Haywood</surname>
      </author>
    </authorgroup>

    <legalnotice>
      <para>Permission is granted to make and distribute verbatim copies of
      this manual provided that the copyright notice and this permission
      notice are preserved on all copies.</para>
    </legalnotice>
  </bookinfo>

  <!-- front matter -->

  <toc></toc>

  <preface id="preface">
    <title>Preface</title>

    <para>Behaviour-driven development is a means to drive the development of
    an application through stories and scenarios. These are expressed in a
    semi-formal textual form that can be understood (or indeed be written) by
    the domain expert/business analyst, but which can then be used to directly
    exercise the system under test as it is developed.</para>

    <para>A number of frameworks exist to streamline this process. Generally
    these require the developer to write glue code that acts as a bridge from
    the textual specification and the system under test.</para>

    <para>The <emphasis>BDD Viewer</emphasis> module for <emphasis>Apache
    Isis</emphasis> aims to allow <acronym>BDD</acronym> stories/scenarios to
    be written against the domain model of an Isis application, without the
    developer having to write any glue code. It consists of a common library
    that abstracts the interaction with the Isis metamodel, along with an
    integration (that uses this common library) for one particular
    <acronym>BDD</acronym> framework, namely <ulink
    url="http://concordion.org">Concordion</ulink>. There is also outline
    coverage of the <ulink url="http://fitnesse.org">FitNesse</ulink>
    integration (part of <ulink
    url="http://isis-contrib.sourceforge.net">isis-contrib</ulink>).</para>

    <para>This user guide describes how to use the
    <emphasis>Concordion</emphasis> integration, along with details of the
    common library so that other <acronym>BDD</acronym> frameworks can be
    integrated if required.</para>

    <para><emphasis>Apache Isis</emphasis> is licensed under <ulink
    url="http://www.apache.org/licenses/LICENSE-2.0.html">Apache Software
    License v2</ulink>.</para>
  </preface>

  <!-- main content -->

  <chapter>
    <title>Introduction</title>

    <sect1>
      <title>Behaviour-driven Development</title>

      <para>Prior to agile development, requirements gathering for systems was
      traditionally performed by business analysts discussing requirements
      with the business, and expressing those requirements in documentation,
      such as Word specs and perhaps spreadsheets. The acceptance criteria for
      such requirements were often only sketched out, if at all; it would
      normally fall to the system testers to write acceptance tests for the
      requirements, through a mixture of consulting the original (by now
      out-of-date) requirements documentation and (as often as not)
      reverse-engineering the implementation.</para>

      <para>Behaviour-driven development combines requirements capture and the
      acceptance test criteria in a single form, through scenarios. As before,
      these requirements are in a form that a non-technical domain expert from
      the business can understand. What differs though is that these scenarios
      can be used directly exercise the system, and so also represent the
      acceptance tests for the scenario. Moreover, the results of these tests
      are rendered in such a way that the business can understand, and thus
      can help determine if the code is at fault or the test. Once
      implemented, the acceptance tests also act as a regression suite for the
      system.</para>

      <para>Scenario tests tend to act against a complete system, or sometimes
      at a subsystem-level. At any rate at a granularity that makes sense to a
      non-technical businesss person. Compare this to unit testing which
      exercises the behaviour / method of a single class.</para>

      <para>Another commonly-used name for scenario testing is "agile
      acceptance testing". We've used "scenario testing" throughout (it's a
      somewhat less clumsy term).</para>
    </sect1>

    <sect1 id="sec.CommonLibrary">
      <title>Common Library</title>

      <para><emphasis>Apache Isis</emphasis> integrates with
      <acronym>BDD</acronym> frameworks through the services of a common
      library. The main concepts that the common library exposes are:</para>

      <itemizedlist>
        <listitem>
          <para>the <classname>Story</classname> class, which provides the
          context for a single scenario of a story</para>
        </listitem>

        <listitem>
          <para>the <classname>AliasRegistry</classname>, which allows a
          user-friendly alias (eg "fredCustomer") to be assigned to any domain
          object and to be referenced subsequently</para>
        </listitem>

        <listitem>
          <para>the <classname>StoryCell</classname> interface, which is an
          abstraction over a single element of data</para>

          <para>The default implementation just wraps a
          <classname>java.lang.String</classname>, but some frameworks (eg
          <emphasis>FitNesse</emphasis>) have other means of</para>
        </listitem>

        <listitem>
          <para>the <classname>CellBinding</classname> interface, which binds
          a column of a table to a property or to an alias</para>

          <para>Many of the <acronym>BDD</acronym> frameworks (eg
          <emphasis>Concordion</emphasis>, <emphasis>FitNesse</emphasis>)
          encourage the use of tables as a means of succinctly capturing story
          actions. This is reflected in the design of several of the classes
          provided by the common library. The
          <classname>CellBinding</classname> interface is used to wire the
          values in the rows of the table to the properties specified in the
          header.</para>

          <para>Each <classname>CellBinding</classname> has a name (eg "on
          object") and some alternative names (eg "using"). This is useful for
          <acronym>BDD</acronym> frameworks (such as
          <emphasis>FitNesse</emphasis>) where the provided text from the
          story needs to be parsed in some way, matching up columns with the
          fixture. The relevant methods for framework integrations that must
          match <classname>CellBinding</classname>s to header columns are
          <methodname>#matches(...)</methodname>,
          <methodname>#setHeadColumn(..)</methodname> and
          <methodname>#createHeadColumn(..)</methodname>. Note though that
          other <acronym>BDD</acronym> frameworks (eg
          <emphasis>Concordion</emphasis>) don't need this particular feature
          (the <emphasis>Concordion</emphasis> integration calls pre-canned
          methods so the matching is done simply by parameter position to
          these method).</para>

          <para>The other main method provided by
          <classname>CellBinding</classname> is
          <methodname>#captureCurrent(..)</methodname>. This is used (by all
          framework integrations) to capture the current value for the column
          which this binding represents. For example, for a column
          representing a property name, it might hold the value
          "firstName".</para>

          <para>The library provides a default implementation of
          <classname>CellBinding</classname>, though subclasses can override
          if required. (For example, <emphasis>FitNesse</emphasis> does this
          in order to map to underlying mutable data structures that represent
          cells in the FIT tables).</para>
        </listitem>
      </itemizedlist>

      <para>In the following chapter (<xref
      linkend="chp.UsingTheFramework" />), details are provided of how the
      services of the common library are used by each of the supported
      <acronym>BDD</acronym> framework integrations.</para>
    </sect1>

    <sect1>
      <title>Concordion Integration</title>

      <sect2>
        <title>Introduction to Concordion</title>

        <para><ulink url="http://concordion.org">Concordion</ulink> is a
        framework to enable scenario testing. It is implemented as a <ulink
        url="http://junit.org">JUnit4</ulink> test runner, with the test form
        being written in <acronym>XHTML</acronym>. The domain expert /
        business analyst authors new stories using an <acronym>XML</acronym>
        editor (<ulink url="http://xmlmind.net">XmlMind</ulink> is one
        commercial editor that we recommend); once executed as tests, the
        results are shown as the same XHTML document, annotated to indicate
        which assertions have succeeded, and which have failed. It also
        creates an efficient feedback loop; a Concordion test will "keep on
        going" even if it hits a failure. Thus the developer can identify
        several issues and fix them in a single pass.</para>

        <para>Another way to think of <emphasis>Concordion</emphasis> is as a
        replacement presentation layer, hitting the underlying domain model in
        the same way that the regular <acronym>UI</acronym> would. (This is
        why we call this module is called the <acronym>BDD
        </acronym><emphasis>viewer</emphasis>).</para>

        <para><emphasis>Concordion</emphasis> works using a "convention over
        configuration" approach, matching the <acronym>XHTML</acronym> text
        file with a corresponding JUnit4 test run set up to run using
        <emphasis>Concordion</emphasis>'s
        <classname>ConcordionRunner</classname>, The developer then annotates
        the <acronym>XHTML</acronym> using special (Concordion-namespaced)
        attributes in order identify the inputs to and expected results of the
        test. This is used by the <classname>ConcordionRunner</classname> to
        call into corresponding methods in the test.</para>

        <para>For example, suppose the analyst writes a scenario test called
        <filename>CustomerPlacesOrder.xhtml</filename>. In the
        <acronym>XHTML</acronym> the analyst has identified the details of the
        customer doing the ordering (customer ref 4321, say), the product
        being ordered (product code 1234), the fact that the customer
        initially has no orders, and that the customer has no invoices
        outstanding. The test concludes with an assertion that there is now an
        unfulfilled order for the customer, and that the customer now has an
        invoice to be paid.</para>

        <para>The developer in turn edits the <acronym>XHTML</acronym>,
        identifying the customer and the product. He then further edits the
        <acronym>XHTML</acronym> to call a method in the JUnit4 test
        representing the placing of an order:
        <methodname>placeOrder()</methodname>, say. And he finishes by
        annotating the <acronym>XHTML</acronym> to make assertions about the
        post conditions (unfulfilled order, new invoice to be paid
        etc).</para>

        <para>Then, the developer writes a JUnit4 test alongside the
        <acronym>XHTML</acronym>; in this example it would be called
        <filename>CustomerPlacesOrderTest.java</filename>.
        <emphasis>Concordion</emphasis> calls into this JUnit4 test as it
        comes across the annotations in the <acronym>XHTML</acronym>, and the
        JUnit4 test mediates with the system under test.</para>

        <para>When the test runs, <emphasis>Concordion</emphasis> generates a
        copy of the <acronym>XHTML</acronym> in a output directory (by default
        specified by a system property) which can then made available for
        inspection by the business analyst (eg published on a website).</para>

        <para>The <emphasis>Concordion</emphasis> website has a good <ulink
        url="http://concordion.org/Tutorial.html">tutorial</ulink> that
        demonstrates all the above, and can be completed in 20~30
        minutes.</para>
      </sect2>

      <sect2 id="sec.HowTheIsisConcordionIntegrationWorks">
        <title>How the Isis/Concordion Integration Works</title>

        <para>Although you could test an <emphasis>Apache Isis</emphasis>
        application using vanilla <emphasis>Concordion</emphasis>, this would
        entail you having to write all the glue code yourself to interact with
        the domain objects. You would also need to encode the rules that are
        normally implemented by the viewer, eg so that a hidden action cannot
        be invoked, and an invalid value for a property cannot be set.</para>

        <para>The <emphasis>BDD viewer</emphasis> integration provided by
        <emphasis>Apache Isis</emphasis> works by providing a superclass for
        the JUnit4 test, called
        <classname>AbstractIsisConcordionTest</classname>. This does several
        things:</para>

        <itemizedlist>
          <listitem>
            <para>it bootstraps an instance of <emphasis>Apache
            Isis</emphasis> system using the in-memory object store;</para>
          </listitem>

          <listitem>
            <para>the system is initialized with a set of services, picked up
            from the <filename>isis.properties</filename> configuration
            file</para>
          </listitem>

          <listitem>
            <para>it provides methods to allow fixtures (domain objects) to be
            installed into the object store</para>
          </listitem>

          <listitem>
            <para>it provides methods to allow a user to be logged in, and the
            date to be specified</para>
          </listitem>

          <listitem>
            <para>it provides methods to allow the user to interact with
            services and domain objects:</para>

            <itemizedlist>
              <listitem>
                <para>asserting on the value of properties and the contents of
                collections</para>
              </listitem>

              <listitem>
                <para>setting the value of a property (if valid) and adding
                to/removing from a collection (if valid)</para>
              </listitem>

              <listitem>
                <para>invoking actions</para>
              </listitem>

              <listitem>
                <para>asserting on the state of a class member (hidden,
                disabled or enabled)</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist>

        <para>For each <acronym>XHTML</acronym> scenario test, the developer
        writes subclasses the
        <classname>AbstractIsisConcordionTest</classname>, creating a name
        matching the scenario test (ie as per regular
        <emphasis>Concordion</emphasis>). He then annotates the original
        <acronym>XHTML</acronym>, either calling directly into the inherited
        methods, or writing small simple methods to delegate to these
        inherited methods as required. The <emphasis>Concordion</emphasis>
        website has some <ulink
        url="http://concordion.org/Technique.html">hints and tips</ulink> to
        help you find the right balance between these two approaches.</para>

        <para>The <acronym>XHTML</acronym> script that you write should have
        the following namespace declaration:</para>

        <programlisting>&lt;html 
    xmlns:concordion="http://www.concordion.org/2007/concordion" 
    xmlns:isis="http://isis.apache.org/2010/concordion"&gt;
    ...
&lt;/html&gt;</programlisting>

        <para>The "concordion" namespace is the usual namespace required by
        <emphasis>Concordion</emphasis>. The "isis" namespace is to allow
        certain commands to be invoked using special commands provided by the
        Isis/Concordion integration.</para>
      </sect2>

      <sect2>
        <title>Specifying the Output Directory</title>

        <para>The directory for the generated output can be specified
        either:</para>

        <itemizedlist>
          <listitem>
            <para>by overriding the <methodname>outputDir()</methodname>
            method in <classname>AbstractIsisConcordionTest</classname>;
            or</para>
          </listitem>

          <listitem>
            <para>by setting the <varname>concordion.output.dir</varname>
            system property</para>
          </listitem>
        </itemizedlist>

        <para>If not specified, then the output directory defaults to
        <filename>/tmp/concordion</filename>.</para>
      </sect2>

      <sect2>
        <title>Providing a CSS File</title>

        <para></para>

        <para></para>

        <para></para>
      </sect2>

      <sect2>
        <title>Configuring the Maven Surefire (test) plugin</title>

        <para>The standard boilerplate to run Concordion under Maven is as
        follows:</para>

        <programlisting>&lt;plugins&gt;
    &lt;plugin&gt;
        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
        &lt;version&gt;2.6&lt;/version&gt;
        &lt;configuration&gt;
            &lt;systemPropertyVariables&gt;
                &lt;concordion.output.dir&gt;${project.build.directory}/concordion&lt;/concordion.output.dir&gt;
            &lt;/systemPropertyVariables&gt;
            &lt;includes&gt;
                &lt;include&gt;**/*Story.java&lt;/include&gt;
            &lt;/includes&gt;
        &lt;/configuration&gt;
    &lt;/plugin&gt;
&lt;/plugins&gt;y</programlisting>

        <para>A couple of points worth noting:</para>

        <itemizedlist>
          <listitem>
            <para>the <literal>systemPropertyVariables</literal> element can
            be used to define the <varname>concordion.output.dir</varname>
            system property, thereby specifying the directory for the
            generated output</para>
          </listitem>

          <listitem>
            <para>the <literal>includes</literal> element can be used to only
            run classes with a suffix "Story".</para>
          </listitem>
        </itemizedlist>

        <para></para>
      </sect2>
    </sect1>

    <sect1 id="sec.FitNesseIntegration">
      <title>FitNesse Integration</title>

      <para>Due to licensing restrictions, the <emphasis>FitNesse</emphasis>
      integration is not part of <emphasis>Apache Isis</emphasis> proper.
      However, it is available on the companion
      <emphasis>isis-contrib</emphasis> site, hosted at <ulink
      url="http://isis-contrib.sourceforge.net">sourceforge</ulink>. Check
      that site for its release status (it is not guaranteed to be in sync
      with <emphasis>Isis</emphasis> releases).</para>

      <para>An outline of the <emphasis>FitNesse</emphasis> integration is
      provided here, if only to help compare and contrast the means by which
      two different frameworks integrate with the common library. We hope that
      this will make it easier to integrate other <acronym>BDD</acronym>
      frameworks in the future.</para>
    </sect1>
  </chapter>

  <chapter id="chp.UsingTheFramework">
    <title>Using the Framework</title>

    <para>This chapter shows the features of the common library, and how they
    are used by the framework-specific integrations.</para>

    <para>Note that due to licensing restrictions the
    <emphasis>FitNesse</emphasis> integration is not part of <emphasis>Apache
    Isis</emphasis>. See <xref linkend="sec.FitNesseIntegration" /> for
    further details.</para>

    <sect1>
      <title>Bootstrapping</title>

      <para>In order to test an <emphasis>Apache Isis</emphasis> domain
      application, a running instance of an <classname>IsisSystem</classname>
      must be bootstrapped, with the appropriate configuration.</para>

      <sect2>
        <title>Story Context</title>

        <para>The common library provides a context object which holds a
        reference to a running <classname>IsisSystem</classname>. Moreover, it
        tracks such things as the date/time that the story is running as, the
        user that is logged-in, and managing the aliases of objects so that
        they can be interacted with.</para>

        <sect3>
          <title>Common</title>

          <para>An instance of the <classname>Story</classname> class provides
          a context for the story. Framework integrations are expected to
          instantiate this class, and then use it as the primary means to
          interact with the system.</para>

          <para>The <classname>Story</classname> class has a public no-arg
          constructor. Instantiating the Story does not do anything; it must
          also be bootstrapped (see <xref
          linkend="sec.BootstrappingIsis" />).</para>
        </sect3>

        <sect3>
          <title>Concordion</title>

          <para>The <classname>AbstractIsisConcordionTest</classname>
          instantiates the <classname>Story</classname> object (from the
          common library) automatically and binding it to a threadlocal. In
          addition, <classname>AbstractIsisConcordionTest</classname> provides
          methods that can be invoked from within <acronym>XHTML</acronym> (ie
          taking <classname>String</classname>s).</para>

          <para>Test cases should inherit from this abstract class, with the
          <acronym>XHTML</acronym> typically calling to the inherited methods
          directly. The developer may optionally add small helper methods to
          be called from the <acronym>XHTML</acronym> instead; these can
          factor out any boilerplate in the script.</para>
        </sect3>

        <sect3>
          <title>FitNesse</title>

          <para>Every FitNesse story must reference the
          <classname>StoryFixture</classname> fixture which provides the
          overall context for the framework. This instantiates a
          <classname>Story</classname> object from the common library and
          binding it to a thread-local.</para>

          <para>Whereas other <emphasis>FitNesse</emphasis> fixtures are
          instantiated once per table, the <classname>StoryFixture</classname>
          is a <acronym>FIT</acronym> <classname>DoFixture</classname> that
          exists for the duration of the test page. It should typically be
          referenced in the test suite's setup page, and should appear first
          within this setup:</para>

          <informaltable>
            <tgroup cols="1">
              <colspec />

              <tbody>
                <row>
                  <entry><classname>Story Fixture</classname></entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>
        </sect3>
      </sect2>

      <sect2 id="sec.BootstrappingIsis">
        <title>Bootstrapping Isis</title>

        <para>An <emphasis>Isis</emphasis> runtime can be bootstrapped with a
        single call. This installs no-op implementations of some of the main
        components, along with an in-memory object store.</para>

        <sect3>
          <title>Common</title>

          <para>The <methodname>Story#bootstrapIsis(String configDirectory,
          DeploymentType deploymentType)</methodname> is used to bootstrap the
          Isis runtime:</para>

          <itemizedlist>
            <listitem>
              <para>The specified config directory contains
              <filename>isis.properties</filename> config file, from which the
              services are registered. Any fixtures in that properties file
              are ignored (the <acronym>BDD</acronym> integration requires
              that any objects are created through the test scripts, see <xref
              linkend="sec.SetUpObjects" /> and <xref
              linkend="sec.UsingIsisViewer" />).</para>
            </listitem>

            <listitem>
              <para>The deployment type must be either EXPLORATION (meaning
              exploration actions are enabled) or PROTOTYPE; no other values
              are valid).</para>
            </listitem>
          </itemizedlist>

          <para>Even if running in exploration mode, you must still logon (see
          <xref linkend="sec.LogonAsSwitchUserTo" />) in order to indicate
          which user account to run the story as.</para>
        </sect3>

        <sect3>
          <title>Concordion</title>

          <para>The <classname>AbstractIsisConcordionTest</classname> class
          provides two overloaded versions of
          <methodname>bootstrapIsis(...)</methodname> method:</para>

          <itemizedlist>
            <listitem>
              <para><methodname>#bootstrapIsis(String configDirectory,
              DeploymentType deploymentType)</methodname></para>

              <para>Intended to be called from within an <methodname>@Before
              setUp()</methodname> method, when there's no particular need to
              document the bootstrapping process within the story</para>
            </listitem>
          </itemizedlist>

          <itemizedlist>
            <listitem>
              <para><methodname>#bootstrapIsis(String configDirectory, String
              deploymentType):boolean</methodname></para>

              <para>Intended to be called from the <acronym>XHTML</acronym>
              page, allowing the story document the bootstrapping process. For
              example, to bootstrap in exploration mode, use:</para>

              <programlisting>&lt;p concordion:execute="#result=bootstrapIsis(#configDir,#deploymentType)"&gt;
Isis system &lt;span concordion:assertTrue="#result"&gt;bootstrapped&lt;/span&gt; 
from config directory &lt;span concordion:set="#configDir"&gt;../quickrun/config&lt;/span&gt;
and running in &lt;span concordion:set="#deploymentType"&gt;exploration&lt;/span&gt; mode.
&lt;/p&gt;</programlisting>

              <para>The method always returns <literal>true</literal>, but any
              runtime exception will propagate to the generated page.</para>
            </listitem>
          </itemizedlist>

          <para>Whichever method is used, they both delegate to the common
          <methodname>Story#bootstrapIsis(...)</methodname> method.</para>
        </sect3>

        <sect3>
          <title>FitNesse</title>

          <para>The <classname>BootstrapIsisConfiguredFromInMode</classname>
          fixture is used to bootstrap <emphasis>Isis</emphasis>. It takes the
          form:</para>

          <informaltable>
            <tgroup cols="4">
              <colspec colwidth="3*" />

              <tbody>
                <row>
                  <entry><classname>Bootstrap Isis Configured
                  From</classname></entry>

                  <entry><emphasis>config Directory</emphasis></entry>

                  <entry><methodname>In Mode</methodname></entry>

                  <entry><emphasis>deployment Type</emphasis></entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>

          <para>This delegates to the common
          <methodname>Story#bootstrapIsis(...)</methodname> method.</para>
        </sect3>
      </sect2>
    </sect1>

    <sect1>
      <title>SetUp</title>

      <para>The setup fixtures are used to specify the running application for
      a particular story's setup. Specifically, this means setting up the
      services that define the application, the effective date and the
      effective user. It also allows the setup of arbitrary objects (typically
      reference/static data objects; for transactional objects see <xref
      linkend="sec.UserInteraction" />).</para>

      <sect2 id="sec.LogonAsSwitchUserTo">
        <title>Logging On / Switching User</title>

        <para>Used to specify the currently logged-on user. Should always be
        called near the top of the story, as part of the "given". Can also be
        used for switching the current user later on in the story, eg to check
        a workflow between different users.</para>

        <sect3>
          <title>Common</title>

          <para>The common library provides two overloaded methods, depending
          on whether the roles for the user need to be specified or
          not:</para>

          <itemizedlist>
            <listitem>
              <para><methodname>Story#logonAsOrSwitchUserTo(String
              userName)</methodname></para>

              <para>Logs on / switch user to as a specific user.</para>
            </listitem>

            <listitem>
              <para><methodname>Story#logonAsOrSwitchUserTo(String userName,
              List&lt;String&gt; roleNames)</methodname></para>

              <para>Logs on to a specific user, with specified roles. Part of
              the initialization for a particular story's setup, and typically
              referenced in the test suite or story's own setup page.</para>
            </listitem>
          </itemizedlist>

          <para>The username and roles are not validated against.</para>
        </sect3>

        <sect3>
          <title>Concordion</title>

          <para>The Concordion integration provides two sets of overloaded
          methods:</para>

          <itemizedlist>
            <listitem>
              <para><methodname>#logonAs(String userName)</methodname> and
              <methodname>#logonAs(String userName, String
              roleListStr)</methodname></para>

              <para>Intended to be called in the initial setup, as part of the
              story's "given".</para>
            </listitem>

            <listitem>
              <para><methodname>#switchUserTo(String userName)</methodname>
              and <methodname>#switchUserTo(String userName, String
              roleListStr)</methodname></para>

              <para>(Optional); intended to be called later on in the story,
              eg, to test workflow.</para>
            </listitem>
          </itemizedlist>

          <para>Each of these is intended to be called from the
          <acronym>XHTML</acronym>. For example:</para>

          <programlisting>&lt;p concordion:execute="#result=logonAs(#userName)"&gt;&lt;span concordion:assertTrue="#result"&gt;logged on&lt;/span&gt; as &lt;span concordion:set="#userName"&gt;fsmith&lt;/span&gt;&lt;/p&gt;</programlisting>

          <para>The role list, if specified, should be comma-separated (any
          white space will be ignored).</para>
        </sect3>

        <sect3>
          <title>FitNesse</title>

          <para>The FitNesse integration provides two sets of overloaded
          fixtures:</para>

          <informaltable>
            <tgroup cols="2">
              <colspec />

              <tbody>
                <row>
                  <entry><classname>Logon As</classname></entry>

                  <entry><emphasis>user name</emphasis></entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>

          <informaltable>
            <tgroup cols="4">
              <colspec />

              <tbody>
                <row>
                  <entry><classname>Logon As</classname></entry>

                  <entry><emphasis>user name</emphasis></entry>

                  <entry><classname>With Roles</classname></entry>

                  <entry><emphasis>role list</emphasis></entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>

          <para>Intended to be called in the initial setup, as part of the
          story's "given".</para>

          <informaltable>
            <tgroup cols="2">
              <colspec />

              <tbody>
                <row>
                  <entry><classname>Switch User To</classname></entry>

                  <entry><emphasis>user name</emphasis></entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>

          <informaltable>
            <tgroup cols="4">
              <colspec />

              <tbody>
                <row>
                  <entry><classname>Switch User To</classname></entry>

                  <entry><emphasis>user name</emphasis></entry>

                  <entry><classname>With Roles</classname></entry>

                  <entry><emphasis>role list</emphasis></entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>

          <para>Optional; intended to be called later on in the story, eg, to
          test workflow.</para>

          <para>The role list, if specified, should be comma-separated (any
          white space will be ignored).</para>
        </sect3>
      </sect2>

      <sect2>
        <title>Setting Date and Time</title>

        <para>Sets the story's clock to a specific date and time. Stories that
        deal with domain objects that use the clock (eg for the defaulting of
        a date/time property) will typically need to call this fixture.</para>

        <para>Typically called within the "given", though may be called many
        times throughout the story.</para>

        <sect3>
          <title>Common</title>

          <para><methodname>Story#dateAndTimeIs(java.util.Date)</methodname></para>

          <para>This fixture installs the <classname>FixtureClock</classname>
          as the implementation of the <classname>Clock</classname> singleton
          (in the applib). Every call to the <classname>Clock</classname> will
          return the same date/time until the method is called again.</para>

          <para>If this fixture is not called, then the default system clock
          is used, which gets the time from the host computer. The
          <methodname>Story#debugClock()</methodname> method (<xref
          linkend="sec.DebugClock" />) can be used to verify the clock
          state.</para>
        </sect3>

        <sect3>
          <title>Concordion</title>

          <para>The Concordion integration provides a number of overloaded
          methods, all designed to be called from the
          <acronym>XHTML</acronym>:</para>

          <itemizedlist>
            <listitem>
              <para><methodname>#dateIs(String
              dateAndTimeStr)</methodname></para>
            </listitem>

            <listitem>
              <para><methodname>#timeIs(String
              dateAndTimeStr)</methodname></para>
            </listitem>
          </itemizedlist>

          <para>For example:</para>

          <programlisting>&lt;p concordion:execute="#result=timeIs(#dateTime)"&gt;The &lt;span concordion:assertTrue="#result"&gt;date/time&lt;/span&gt; is &lt;span concordion:set="#dateTime"&gt;2 mar 2007 09:20&lt;/span&gt;.&lt;/p&gt; </programlisting>

          <para>The overloaded forms are just for convenience; sometimes the
          story will want to emphasis the date, other times the time. In all
          case the date/time provided is parsed against the format 'dd MMM
          yyyy hh:mm'</para>
        </sect3>

        <sect3>
          <title>FitNesse</title>

          <para>The <emphasis>FitNesse</emphasis> integration provides four
          versions (overloaded only so reads well in the page):</para>

          <informaltable>
            <tgroup cols="2">
              <colspec />

              <tbody>
                <row>
                  <entry><classname>Date Is</classname></entry>

                  <entry><emphasis>date and time</emphasis></entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>

          <informaltable>
            <tgroup cols="2">
              <colspec />

              <tbody>
                <row>
                  <entry><classname>Date Is Now</classname></entry>

                  <entry><emphasis>date and time</emphasis></entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>

          <informaltable>
            <tgroup cols="2">
              <colspec />

              <tbody>
                <row>
                  <entry><classname>Time Is</classname></entry>

                  <entry><emphasis>date and time</emphasis></entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>

          <informaltable>
            <tgroup cols="2">
              <colspec />

              <tbody>
                <row>
                  <entry><classname>Time Is Now</classname></entry>

                  <entry><emphasis>date and time</emphasis></entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>

          <para>In each case the date/time provided is parsed against the
          format 'dd MMM yyyy hh:mm'</para>
        </sect3>
      </sect2>

      <sect2 id="sec.AliasServices">
        <title>Aliasing Services</title>

        <para>Specifies an alias to a service in order to invoke actions upon
        it. Typically this will be done for most if not all of the registered
        repositories. The class name (as defined in
        <filename>isis.properties</filename>) is used as the key; the alias
        defines a simple handle.</para>

        <para>For example, a service
        <classname>com.mycompany.customers.defaults.CustomerRepositoryDefault</classname>
        can be mapped to "customers".</para>

        <sect3>
          <title>Common</title>

          <para>The common library provides two methods:<itemizedlist>
              <listitem>
                <para><methodname>Story#getAliasRegistry()</methodname></para>
              </listitem>

              <listitem>
                <para><methodname>AliasRegistry#aliasService(String aliasAs,
                String serviceClassName)</methodname></para>
              </listitem>
            </itemizedlist></para>

          <para>The <acronym>BDD</acronym> framework integration is expected
          to obtain the <classname>AliasRegistry</classname> from the
          <classname>Story</classname>, and then use the
          <classname>AliasRegisty</classname> to register the alias.</para>
        </sect3>

        <sect3>
          <title>Concordion</title>

          <para>The Concordion integration provides a corresponding method,
          <methodname>#aliasService(aliasAs, String
          serviceClassName)</methodname>. This returns <literal>true</literal>
          if the service was found, false otherwise. Call within a table to
          alias multiple services, for example:<programlisting>&lt;table concordion:execute="#result=aliasService(#aliasAs, #className)"&gt;
  &lt;tr&gt;
    &lt;th concordion:set="#className"&gt;Class Name&lt;/th&gt;
    &lt;th concordion:set="#aliasAs"&gt;aliasAs&lt;/th&gt;
    &lt;th concordion:assertTrue="#result"/&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;com.mycompany.myapp.objstore.dflt.claim.ClaimRepositoryDefault&lt;/td&gt;
    &lt;td&gt;claims&lt;/td&gt;
    &lt;td&gt;ok&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;com.mycompany.myapp.objstore.dflt.employee.EmployeeRepositoryDefault&lt;/td&gt;
    &lt;td&gt;employees&lt;/td&gt;
    &lt;td&gt;ok&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;</programlisting></para>
        </sect3>

        <sect3>
          <title>FitNesse</title>

          <para>The FitNesse integration provides an implementation of a
          <classname>ColumnFixture</classname>, which is used as
          follows:</para>

          <para><informaltable>
              <tgroup cols="2">
                <colspec colname="_1" />

                <colspec colname="_2" />

                <tbody>
                  <row>
                    <entry nameend="_2" namest="_1"><classname>Alias
                    Services</classname></entry>
                  </row>

                  <row>
                    <entry><classname>class name</classname></entry>

                    <entry><classname>alias=</classname></entry>
                  </row>

                  <row>
                    <entry><emphasis>com.mycompany.myapp.objstore.dflt.claim.ClaimRepositoryDefault</emphasis></entry>

                    <entry><emphasis>claims</emphasis></entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable></para>
        </sect3>
      </sect2>

      <sect2 id="sec.SetUpObjects">
        <title>Setting Up Objects</title>

        <para>Creates objects, and persists them to the object store. .
        Typically used for immutable reference/standing data objects). Can
        also be to setup used for transaction/operational data objects (though
        <classname>UsingIsisViewerForSetup</classname>, <xref
        linkend="sec.UsingIsisViewer" />, is preferable). The DebugObjectStore
        fixture (<xref linkend="sec.DebugObjectStore" />) can be used to check
        the state of objects created.</para>

        <sect3>
          <title>Common</title>

          <para>The common library support for setting up objects using the
          <classname>SetUpObjectsPeer</classname> class. This represents the
          context for creating a set of objects all of the same type, and is
          usually called multiple times (eg corresponding to a table structure
          in the story text itself).</para>

          <para>The constructor for this class takes the following
          arguments:</para>

          <itemizedlist>
            <listitem>
              <para><classname>AliasRegistry</classname>
              <varname>aliasRegistry</varname></para>

              <para>the alias registry which is used to lookup aliases to
              existing objects, and is populated with aliases for the new
              created objects (if an alias binding is specified; see
              below).</para>
            </listitem>

            <listitem>
              <para><classname>String</classname>
              <varname>className</varname></para>

              <para>This is the fully qualified class name of the object to be
              instantiated</para>
            </listitem>

            <listitem>
              <para><classname>SetUpObjectsPeer.Mode</classname>
              <varname>mode</varname></para>

              <para>This is whether the object is to be persisted or
              not</para>
            </listitem>

            <listitem>
              <para><classname>CellBinding</classname>
              <varname>aliasBinding</varname></para>

              <para>This object represents a binding to a cell that will hold
              the reference to each newly created object. It can be left
              <literal>null</literal> if required.</para>
            </listitem>
          </itemizedlist>

          <para>Different methods are available for <acronym>BDD</acronym>
          framework integrations to call. Typically the BDD framework is
          expected to setup header information (the names of the properties),
          and then process each row.</para>

          <para>On the header of the table, the main method to call
          is:<itemizedlist>
              <listitem>
                <para><methodname>SetUpObjectsPeer#definePropertyOrAlias(String
                propertyNameOrAlias, int colNum)</methodname></para>

                <para>This associates each column with a property of the
                class, or an alias for the object overall</para>
              </listitem>
            </itemizedlist></para>

          <para>When processing each row, typically the main methods to call
          are:</para>

          <itemizedlist>
            <listitem>
              <para><methodname>SetUpObjectsPeer#addPropertyValueOrAlias(String
              propertyOrAliasValue)</methodname></para>

              <para>This provides the value of each property of the object to
              be created, or the alias to know the object by once created. The
              property value can either be an existing alias, else must be
              parseable (nb: Isis' own value types itself perform the parsing,
              so there's no additional work to be done here)</para>
            </listitem>

            <listitem>
              <para><methodname>SetUpObjectsPeer#createObject()</methodname></para>

              <para>This actually instantiates the object, either persistent
              or non-persistent as specified in the constructor, and assigns
              it an alias</para>
            </listitem>
          </itemizedlist>

          <para>That said, there are some other public methods that are
          available for more complex integrations (notably: FitNesse).</para>
        </sect3>

        <sect3>
          <title>Concordion</title>

          <para>The Concordion framework integration provides:</para>

          <itemizedlist>
            <listitem>
              <para><methodname>#setUpObject(String className, String aliasAs,
              String propertyName1, String propertyName2,
              ...)</methodname></para>

              <para>There are 10 overloaded versions of this method, to
              account for setting up different types of objects that have up
              to 10 properties.</para>

              <para>The method returns a string "ok" if has worked, otherwise
              it returns exception text. This might seem a little odd, but
              allows a meaningful message to be shown in the
              <acronym>XHTML</acronym>.</para>
            </listitem>

            <listitem>
              <para><methodname>#setUpObjectVarArgs(String className, String
              aliasAs, ...)</methodname></para>

              <para>This (protected, not public) method is to cater for
              setting up objects that require more than 10 properties to be
              setup. In these cases, the developer should write their own
              method and call into the
              <methodname>#setUpObjectsVarargs(...)</methodname> as
              required.</para>
            </listitem>
          </itemizedlist>

          <para>Note that this method should be called from the
          <acronym>XHTML</acronym> using <emphasis>isis:execute</emphasis>,
          not with concordion:execute. See <xref
          linkend="sec.HowTheIsisConcordionIntegrationWorks" /> for
          details.</para>

          <programlisting>&lt;p&gt;With Employees (&lt;span concordion:set="#className"&gt;com.mycompany.myapp.dom.employee.Employee&lt;/span&gt;):
&lt;/p&gt;
&lt;table isis:execute="#result=setUpObject(#className, #aliasAs, #name, #approver)"&gt;
  &lt;tr&gt;
    &lt;th concordion:set="#name"&gt;Name&lt;/th&gt;
    &lt;th concordion:set="#approver"&gt;Approver&lt;/th&gt;
    &lt;th concordion:set="#aliasAs"&gt;aliasAs&lt;/th&gt;
    &lt;th concordion:assertEquals="#result"/&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Fred Smith&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;Employee:Fred Smith&lt;/td&gt;
    &lt;td&gt;ok&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Tom Brown&lt;/td&gt;
    &lt;td&gt;Employee:Fred Smith&lt;/td&gt;
    &lt;td&gt;Employee:Tom Brown&lt;/td&gt;
    &lt;td&gt;ok&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Sam Jones&lt;/td&gt;
    &lt;td&gt;Employee:Fred Smith&lt;/td&gt;
    &lt;td&gt;Employee:Sam Jones&lt;/td&gt;
    &lt;td&gt;ok&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;</programlisting>
        </sect3>

        <sect3>
          <title>FitNesse</title>

          <para>The FitNesse integration uses the "Set Up Objects" table,
          called like so:</para>

          <informaltable>
            <tgroup cols="3">
              <colspec colname="_1" />

              <colspec colname="_2" />

              <colspec colname="_3" />

              <tbody>
                <row>
                  <entry><classname>Set Up Objects</classname></entry>

                  <entry nameend="_3"
                  namest="_2"><emphasis>com.mycompany.myapp.dom.employee.Employee</emphasis></entry>
                </row>

                <row>
                  <entry><classname>Name</classname></entry>

                  <entry><classname>Approver</classname></entry>

                  <entry><classname>alias as</classname></entry>
                </row>

                <row>
                  <entry><emphasis>Fred Smith</emphasis></entry>

                  <entry><emphasis> </emphasis></entry>

                  <entry><emphasis>Employee:Fred Smith</emphasis></entry>
                </row>

                <row>
                  <entry><emphasis>Tom Brown</emphasis></entry>

                  <entry><emphasis>Employee:Fred Smith</emphasis></entry>

                  <entry><emphasis>Employee:Tom Brown</emphasis></entry>
                </row>

                <row>
                  <entry><emphasis>Sam Jones</emphasis></entry>

                  <entry><emphasis>Employee:Fred Smith</emphasis></entry>

                  <entry><emphasis>Employee:Sam Jones</emphasis></entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>
        </sect3>
      </sect2>
    </sect1>

    <sect1 id="sec.UserInteraction">
      <title>User Interaction</title>

      <para>User interaction fixtures appear predominantly in the main body of
      the test, either to simulating user interactions or to assert on the
      results of those actions.</para>

      <sect2 id="sec.UsingIsisViewer">
        <title>Using Isis Viewer / Using Isis Viewer For Setup</title>

        <para>The centrepiece of the <acronym>BDD</acronym> framework,
        simulates interacting with domain objects as if through a viewer.
        Using this feature, the story can interact with objects, check their
        state, alias referenced or returned objects.</para>

        <para>The "For Setup" version disables checks for visibility and
        usability, making it easier to reuse functionality for setting up
        objects prior to a test scenario (the "given"). The
        <classname>DebugObjectStore</classname> fixture (<xref
        linkend="sec.DebugObjectStore" />) can be used to check the state of
        objects created.</para>

        <sect3>
          <title>Common</title>

          <para>The common library provides the
          <classname>UsingIsisViewerPeer</classname> class as a means by which
          the BDD framework integration can interact with Apache Isis
          runtime.</para>

          <para>The <classname>UsingIsisViewerPeer</classname> class is
          generally called from within a table format, with each row
          representing a specific interaction with the domain object. For
          example, a row might invoke an action, or could check that a class
          member is unavailable.</para>

          <para>Some interactions can be used to create or assign aliases to
          domain objects. For example, invoking a non-void action will return
          a result. If the result is a domain object, then the alias can be
          used directly subsequently in the story. If the result is a
          collection, then typically it is the story will make an assertion on
          that collection using "Check List" (see <xref
          linkend="sec.CheckList" />) or alias an object out of that list
          using "Alias Items In List" (see <xref
          linkend="sec.AliasItemsInList" />).</para>

          <para>Because <classname>UsingIsisViewerPeer</classname> is
          table-oriented, it uses <classname>CellBinding</classname>s (see
          <xref linkend="sec.CommonLibrary" />) to bind table headers to rows.
          The constructor takes the following parameters:</para>

          <itemizedlist>
            <listitem>
              <para><classname>AliasRegistry</classname></para>

              <para>Used to access aliases for existing domain objects, and to
              register aliases for newly created/found objects.</para>
            </listitem>

            <listitem>
              <para><classname>Perform.Mode</classname></para>

              <para>Whether to actually perform the interactions or not</para>
            </listitem>

            <listitem>
              <para><classname>CellBinding</classname>s for each of the
              standard columns of the table</para>

              <para>These are discussed below.</para>
            </listitem>
          </itemizedlist>

          <para>The <classname>CellBinding</classname>s passed into the
          constructor correspond to the standard columns of the table.
          Although all must be passed in, not all are needed for every
          interaction; in these cases the value can be left blank. The
          <classname>CellBinding</classname>s correspond to the following
          column names:</para>

          <itemizedlist>
            <listitem>
              <para>the "on object" column (can also use 'object', or 'on' if
              parsing column name provided by story text)</para>

              <para>The (alias of) the object to interact with. A value must
              always be provided.</para>
            </listitem>

            <listitem>
              <para>the "alias result as" column (can also use "result=",
              "alias=", "alias as")</para>

              <para>The alias to assign the result of any interaction.</para>
            </listitem>

            <listitem>
              <para>the "perform" column (can also use "do", "interaction",
              "interaction type")</para>

              <para>the interaction to perform; discussed further below</para>
            </listitem>

            <listitem>
              <para>the "on member" column (can also use "member", "using
              member", using")</para>

              <para>the property, collection or action to use</para>
            </listitem>

            <listitem>
              <para>the "that it" column (can also use "that", "verb")</para>

              <para>optional qualifier for interactions that make checks;
              discussed below</para>
            </listitem>

            <listitem>
              <para>the "with arguments" (can also "arguments", "parameters",
              "with parameters", "for", "value", "for parameters", "value",
              "reference")</para>

              <para>the first argument, to the interaction, if any. It is
              possible to perform interactions with multiple arguments (for
              example, invoking an action); but the UsingIsisViewerPeer needs
              to have a binding for the first argument so that it can knows to
              interpret any following columns as further arguments.</para>
            </listitem>
          </itemizedlist>

          <para>The valid values that can be provided for the "perform"
          binding are:</para>

          <itemizedlist>
            <listitem>
              <para>check property / check collection / check add to
              collection / check remove from collection / check action</para>

              <para>These are combined with a value in the "that it" binding;
              for example "check property XXX is hidden", or "check action XXX
              is valid for (<emphasis>some argument list</emphasis>)"</para>
            </listitem>

            <listitem>
              <para>get property / set property / clear property</para>

              <para>Read from or write to a collection. If setting, a single
              argument is required</para>
            </listitem>

            <listitem>
              <para>get collection / add to collection / remove from
              collection</para>

              <para>Read or write from a collection. If writing, a single
              argument is required</para>
            </listitem>

            <listitem>
              <para>invoke action</para>

              <para>Invoke action, with 0 to many arguments</para>
            </listitem>

            <listitem>
              <para>get property default / get property choices / get action
              parameter default / get action choices</para>

              <para>To enable the testing of the choicesXxx() and defaultXxx()
              supporting methods</para>
            </listitem>
          </itemizedlist>

          <para>The tables below summarizes the full of interactions that are
          supported for properties:</para>

          <table>
            <title>Supported Interactions for Properties</title>

            <tgroup cols="6">
              <colspec colname="_4" colnum="4" />

              <colspec colname="_5" />

              <colspec colname="_6" />

              <thead>
                <row>
                  <entry align="center">on object</entry>

                  <entry align="center">alias as</entry>

                  <entry align="center">perform</entry>

                  <entry align="center">using member</entry>

                  <entry align="center">that it</entry>

                  <entry align="center">value</entry>
                </row>
              </thead>

              <tbody>
                <row>
                  <entry><emphasis>object alias</emphasis></entry>

                  <entry><emphasis> </emphasis></entry>

                  <entry><classname>check property</classname></entry>

                  <entry><emphasis>property name</emphasis></entry>

                  <entry nameend="_6" namest="_5"><classname>is
                  hidden</classname><emphasis> </emphasis></entry>
                </row>

                <row>
                  <entry><emphasis>object alias</emphasis></entry>

                  <entry><emphasis> </emphasis></entry>

                  <entry><classname>check property</classname></entry>

                  <entry><emphasis>property name</emphasis></entry>

                  <entry nameend="_6" namest="_5"><classname>is
                  visible</classname><emphasis> </emphasis></entry>
                </row>

                <row>
                  <entry><emphasis>object alias</emphasis></entry>

                  <entry><emphasis> </emphasis></entry>

                  <entry><classname>check property</classname></entry>

                  <entry><emphasis>property name</emphasis></entry>

                  <entry nameend="_6" namest="_5"><classname>is
                  disabled</classname><emphasis> </emphasis></entry>
                </row>

                <row>
                  <entry><emphasis>object alias</emphasis></entry>

                  <entry><emphasis> </emphasis></entry>

                  <entry><classname>check property</classname></entry>

                  <entry><emphasis>property name</emphasis></entry>

                  <entry nameend="_6" namest="_5"><classname>is
                  enabled</classname><emphasis> </emphasis></entry>
                </row>

                <row>
                  <entry><emphasis>object alias</emphasis></entry>

                  <entry><emphasis> </emphasis></entry>

                  <entry><classname>check property</classname></entry>

                  <entry><emphasis>property name</emphasis></entry>

                  <entry nameend="_6" namest="_5"><classname>is
                  empty</classname><emphasis> </emphasis></entry>
                </row>

                <row>
                  <entry><emphasis>object alias</emphasis></entry>

                  <entry><emphasis> </emphasis></entry>

                  <entry><classname>check property</classname></entry>

                  <entry><emphasis>property name</emphasis></entry>

                  <entry nameend="_6" namest="_5"><classname>is not
                  empty</classname><emphasis> </emphasis></entry>
                </row>

                <row>
                  <entry><emphasis>object alias</emphasis></entry>

                  <entry><emphasis> </emphasis></entry>

                  <entry><classname>check property</classname></entry>

                  <entry><emphasis>property name</emphasis></entry>

                  <entry><classname>contains</classname></entry>

                  <entry><emphasis>value or object alias</emphasis></entry>
                </row>

                <row>
                  <entry><emphasis>object alias</emphasis></entry>

                  <entry><emphasis> </emphasis></entry>

                  <entry><classname>check property</classname></entry>

                  <entry><emphasis>property name</emphasis></entry>

                  <entry><classname>does not contain</classname></entry>

                  <entry><emphasis>value or object alias</emphasis></entry>
                </row>

                <row>
                  <entry><emphasis>object alias</emphasis></entry>

                  <entry><emphasis> </emphasis></entry>

                  <entry><classname>check set property</classname></entry>

                  <entry><emphasis>property name</emphasis></entry>

                  <entry><classname>is valid for</classname></entry>

                  <entry><emphasis>value or object alias </emphasis></entry>
                </row>

                <row>
                  <entry><emphasis>object alias</emphasis></entry>

                  <entry><emphasis> </emphasis></entry>

                  <entry><classname>check set property</classname></entry>

                  <entry><emphasis>property name</emphasis></entry>

                  <entry><classname>is not valid for</classname></entry>

                  <entry><emphasis> value or object alias</emphasis></entry>
                </row>

                <row>
                  <entry><emphasis>object alias</emphasis></entry>

                  <entry><emphasis> </emphasis></entry>

                  <entry><classname>check clear property</classname></entry>

                  <entry><emphasis>property name</emphasis></entry>

                  <entry nameend="_6" namest="_5"><classname>is
                  valid</classname><emphasis> </emphasis></entry>
                </row>

                <row>
                  <entry><emphasis>object alias</emphasis></entry>

                  <entry><emphasis> </emphasis></entry>

                  <entry><classname>check clear property</classname></entry>

                  <entry><emphasis>property name</emphasis></entry>

                  <entry nameend="_6" namest="_5"><classname>is not
                  valid</classname></entry>
                </row>

                <row>
                  <entry><emphasis>object alias</emphasis></entry>

                  <entry><emphasis> </emphasis></entry>

                  <entry><classname>set property</classname></entry>

                  <entry><emphasis>property name</emphasis></entry>

                  <entry><classname> </classname></entry>

                  <entry><emphasis>value or object alias </emphasis></entry>
                </row>

                <row>
                  <entry><emphasis>object alias</emphasis></entry>

                  <entry><emphasis> </emphasis></entry>

                  <entry><classname>clear property</classname></entry>

                  <entry nameend="_6" namest="_4"><emphasis>property
                  name</emphasis><emphasis> </emphasis></entry>
                </row>

                <row>
                  <entry><emphasis>object alias</emphasis></entry>

                  <entry><emphasis>alias for referenced object
                  </emphasis></entry>

                  <entry><classname>get property</classname></entry>

                  <entry nameend="_6" namest="_4"><emphasis>property
                  name</emphasis></entry>
                </row>

                <row>
                  <entry><emphasis>object alias</emphasis></entry>

                  <entry><emphasis>alias for default object
                  </emphasis></entry>

                  <entry><classname>get property default</classname></entry>

                  <entry nameend="_6" namest="_4"><emphasis>property
                  name</emphasis></entry>
                </row>

                <row>
                  <entry><emphasis>object alias</emphasis></entry>

                  <entry><emphasis>alias for list of
                  choices</emphasis></entry>

                  <entry><classname>get property choices</classname></entry>

                  <entry nameend="_6" namest="_4"><emphasis>property
                  name</emphasis><emphasis> </emphasis></entry>
                </row>
              </tbody>
            </tgroup>
          </table>

          <para>Obtaining a alias for the (value of) a property only makes
          sense if the property is a reference type, not value type.</para>

          <para>We likewise have a table for collections:</para>

          <table>
            <title>Supported Interactions for Collections</title>

            <tgroup cols="6">
              <colspec colname="_4" colnum="4" />

              <colspec colname="_5" />

              <colspec colname="_6" />

              <thead>
                <row>
                  <entry align="center">on object</entry>

                  <entry align="center">alias as</entry>

                  <entry align="center">perform</entry>

                  <entry align="center">using member</entry>

                  <entry align="center">that it</entry>

                  <entry align="center">reference</entry>
                </row>
              </thead>

              <tbody>
                <row>
                  <entry><emphasis>object alias</emphasis></entry>

                  <entry><emphasis> </emphasis></entry>

                  <entry><classname>check collection</classname></entry>

                  <entry><emphasis>collection name</emphasis></entry>

                  <entry nameend="_6" namest="_5"><classname>is
                  hidden</classname><emphasis> </emphasis></entry>
                </row>

                <row>
                  <entry><emphasis>object alias</emphasis></entry>

                  <entry><emphasis> </emphasis></entry>

                  <entry><classname>check collection</classname></entry>

                  <entry><emphasis>collection name</emphasis></entry>

                  <entry nameend="_6" namest="_5"><classname>is
                  visible</classname><emphasis> </emphasis></entry>
                </row>

                <row>
                  <entry><emphasis>object alias</emphasis></entry>

                  <entry><emphasis> </emphasis></entry>

                  <entry><classname>check collection</classname></entry>

                  <entry><emphasis>collection name</emphasis></entry>

                  <entry nameend="_6" namest="_5"><classname>is
                  disabled</classname><emphasis> </emphasis></entry>
                </row>

                <row>
                  <entry><emphasis>object alias</emphasis></entry>

                  <entry><emphasis> </emphasis></entry>

                  <entry><classname>check collection</classname></entry>

                  <entry><emphasis>collection name</emphasis></entry>

                  <entry nameend="_6" namest="_5"><classname>is
                  enabled</classname><emphasis> </emphasis></entry>
                </row>

                <row>
                  <entry><emphasis>object alias</emphasis></entry>

                  <entry><emphasis> </emphasis></entry>

                  <entry><classname>check collection</classname></entry>

                  <entry><emphasis>collection name</emphasis></entry>

                  <entry nameend="_6" namest="_5"><classname>is
                  empty</classname><emphasis> </emphasis></entry>
                </row>

                <row>
                  <entry><emphasis>object alias</emphasis></entry>

                  <entry><emphasis> </emphasis></entry>

                  <entry><classname>check collection</classname></entry>

                  <entry><emphasis>collection name</emphasis></entry>

                  <entry nameend="_6" namest="_5"><classname>is not
                  empty</classname><emphasis> </emphasis></entry>
                </row>

                <row>
                  <entry><emphasis>object alias</emphasis></entry>

                  <entry><emphasis>alias for collection </emphasis></entry>

                  <entry><classname>get collection</classname></entry>

                  <entry nameend="_6" namest="_4"><emphasis>collection
                  name</emphasis><emphasis> </emphasis></entry>
                </row>

                <row>
                  <entry><emphasis>object alias</emphasis></entry>

                  <entry><emphasis> </emphasis></entry>

                  <entry><classname>check collection</classname></entry>

                  <entry><emphasis>collection name</emphasis></entry>

                  <entry><classname>contains</classname></entry>

                  <entry><emphasis>object alias </emphasis></entry>
                </row>

                <row>
                  <entry><emphasis>object alias</emphasis></entry>

                  <entry><emphasis> </emphasis></entry>

                  <entry><classname>check collection</classname></entry>

                  <entry><emphasis>collection name</emphasis></entry>

                  <entry><classname>does not contain</classname></entry>

                  <entry><emphasis>object alias </emphasis></entry>
                </row>

                <row>
                  <entry><emphasis>object alias</emphasis></entry>

                  <entry><emphasis> </emphasis></entry>

                  <entry><classname>check add to
                  collection</classname></entry>

                  <entry><emphasis>collection name</emphasis></entry>

                  <entry><classname>is valid for</classname></entry>

                  <entry><emphasis>object alias </emphasis></entry>
                </row>

                <row>
                  <entry><emphasis>object alias</emphasis></entry>

                  <entry><emphasis> </emphasis></entry>

                  <entry><classname>check add to
                  collection</classname></entry>

                  <entry><emphasis>collection name</emphasis></entry>

                  <entry><classname>is not valid for</classname></entry>

                  <entry><emphasis>object alias </emphasis></entry>
                </row>

                <row>
                  <entry><emphasis>object alias</emphasis></entry>

                  <entry><emphasis> </emphasis></entry>

                  <entry><classname>check remove from
                  collection</classname></entry>

                  <entry><emphasis>collection name</emphasis></entry>

                  <entry><classname>is valid for</classname></entry>

                  <entry><emphasis>object alias </emphasis></entry>
                </row>

                <row>
                  <entry><emphasis>object alias</emphasis></entry>

                  <entry><emphasis> </emphasis></entry>

                  <entry><classname>check remove from
                  collection</classname></entry>

                  <entry><emphasis>collection name</emphasis></entry>

                  <entry><classname>is not valid for</classname></entry>

                  <entry><emphasis>object alias</emphasis></entry>
                </row>

                <row>
                  <entry><emphasis>object alias</emphasis></entry>

                  <entry><emphasis> </emphasis></entry>

                  <entry><classname>add to collection</classname></entry>

                  <entry><emphasis>collection name</emphasis></entry>

                  <entry><classname> </classname></entry>

                  <entry><emphasis>object alias </emphasis></entry>
                </row>

                <row>
                  <entry><emphasis>object alias</emphasis></entry>

                  <entry><emphasis> </emphasis></entry>

                  <entry><classname>remove from collection</classname></entry>

                  <entry><emphasis>collection name</emphasis></entry>

                  <entry><classname> </classname></entry>

                  <entry><emphasis> object alias</emphasis></entry>
                </row>
              </tbody>
            </tgroup>
          </table>

          <para>Obtaining a reference to a collection allows objects to be
          aliased from within it, using <xref
          linkend="sec.AliasItemsInList" />.</para>

          <para>Finally, we have a table for actions:</para>

          <table>
            <title>Supported Interactions for Actions</title>

            <tgroup cols="6">
              <colspec colname="_5" colnum="5" />

              <colspec colname="_6" />

              <thead>
                <row>
                  <entry align="center">on object</entry>

                  <entry align="center">alias as</entry>

                  <entry align="center">perform</entry>

                  <entry align="center">using member</entry>

                  <entry align="center">that it</entry>

                  <entry align="center">with arguments (one or more
                  cols)</entry>
                </row>
              </thead>

              <tbody>
                <row>
                  <entry><emphasis>object alias</emphasis></entry>

                  <entry><emphasis> </emphasis></entry>

                  <entry><classname>check action</classname></entry>

                  <entry><emphasis>action name</emphasis></entry>

                  <entry nameend="_6" namest="_5"><classname>is
                  hidden</classname><emphasis> </emphasis></entry>
                </row>

                <row>
                  <entry><emphasis>object alias</emphasis></entry>

                  <entry><emphasis> </emphasis></entry>

                  <entry><classname>check action</classname></entry>

                  <entry><emphasis>action name</emphasis></entry>

                  <entry nameend="_6" namest="_5"><classname>is
                  visble</classname><emphasis> </emphasis></entry>
                </row>

                <row>
                  <entry><emphasis>object alias</emphasis></entry>

                  <entry><emphasis> </emphasis></entry>

                  <entry><classname>check action</classname></entry>

                  <entry><emphasis>action name</emphasis></entry>

                  <entry nameend="_6" namest="_5"><classname>is
                  disabled</classname><emphasis> </emphasis></entry>
                </row>

                <row>
                  <entry><emphasis>object alias</emphasis></entry>

                  <entry><emphasis> </emphasis></entry>

                  <entry><classname>check action</classname></entry>

                  <entry><emphasis>action name</emphasis></entry>

                  <entry nameend="_6" namest="_5"><classname>is
                  enabled</classname><emphasis> </emphasis></entry>
                </row>

                <row>
                  <entry><emphasis>object alias</emphasis></entry>

                  <entry><emphasis> </emphasis></entry>

                  <entry><classname>check action</classname></entry>

                  <entry><emphasis>action name</emphasis></entry>

                  <entry><classname>is valid for</classname></entry>

                  <entry><emphasis>argument list </emphasis></entry>
                </row>

                <row>
                  <entry><emphasis>object alias</emphasis></entry>

                  <entry><emphasis> </emphasis></entry>

                  <entry><classname>check action</classname></entry>

                  <entry><emphasis>action name</emphasis></entry>

                  <entry><classname>is not valid for</classname></entry>

                  <entry><emphasis>argument list </emphasis></entry>
                </row>

                <row>
                  <entry><emphasis>object alias</emphasis></entry>

                  <entry><emphasis>alias for returned object
                  </emphasis></entry>

                  <entry><classname>invoke action</classname></entry>

                  <entry><emphasis>action name</emphasis></entry>

                  <entry><classname> </classname></entry>

                  <entry><emphasis>argument list </emphasis></entry>
                </row>

                <row>
                  <entry><emphasis>object alias</emphasis></entry>

                  <entry><emphasis>alias for parameter defaut
                  </emphasis></entry>

                  <entry><classname>get action default
                  parameter</classname></entry>

                  <entry><emphasis>action name</emphasis></entry>

                  <entry><classname> </classname></entry>

                  <entry><emphasis>param number (0-based) </emphasis></entry>
                </row>

                <row>
                  <entry><emphasis>object alias</emphasis></entry>

                  <entry><emphasis>alias for list of parameter
                  choices</emphasis></entry>

                  <entry><classname>get action parameter
                  choices</classname></entry>

                  <entry><emphasis>action name</emphasis></entry>

                  <entry><classname> </classname></entry>

                  <entry><emphasis>param number (0-based) </emphasis></entry>
                </row>
              </tbody>
            </tgroup>
          </table>

          <para>Note:</para>

          <itemizedlist>
            <listitem>
              <para>the <acronym>API</acronym> provided by the common library
              is not type-safe; the values (as provided in
              <classname>StoryCell</classname>) must match the values given
              here. While it is tempting to refactor the common library to use
              type safe enums, this would move the need to translate story
              text into each and every <acronym>BDD</acronym> framework
              integration. The <acronym>API</acronym> is probably correct as
              it is, even though it is reliant on the exact string phrases
              that appear in the tables above.</para>
            </listitem>
          </itemizedlist>

          <para>To actually perform, these interaction, the set</para>

          <para></para>

          <para>*** discuss captureCurrent()</para>

          <para></para>

          <para>the <classname>UsingIsisViewerPeer</classname> provides the
          following methods:</para>

          <itemizedlist>
            <listitem>
              <para><methodname>#validateOnObject():
              ObjectAdapter</methodname></para>

              <para></para>
            </listitem>

            <listitem>
              <para><methodname>#validateAliasAs(): String</methodname></para>

              <para></para>
            </listitem>

            <listitem>
              <para><methodname>#validateOnMember():
              ObjectMember</methodname></para>

              <para></para>
            </listitem>

            <listitem>
              <para><methodname>#validatePerform():
              Perform</methodname></para>

              <para></para>
            </listitem>

            <listitem>
              <para><methodname>#performCommand(ObjectAdapter onObject, String
              aliasAs, ObjectMember onMember, Perform perform,
              List&lt;StoryCell&gt; args)</methodname></para>

              <para></para>
            </listitem>
          </itemizedlist>

          <para></para>
        </sect3>

        <sect3>
          <title>Concordion</title>

          <para>The <emphasis>Concordion</emphasis> framework integration
          provides a set of overloaded methods in
          <classname>AbstractIsisConcordionTest</classname> which call into
          the <classname>UsingIsisViewerPeer</classname>:</para>

          <itemizedlist>
            <listitem>
              <para><methodname>#usingIsisViewer(String onObject, String
              aliasResultAs, String perform, String usingMember)
              </methodname></para>

              <para>For interactions that have no "that it" or arguments (eg
              "get collectoin recentlyPlacedOrders")</para>
            </listitem>

            <listitem>
              <para><methodname>#usingIsisViewerThat(String onObject, String
              aliasResultAs, String perform, String usingMember, String
              thatIt)</methodname></para>

              <para>For interactions that require a "that it" but no arguments
              (eg, "check property firstName that it is hidden")</para>
            </listitem>

            <listitem>
              <para><methodname>#usingIsisViewerArgs(String onObject, String
              aliasResultAs, String perform, String usingMember, String arg0,
              String arg1, ...</methodname>)</para>

              <para>For interactions that require arguments, but no "that it"
              (eg "invoke action placeOrder with arguments arg1, arg2,
              arg3").</para>

              <para>There are multiple overloaded versions of this method
              taking from 1 to 5 arguments.</para>
            </listitem>

            <listitem>
              <para><methodname>#usingIsisViewerThatArgs(String onObject,
              String aliasResultAs, String perform, String usingMember, String
              arg0, String arg1, ...)</methodname></para>

              <para>For interactions that require a "that it" and also an
              argumetn or arguments (eg "check action placeOrder is not valid
              for arg1, arg2, arg3)</para>

              <para>There are multiple overloaded versions of this method
              taking from 1 to 5 arguments.</para>
            </listitem>
          </itemizedlist>

          <para>If there is a requirement for more than 5 arguments, then you
          can write your own method and delegate to the (protected visibility)
          <methodname>#usingIsisViewerThatArgsVarargs(...)</methodname>
          method.</para>

          <para>In all cases these methods return the string "ok", or return
          the text of an exception otherwise. This makes them easy to
          embed</para>

          <para>Returns ok</para>

          <para></para>

          <para>Note that this method should be called from the
          <acronym>XHTML</acronym> using <emphasis>isis:execute</emphasis>,
          not with concordion:execute. See <xref
          linkend="sec.HowTheIsisConcordionIntegrationWorks" /> for
          details.</para>

          <para>For example, calling inline:</para>

          <programlisting>&lt;p
  isis:execute="#result=usingIsisViewer(#onObject,#aliasResultAs, #perform, #usingMember)"&gt;
  With the &lt;span concordion:set="#onObject"&gt;employees&lt;/span&gt; service, &lt;span
  concordion:set="#perform"&gt;invoke action&lt;/span&gt; &lt;span
  concordion:set="#usingMember"&gt;All Employees&lt;/span&gt; and alias the resulting list as &lt;span
  concordion:set="#aliasResultAs"&gt;list1&lt;/span&gt;; &lt;span
  concordion:assertEquals="#result"&gt;ok&lt;/span&gt;
&lt;/p&gt;</programlisting>

          <para></para>

          <para>The method can also be called within a table:</para>

          <programlisting>&lt;table
 isis:execute="#result=usingIsisViewerThatArgs(#onObject, #aliasResultAs, #perform, #onMember, #thatIt, #value)"&gt;
  &lt;tr&gt;
    &lt;th concordion:set="#onObject"&gt;on object&lt;/th&gt;
    &lt;th concordion:set="#aliasResultAs"&gt;alias result as&lt;/th&gt;
    &lt;th concordion:set="#perform"&gt;perform&lt;/th&gt;
    &lt;th concordion:set="#onMember"&gt;on member&lt;/th&gt;
    &lt;th concordion:set="#thatIt"&gt;that it&lt;/th&gt;
    &lt;th concordion:set="#value"&gt;value&lt;/th&gt;
    &lt;th concordion:assertEquals="#result" /&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;tomEmployee&lt;/td&gt;
    &lt;td&gt;tomsApprover&lt;/td&gt;
    &lt;td&gt;check property&lt;/td&gt;
    &lt;td&gt;Approver&lt;/td&gt;
    &lt;td&gt;is&lt;/td&gt;
    &lt;td&gt;Employee:Fred Smith&lt;/td&gt;
    &lt;td&gt;ok&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;</programlisting>

          <para></para>

          <para></para>

          <para></para>
        </sect3>

        <sect3>
          <title>FitNesse</title>

          <para></para>

          <para></para>

          <informaltable>
            <tgroup cols="5">
              <colspec colname="_1" />

              <colspec colname="_2" />

              <colspec />

              <colspec />

              <colspec colname="_3" />

              <tbody>
                <row>
                  <entry><classname>Using Isis Viewer</classname></entry>

                  <entry></entry>

                  <entry></entry>

                  <entry></entry>

                  <entry nameend="_3"
                  namest="_2"><emphasis></emphasis></entry>
                </row>

                <row>
                  <entry><classname>On Object</classname></entry>

                  <entry><classname>Alias Result As</classname></entry>

                  <entry>Perform</entry>

                  <entry></entry>

                  <entry><classname>alias as</classname></entry>
                </row>

                <row>
                  <entry><emphasis>Fred Smith</emphasis></entry>

                  <entry><emphasis> </emphasis></entry>

                  <entry></entry>

                  <entry></entry>

                  <entry><emphasis>Employee:Fred Smith</emphasis></entry>
                </row>

                <row>
                  <entry><emphasis>Tom Brown</emphasis></entry>

                  <entry><emphasis>Employee:Fred Smith</emphasis></entry>

                  <entry></entry>

                  <entry></entry>

                  <entry><emphasis>Employee:Tom Brown</emphasis></entry>
                </row>

                <row>
                  <entry><emphasis>Sam Jones</emphasis></entry>

                  <entry><emphasis>Employee:Fred Smith</emphasis></entry>

                  <entry></entry>

                  <entry></entry>

                  <entry><emphasis>Employee:Sam Jones</emphasis></entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>

          <para></para>
        </sect3>
      </sect2>

      <sect2 id="sec.CheckList">
        <title>Check List</title>

        <para>Check items in list, either precisely or just for presence,
        using their title. Lists are either aliased results of actions, or
        aliased collections within objects.</para>

        <para>Typically used in the "Then", though can be helpful as a way of
        confirming/documenting a "Given".</para>

        <para>See also <classname>AliasItemsInList</classname> (<xref
        linkend="sec.AliasItemsInList" />), which also performs an implicit
        check (will fail if the objects are not in the list) and aliases them
        for further use.</para>

        <para></para>

        <sect3>
          <title>Common</title>

          <para></para>

          <para></para>
        </sect3>

        <sect3>
          <title>Concordion</title>

          <para></para>

          <para></para>
        </sect3>

        <sect3>
          <title>FitNesse</title>

          <para></para>

          <para></para>
        </sect3>
      </sect2>

      <sect2 id="sec.AliasItemsInList">
        <title>Alias Items In List</title>

        <para>Allows an alias to be associated with items in a list. The list
        items are located by their title, and are presumed to exist. This
        fixture can therefore also be used as a way of checking for presence
        of items in a list (similar to <classname>CheckList</classname>, <xref
        linkend="sec.CheckList" />).</para>

        <para>Typically used both in the "Given" (to simplify writing the rest
        of a test).</para>

        <para></para>

        <para></para>

        <sect3>
          <title>Common</title>

          <para></para>

          <para></para>
        </sect3>

        <sect3>
          <title>Concordion</title>

          <para></para>

          <para></para>
        </sect3>

        <sect3>
          <title>FitNesse</title>

          <para></para>

          <para></para>
        </sect3>
      </sect2>
    </sect1>

    <sect1 id="sec.Debugging">
      <title>Debugging</title>

      <para>Debugging and diagnostics. Useful for checking setup, for
      example.</para>

      <sect2 id="sec.DebugServices">
        <title>Debugging Services</title>

        <para>Lists service class names, as picked up from configuration.
        Useful with AliasServices (see <xref
        linkend="sec.AliasServices" />).</para>

        <sect3>
          <title>Common</title>

          <para></para>
        </sect3>

        <sect3>
          <title>Concordion</title>

          <para></para>
        </sect3>

        <sect3>
          <title>FitNesse</title>

          <para></para>
        </sect3>
      </sect2>

      <sect2 id="sec.DebugClock">
        <title>Debugging the Clock</title>

        <para>Reads the current value of the clock. Useful for debugging and
        diagnostics.</para>

        <sect3>
          <title>Common</title>

          <para></para>
        </sect3>

        <sect3>
          <title>Concordion</title>

          <para></para>
        </sect3>

        <sect3>
          <title>FitNesse</title>

          <para></para>
        </sect3>
      </sect2>

      <sect2 id="sec.DebugObjectStore">
        <title>Debugging the Object Store</title>

        <para>Dumps the contents of the object store. Useful for debugging
        setup (through SetupObjects, <xref linkend="sec.SetUpObjects" />, and
        UsingNakedObjectsViewerForSetup, <xref
        linkend="sec.UsingIsisViewer" />).</para>

        <sect3>
          <title>Common</title>

          <para></para>
        </sect3>

        <sect3>
          <title>Concordion</title>

          <para></para>
        </sect3>

        <sect3>
          <title>FitNesse</title>

          <para></para>
        </sect3>
      </sect2>

      <sect2 id="sec.CheckSpecificationsLoaded">
        <title>Check Specifications Loaded</title>

        <para>Verifies that listed <classname>ObjectSpecification</classname>s
        have been loaded into the metamodel</para>

        <sect3>
          <title>Common</title>

          <para></para>
        </sect3>

        <sect3>
          <title>Concordion</title>

          <para></para>
        </sect3>

        <sect3>
          <title>FitNesse</title>

          <para></para>
        </sect3>
      </sect2>

      <sect2 id="sec.RunViewer">
        <title>Run Viewer</title>

        <para>Runs up the DnD viewer with the current state of the objects.
        This is a great way to inspect the state of the system, for example if
        a test is failing and you can't see why.</para>

        <sect3>
          <title>Common</title>

          <para></para>
        </sect3>

        <sect3>
          <title>Concordion</title>

          <para></para>
        </sect3>

        <sect3>
          <title>FitNesse</title>

          <para></para>
        </sect3>
      </sect2>
    </sect1>

    <sect1>
      <title>Tear Down</title>

      <para>The opposite of setting up...</para>

      <sect2 id="sec.ShutdownIsis">
        <title>Shutdown Isis</title>

        <para>This fixture shuts down the Naked Objects runtime, releasing
        memory and so on. A good place to put this is in the test's
        teardown.</para>

        <sect3>
          <title>Common</title>

          <para></para>
        </sect3>

        <sect3>
          <title>Concordion</title>

          <para></para>
        </sect3>

        <sect3>
          <title>FitNesse</title>

          <para></para>
        </sect3>
      </sect2>
    </sect1>
  </chapter>

  <chapter id="chp.HintsAndTips">
    <title>Hints and Tips</title>

    <abstract>
      <para>This chapter contains a collection of hints, tips and suggestions
      for writing your own tests.</para>
    </abstract>

    <para>For further guidance, we recommend that you check out Gojko Adzic's
    book, <ulink url="http://www.acceptancetesting.info/the-book/">Bridging
    the Communication Gap</ulink>.</para>

    <sect1>
      <title>Separate In-Progress Stories from the Backlog</title>

      <para>If you are using an agile methodology then you will be
      implementing a number of stories per iteration; the remainder will be in
      a backlog. When you select a story for implementation, create a new page
      for it in a "CurrentIteration" suite. The objective for the team is
      therefore to get the entire CurrentIteration suite green.</para>

      <para>Other stories that you may have identified but not selected for
      the iteration can remain in a Backlog suite.</para>
    </sect1>

    <sect1>
      <title>Use a Story Page to Collect A Set of Scenario Tests</title>

      <para>Part of estimating the size of a story includes identifying the
      acceptance criteria. These can be created as children of the story page
      as placeholders, so that the story page becomes a suite. The child
      scenario tests can be fleshed out as required with plain text during the
      estimation meeting, and with actual FitNesse tests once the iteration
      starts. The FitNesse <ulink
      url="http://fitnesse.org/FitNesse.UserGuide.MarkupContents">!contents</ulink>
      instruction will then list all the acceptance criteria for the
      story.</para>

      <para>For the story page itself, the "as a ... I want ... so that... "
      template is a good way to summarize the intent of the story.</para>
    </sect1>

    <sect1>
      <title>Organize Completed Stories by Component</title>

      <para>Once you have completed an iteration and implements its stories,
      move those stories out to the relevant component that the story relates
      to. The scenario tests for stories ultimately <emphasis>are</emphasis>
      the documentation of the behaviour of the system. A year on you won't
      remember (and won't care) which iteration you implemented a story,
      you'll be searching for it by the component whose behaviour you want to
      understand.</para>
    </sect1>

    <sect1>
      <title>Structure your test using Given/When/Then</title>

      <para>A standard template for organizing structuring tests is
      given/when/then<footnote>
          <para>As first described, I believe, by Dan North in a blog post,
          <ulink url="http://dannorth.net/introducing-bdd">Introducing
          BDD</ulink>.</para>
        </footnote>:</para>

      <itemizedlist>
        <listitem>
          <para>given ... the system is in this particular state</para>
        </listitem>

        <listitem>
          <para>when ... this interesting thing happens</para>
        </listitem>

        <listitem>
          <para>then ... these are the consequences</para>
        </listitem>
      </itemizedlist>

      <para>This structure is readily understood by non-technical business
      users, and helps them (and the team) focus on the point of the
      test.</para>

      <para>In terms of mechanics, one approach is to put the "given" into the
      setup page for a test, with the "when" and the "then" in separate
      pages.d</para>
    </sect1>

    <sect1 id="sec.UsingTheFixtureViewer">
      <title>Using the RunViewer fixture</title>

      <para>The "given" can often be the hardest part to get setup. To check
      it, we can use the <classname>RunViewer</classname> fixture (see <xref
      linkend="sec.RunViewer" />). This will run up the drag-n-drop viewer at
      the specified point in the test; a visual equivalent of
      <code>System.out.println()</code>, really. We can therefore take the
      Given page and add a RunViewer fixture at the end.</para>

      <para>Note that to do this you must temporarily mark the Given page as a
      <ulink url="http://fitnesse.org/FitNesse.UserGuide.PageProperties">test
      page</ulink>.</para>
    </sect1>

    <sect1 id="sec.FactorOutCommonGivens">
      <title>Factor out common "Given"s</title>

      <para>Just like code, tests need to be actively managed, because if the
      tests become hard to maintain, they'll end up being deleted. In fact, we
      probably should take even more care with the tests than the code if they
      represent the primary documentation of the behaviour of the
      system.</para>

      <para>In terms of size, the "given" is far larger than either the "when"
      or the "then", and therefore this is the area where tests can quickly
      become unmaintainable. So instead, try to factor out your givens into
      separate pages.</para>

      <para>For example:</para>

      <itemizedlist>
        <listitem>
          <para>if using Concordion, you can use &lt;a href's&gt; with a
          concordion:execute tag to include another page.</para>
        </listitem>

        <listitem>
          <para>if usingFitNesse, then use it's <ulink
          url="http://fitnesse.org/FitNesse.UserGuide.MarkupPageInclude">!include</ulink>
          directive to assemble the pages you need</para>
        </listitem>
      </itemizedlist>

      <para>The names of these pages should also follow a declarative style,
      see <xref linkend="sec.UseADeclarativeStyle" />.</para>
    </sect1>

    <sect1 id="sec.UseADeclarativeStyle">
      <title>Use a Declarative Style for Page Names</title>

      <para>When factoring out "given"s (see <xref
      linkend="sec.FactorOutCommonGivens" />), or indeed when writing the
      "when"s and the "then"s, use a declarative style for the pages. The page
      should describe what it does, not how it does it.</para>

      <para>For example, a good page would be "SetUpCountries". It's clear
      that this will set up all <classname>Country</classname> reference data
      classes. This could be included into a "SetUpReferenceData" page. For
      transaction data, we could have a page "JoeBloggsCustomer"; another one
      again could be "JoeBloggsFiveOrders".</para>
    </sect1>

    <sect1 id="sec.SettingUpContinuousIntegration">
      <title>Set up Continuous Integration</title>

      <para>Since Isis is a Maven application, it is easy enough to configure
      it to run under a CI server, such as <ulink
      url="http://hudson-ci.org/">Hudson</ulink>. If you google around you
      should also be able find a way to make Hudson publish the test results
      onto a website so that they can be inspected by your domain experts /
      business analysts.</para>
    </sect1>
  </chapter>
</book>
