<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"file:./src/docbkx/dtd-4.5/docbookx.dtd">
<!--
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
-->
<book>
  <bookinfo>
    <title><?eval ${docbkxGuideTitle}?></title>

    <subtitle><?eval ${docbkxGuideSubTitle}?></subtitle>

    <releaseinfo><?eval ${project.version}?></releaseinfo>

    <authorgroup>
      <author>
        <firstname>Dan</firstname>

        <surname>Haywood</surname>
      </author>
    </authorgroup>

    <legalnotice>
      <para>Permission is granted to make and distribute verbatim copies of
      this manual provided that the copyright notice and this permission
      notice are preserved on all copies.</para>
    </legalnotice>
  </bookinfo>

  <!-- front matter -->

  <toc></toc>

  <preface id="preface">
    <title>Preface</title>

    <para><emphasis>Apache Isis</emphasis> is designed to allow programmers
    rapidly develop domain-driven applications following the <ulink
    url="http://en.wikipedia.org/wiki/Naked_Objects">Naked Objects</ulink>
    pattern. It is made up of a core framework plus a number of alternate
    implementations, and supports various viewers and object stores. Apache
    Isis is hosted at the <ulink url="http://incubator.apache.org/isis">Apache
    Foundation</ulink>, and is licensed under <ulink
    url="http://www.apache.org/licenses/LICENSE-2.0.html">Apache Software
    License v2</ulink>.</para>

    <para>This guide is written for ...</para>
  </preface>

  <!-- main content -->

  <chapter id="chp.Intro">
    <title>Introduction</title>

    <abstract>
      <para>*** yada yada</para>
    </abstract>

    <para></para>

    <note>
      <para>TODO: tidy up the following paras, were just copied/pasted in from
      APT</para>
    </note>

    <para></para>

    <para>[[NAME]] allows remote clients to interact with a server by passing
    requests over a communication for another VM to deal with instead of
    user's VM as would happen in the standalone version. Each request starts
    by passing over authentication details to ensure the user is valid and to
    allow request to be authorised (altough requests are never passed from the
    client when the client knows it is not authorised, this guards against
    malicious access). Following that is the data for the request and here
    references are passed (using the <classname>Oid</classname> class) for
    persistent object, while graphs of data are passed for transient
    objects.</para>

    <para>Requests are routed to the <classname>ServerFacade</classname>
    object, where each specific request results in a calls to a specific
    method. For example a find request goes to the
    <methodname>findInstances</methodname> method while a change to an objects
    property goes to the <methodname>setAssociation</methodname> method. The
    facade then decodes the parameters of the request into objectst that
    [[NAME]] Objects can deal with. So, for example, an
    <classname>IdentityData</classname> is used to look up a persistent
    instance, while a identifier string is used to find a
    <classname>ObjectMember</classname>. With the details of the request
    converted to [[NAME]] objects the requisite call is made into the [[NAME]]
    system. After that call is made two things are returned to the client,
    this time by converting [[NAME]] objects to transferable data objects.
    First, the result of the call into [[NAME]] is return and, second, any
    changes made to any objects involved (the object changed set) are passed
    back for the client to update the objects that it has.</para>

    <para>Connections from the client are accepted by the ServerListener,
    which in the case the</para>

    <para></para>

    <para></para>

    <para>Client/server deployments require a transport protocol for network
    interactions. The core API and a basic
    <classname>java.net.Socket</classname> based implementation is defined in
    {{{../core/runtime/index.html}runtime}}. An alternative HTTP-based
    implementation is available in
    {{{./http-remoting/index.html}http-remoting}}.</para>

    <para></para>

    <para>In addition to a transport, client/server remoting also requires a
    marshalling mechanism. This is used to "take apart" the domain objects and
    then reassemble them. The core API and standard implementation for
    marshalling is defined in {{{../core/runtime/index.html}runtime}}; an
    alternative Xstream-based implementation is available in
    {{{./xstream-marshalling/index.html}xstream-marshalling}}.</para>

    <sect1>
      <title>Transports</title>

      <para><emphasis>*** yada yada</emphasis></para>

      <para></para>
    </sect1>

    <sect1>
      <title>Marshalling</title>

      <para></para>
    </sect1>
  </chapter>

  <chapter>
    <title>Sockets Transport</title>

    <para></para>

    <para></para>

    <para></para>

    <sect1>
      <title>Configuring the Server</title>

      <para></para>

      <para></para>

      <sect2>
        <title>Setting up Security</title>

        <para></para>

        <para></para>

        <para>x-ref Core documentation.</para>

        <para></para>
      </sect2>
    </sect1>

    <sect1>
      <title>Configuring the Client</title>

      <para></para>

      <sect2>
        <title>Setting up Security</title>

        <para></para>

        <para></para>

        <para>x-ref Core documentation.</para>

        <para></para>
      </sect2>
    </sect1>

    <sect1>
      <title>Running Client-Server over Sockets</title>

      <para></para>

      <para></para>

      <para></para>

      <sect2>
        <title>Running [[NAME]] as a socket server</title>

        <screen format="linespecific">$ isis.sh --type server --viewer xstream-sockets --persistor xml</screen>

        <para>This command runs [[NAME]] as a socket server. The
        <methodname>viewer</methodname> command line option specifies that the
        server will listen for requests using basic TCP/IP plain sockets with
        the XStream marshalling mechanism. The
        <methodname>persistor</methodname> command line option indicates to
        use XML object store as the persistence mechanism.</para>
      </sect2>

      <sect2>
        <title>Running [[NAME]] as a socket client</title>

        <screen format="linespecific">$ isis.sh --type client --viewer dnd --connector xstream-sockets </screen>

        <para>This commands starts up [[NAME]] as a client, using the DND
        viewer. The <methodname>connector</methodname> command line option
        indicates to use the XStream marshalling mechanism over basic TCP/IP
        sockets. As we are now running a multi-user system more than one
        client can be started up.</para>

        <para>To allow the client to connect to a remote server the
        <methodname>address</methodname> property needs to be specified. For
        simplicity this can be added the <filename class="directory"
        moreinfo="none">isis.properties</filename> file, but it may
        alternatively be placed in a separate file called <filename
        class="directory"
        moreinfo="none">transport_sockets.properties</filename>.</para>

        <programlisting format="linespecific">isis.transport.sockets.host = server.mycompanyname.com</programlisting>

        <para></para>

        <para></para>

        <para></para>

        <para></para>
      </sect2>
    </sect1>

    <sect1>
      <title>Server monitoring</title>

      <para>The NO server can be monitored via a web browser using <ulink
      url="http://localhost:8081/">http://localhost:8081/</ulink>.</para>

      <para>The port can be changed from its default of 8081 using the port
      property like this:</para>

      <programlisting>isis.monitor.http.port=9000</programlisting>

      <para>The NO server can also be monitored using telnet on port
      8009.</para>

      <para>The port can be changed from its default of 8009 using the port
      property like this:</para>

      <programlisting>isis.monitor.telnet.port=9000</programlisting>

      <para>Commands include: Overview, Authenticator, Configuration,
      Reflector, Listeners, Events, Contexts, shutdown and bye.</para>

      <para>Shutdown terminate the NO server.</para>

      <para>Bye disconnects the telnet session.</para>

      <para></para>
    </sect1>
  </chapter>

  <chapter>
    <title>Http Transport</title>

    <para></para>

    <para></para>

    <sect1>
      <title>Configuring the Server</title>

      <para></para>

      <para></para>

      <sect2>
        <title>Setting up Security</title>

        <para></para>

        <para></para>

        <para>x-ref Core documentation.</para>

        <para></para>
      </sect2>
    </sect1>

    <sect1>
      <title>Configuring the Client</title>

      <para></para>

      <sect2>
        <title>Setting up Security</title>

        <para></para>

        <para></para>

        <para>x-ref Core documentation.</para>

        <para></para>
      </sect2>
    </sect1>

    <sect1>
      <title>Running Client-Server over HTTP</title>

      <sect2>
        <title>Running [[NAME]] as a HTTP server</title>

        <screen format="linespecific">$ isis.sh --type server --viewer encoding-http --persistor xml</screen>

        <para>This command runs [[NAME]] as a server. The
        <methodname>viewer</methodname> command line parameter specifies that
        the server will listen using http using the encoding marshalling
        mechanism. The <methodname>persistor</methodname> property XML object
        store as the persistence mechanism - a very simple persistence
        mechanism useful for initial prototyping. (In fact, the XML object
        store is the default persistence mechanism, so this property may be
        omitted from the command).</para>

        <para>Alternatively the remoting servlet
        <classname>EncodingOverHttpRemotingServlet</classname> can be added to
        the <filename>web.xml</filename> in the webapp project and the
        [[NAME]] run as a web app, see below.</para>
      </sect2>

      <sect2>
        <title>Running [[NAME]] as socket client</title>

        <screen format="linespecific">$ isis.sh --type client --viewer dnd --connector encoding-http </screen>

        <para>This commands starts up [[NAME]] as a client, using the DND
        viewer. The <methodname>connector</methodname> command line option
        indicates to use submit requests using http and with the encoding
        marshalling mechanism. Again, as we are now running a multi-user
        system more than one client can be started up.</para>

        <para>To allow the client to connect to a remote server the
        <methodname>address</methodname> property needs to be specified. For
        simplicity this can be added the <filename class="directory"
        moreinfo="none">isis.properties</filename> file, but it may
        alternatively be placed in a separate file called <filename
        class="directory"
        moreinfo="none">transport_http.properties</filename>.</para>

        <programlisting format="linespecific">isis.transport.http.url = http://server.mycompanyname.com:8080/remoting.svc</programlisting>
      </sect2>
    </sect1>
  </chapter>

  <chapter>
    <title>***</title>

    <abstract>
      <para>*** yada yada</para>
    </abstract>

    <sect1>
      <title>***</title>

      <para><emphasis>*** yada yada</emphasis></para>
    </sect1>
  </chapter>

  <appendix>
    <title>***</title>

    <abstract>
      <para>*** yada yada</para>
    </abstract>

    <sect1 id="sec.module-ui">
      <title>***</title>

      <para>*** yada yada</para>
    </sect1>
  </appendix>
</book>
