/*
 *  Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */


package org.apache.isis.runtimes.dflt.runtime.system.persistence;

import org.apache.isis.core.commons.components.Injectable;
import org.apache.isis.core.commons.components.SessionScopedComponent;
import org.apache.isis.core.commons.debug.DebuggableWithTitle;
import org.apache.isis.core.commons.encoding.Encodable;
import org.apache.isis.core.metamodel.adapter.ObjectAdapter;
import org.apache.isis.core.metamodel.adapter.oid.AggregatedOid;
import org.apache.isis.core.metamodel.adapter.oid.Oid;
import org.apache.isis.core.metamodel.adapter.oid.stringable.OidStringifier;
import org.apache.isis.core.metamodel.adapter.oid.stringable.directly.DirectlyStringableOid;
import org.apache.isis.core.metamodel.adapter.oid.stringable.hex.OidStringifierHex;
import org.apache.isis.runtimes.dflt.runtime.persistence.oidgenerator.simple.SerialOid;


public interface OidGenerator extends DebuggableWithTitle, SessionScopedComponent, Injectable {


    /**
     * Create a new {@link Oid#isTransient() transient} {@link Oid} for the
     * supplied pojo, uniquely distinguishable from any other {@link Oid}.
     */
    Oid createTransientOid(Object pojo);

    /**
     * Creates a new sub-ID for the specified object for use in an {@link AggregatedOid}.
     */
    String createAggregateId(Object pojo);
    
    /**
     * Convert the {@link Oid} from {@link Oid#isTransient() transient} to
     * persistent, storing the previous {@link Oid} as {@link Oid#getPrevious()}
     * 
     * <p>
     * Implementation notes:
     * <ul>
     * <li>Note that the {@link AdapterManager} will need to be updated so that the
     *     {@link ObjectAdapter adapter} is re-mapped by the new {@link Oid}.  However,
     *     the <i>not</i> the responsibility of the {@link OidGenerator} to do this; 
     *     it merely ensures that the {@link Oid} is in the correct new state.
     * <li>Some implementations may require that state be set up on the {@link Oid}
     *     prior to call.  Check for details.
     * </ul>
     */
    void convertTransientToPersistentOid(Oid oid);

    /**
     * An {@link OidStringifier} to use for stringifying instances of the concrete {@link Oid}
     * generated by this generator.
     * 
     * <p>
     * All {@link Oid}s (ultimately being {@link Encodable}) can be stringified using {@link OidStringifierHex}.
     * However, some implementations (for example {@link SerialOid}) implement {@link DirectlyStringableOid} which
     * means that we can get a more user-friendly string representation of the {@link Oid}.
     */
    OidStringifier getOidStringifier();

}
