/*
 *  Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */

package org.apache.isis.runtimes.dflt.runtime.system.transaction;

import org.apache.isis.core.commons.components.TransactionScopedComponent;

/**
 * Used by the {@link IsisTransactionManager} to captures a set of changes to be applied.
 * 
 * <p>
 * The protocol by which the {@link IsisTransactionManager} interacts and uses the {@link IsisTransaction} is not API,
 * because different approaches are used. For the server-side <tt>ObjectStoreTransactionManager</tt>, each object is
 * wrapped in a command generated by the underlying <tt>ObjectStore</tt>. for the client-side
 * <tt>ClientSideTransactionManager</tt>, the transaction simply holds a set of events.
 * 
 * <p>
 * Note that methods such as <tt>flush()</tt>, <tt>commit()</tt> and <tt>abort()</tt> are not part of the API. The place
 * to control transactions is through the {@link IsisTransactionManager transaction manager}, because some
 * implementations may support nesting and such like. It is also the job of the {@link IsisTransactionManager} to ensure
 * that the underlying persistence mechanism (for example, the <tt>ObjectAdapterStore</tt>) is also committed.
 */
public interface IsisTransaction extends TransactionScopedComponent {

    public static enum State {
        /**
         * Started, still in progress.
         * 
         * <p>
         * May {@link IsisTransaction#flush() flush}, {@link IsisTransaction#commit() commit} or
         * {@link IsisTransaction#abort() abort}.
         */
        IN_PROGRESS(true, true, true, false),
        /**
         * Started, but has hit an exception.
         * 
         * <p>
         * May not {@link IsisTransaction#flush()} or {@link IsisTransaction#commit() commit} (will throw an
         * {@link IllegalStateException}), but can only {@link IsisTransaction#abort() abort}.
         * 
         * <p>
         * Similar to <tt>setRollbackOnly</tt> in EJBs.
         */
        MUST_ABORT(false, false, true, false),
        /**
         * Completed, having successfully committed.
         * 
         * <p>
         * May not {@link IsisTransaction#flush()} or {@link IsisTransaction#abort() abort} or
         * {@link IsisTransaction#commit() commit} (will throw {@link IllegalStateException}).
         */
        COMMITTED(false, false, false, true),
        /**
         * Completed, having aborted.
         * 
         * <p>
         * May not {@link IsisTransaction#flush()}, {@link IsisTransaction#commit() commit} or
         * {@link IsisTransaction#abort() abort} (will throw {@link IllegalStateException}).
         */
        ABORTED(false, false, false, true);

        private final boolean canFlush;
        private final boolean canCommit;
        private final boolean canAbort;
        private final boolean isComplete;

        private State(final boolean canFlush, final boolean canCommit, final boolean canAbort, final boolean isComplete) {
            this.canFlush = canFlush;
            this.canCommit = canCommit;
            this.canAbort = canAbort;
            this.isComplete = isComplete;
        }

        /**
         * Whether it is valid to {@link IsisTransaction#flush() flush} this {@link IsisTransaction transaction}.
         */
        public boolean canFlush() {
            return canFlush;
        }

        /**
         * Whether it is valid to {@link IsisTransaction#commit() commit} this {@link IsisTransaction transaction}.
         */
        public boolean canCommit() {
            return canCommit;
        }

        /**
         * Whether it is valid to {@link IsisTransaction#abort() abort} this {@link IsisTransaction transaction}.
         */
        public boolean canAbort() {
            return canAbort;
        }

        /**
         * Whether the {@link IsisTransaction transaction} is complete (and so a new one can be started).
         */
        public boolean isComplete() {
            return isComplete;
        }

    }

    /**
     * The state of this transaction.
     */
    State getState();

    /**
     * The underlying reason (if known) why the transaction was aborted.
     * 
     * <p>
     * Will be set if an exception is thrown while {@link #flush() flush}ing, {@link #commit() commit}ting or
     * {@link #abort() abort}ing.
     */
    public RuntimeException getAbortCause();

    /**
     * The owning {@link IsisTransactionManager transaction manager}.
     */
    IsisTransactionManager getTransactionManager();

    /**
     * The {@link UpdateNotifier} for this transaction.
     */
    UpdateNotifier getUpdateNotifier();

    /**
     * The {@link MessageBroker} for this transaction.
     */
    MessageBroker getMessageBroker();

}
