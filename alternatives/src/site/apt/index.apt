~~  Licensed to the Apache Software Foundation (ASF) under one
~~  or more contributor license agreements.  See the NOTICE file
~~  distributed with this work for additional information
~~  regarding copyright ownership.  The ASF licenses this file
~~  to you under the Apache License, Version 2.0 (the
~~  "License"); you may not use this file except in compliance
~~  with the License.  You may obtain a copy of the License at
~~
~~        http://www.apache.org/licenses/LICENSE-2.0
~~
~~  Unless required by applicable law or agreed to in writing,
~~  software distributed under the License is distributed on an
~~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~~  KIND, either express or implied.  See the License for the
~~  specific language governing permissions and limitations
~~  under the License.



Alternatives
 
 The <alternatives> module is a parent for alternative implementations of the
 following APIs:
  
 * {{{./objectstore/index.html}object stores}}
 
   The object store API allows Isis to persist domain objects using different 
   technologies.
   
 * {{{./progmodel/index.html}programming model}} / other language support
 
   These either refine the Isis programming model (as described in the 
   {{{../applib/index.html}applib}} module) or could replace it (for example, if supporting
   another language).

 * {{{./security/index.html}security}} (authentication & authorization)
 
   The mechanisms for authentication ("who are you"?) and authorization 
   ("what can you do?") are both pluggable.
 
 * {{{./bytecode/index.html}bytecode}} enhancement
 
   This API allows the framework to automatically perform lazy loading and
   dirty object tracking
 
 * {{{./remoting/index.html}remoting}} APIs
 
   The above items in this list are straightforward alternatives to {{{../defaults/index.html}default}}
   implementations.  Remoting though is slightly different; it is an alternative implementation of 
   several internal APIs that are defined within the {{{../core/index.html}core}} (specifically,
   <<<ObjectPersistor>>> and <<<Viewer>>>).  It provides implementations of these APIs in order to 
   allow two instances of the application to interact across the nework in client/server mode.
   
   These implementations also define their own APIs, one being the transport protocol, the other a 
   marshalling mechanism for network interactions.  The <remoting> component both defines these APIs
   and provides several implementations.
 
 []
 
 Note that alternatives are versioned separately from the main {{{../core/index.html}core}} framework.
 