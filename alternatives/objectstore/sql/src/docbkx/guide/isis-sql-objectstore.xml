<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
-->
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"file:./src/docbkx/dtd-4.5/docbookx.dtd">
<book>
  <bookinfo>
    <title><?eval ${docbkxGuideTitle}?></title>

    <subtitle><?eval ${docbkxGuideSubTitle}?></subtitle>

    <releaseinfo><?eval ${project.version}?></releaseinfo>

    <authorgroup>
      <author>
        <firstname>Robert</firstname>

        <surname>Matthews</surname>
      </author>

      <author>
        <firstname>Kevin</firstname>

        <surname>Meyer</surname>
      </author>
    </authorgroup>

    <legalnotice>
      <para>Permission is granted to make and distribute verbatim copies of
      this manual provided that the copyright notice and this permission
      notice are preserved on all copies.</para>
    </legalnotice>
  </bookinfo>

  <!-- front matter -->

  <toc></toc>

  <preface id="preface">
    <title>Preface</title>

    <para><emphasis>Apache Isis</emphasis> is designed to allow programmers
    rapidly develop domain-driven applications following the <ulink
    url="http://en.wikipedia.org/wiki/Naked_Objects">Naked Objects</ulink>
    pattern. It is made up of a core framework plus a number of alternate
    implementations, and supports various viewers and object stores. Apache
    Isis is hosted at the <ulink url="http://incubator.apache.org/isis">Apache
    Foundation</ulink>, and is licensed under <ulink
    url="http://www.apache.org/licenses/LICENSE-2.0.html">Apache Software
    License v2</ulink>.</para>

    <para>This guide is written for programmers who want to use the
    <emphasis>SQL Object Store</emphasis> to persist domain objects running
    within the <emphasis>Apache Isis</emphasis> framework. Specifically, it
    covers how to write repository implementations, how to configure the
    object store, and how to deploy your applications using the object
    store.</para>
  </preface>

  <!--main content -->

  <chapter id="chp.Intro">
    <title>Operation</title>

    <abstract>
      <para>What's it all about?</para>
    </abstract>

    <sect1>
      <title>Setup</title>

      <sect2>
        <title>Properties</title>

        <para>The SQL objectstore is setup via the
        <code>isis.properties</code> file. The required variables are given
        below:</para>

        <blockquote>
          <para><property>isis.persistor.sql.jdbc.driver=org.hsqldb.jdbcDriver</property></para>

          <para><property>isis.persistor.sql.jdbc.connection=jdbc:hsqldb:file:hsql-db/tests</property></para>

          <para><property>isis.persistor.sql.jdbc.user=sa</property></para>

          <para><property>isis.persistor.sql.jdbc.password=</property></para>
        </blockquote>

        <para>The driver property must contain the name of the jdbc driver
        class that provides access to your SQL server. Known examples are
        given below in <xref linkend="sec.servers.tested" />.</para>

        <para></para>
      </sect2>
    </sect1>

    <sect1>
      <title>Mappers</title>

      <para>For persistance, classes are introspected and all properties
      recursively introspected to value types. Thus, if a property stores a
      reference to a class, that class's properties are introspected,
      etc.</para>

      <para>By default, the value types are mapped onto SQL data types, as
      determined by the mappers. Default mappers are provided by
      AutoMapperFactory.</para>
    </sect1>

    <sect1>
      <title></title>

      <para></para>
    </sect1>
  </chapter>

  <chapter id="ch.supported.dbs">
    <title>Supported Database Servers</title>

    <abstract>
      <para>Which SQL database servers have been used?</para>
    </abstract>

    <sect1>
      <!--content: List of database servers tested.-->

      <title id="sec.servers.tested">Tested</title>

      <para>The following database servers are tested in the object store
      integration tests:<itemizedlist>
          <listitem>
            <para>HSQLDB (tested against 1.8.0.10)</para>
          </listitem>

          <listitem>
            <para>Postgresql (tested on 8.3.12-ubuntu9.04)</para>
          </listitem>

          <listitem>
            <para>MySQL (tested on 5.1.31-1ubuntu2)</para>
          </listitem>

          <listitem>
            <para>Microsoft SQL Server 2008 (Only from 2008 is DATE and TIME
            supported)</para>
          </listitem>
        </itemizedlist></para>

      <sect2>
        <title>HSQLDB</title>

        <para></para>
      </sect2>

      <sect2>
        <title>Postgresql</title>

        <para><blockquote>
            <para><property>isis.persistor.sql.jdbc.driver=org.hsqldb.jdbcDriver</property></para>

            <para><property>isis.persistor.sql.jdbc.connection=jdbc:hsqldb:file:hsql-db/tests</property></para>

            <para><property>isis.persistor.sql.jdbc.user=sa</property></para>

            <para><property>isis.persistor.sql.jdbc.password=</property></para>
          </blockquote></para>
      </sect2>
    </sect1>

    <sect1>
      <title>Tested values</title>

      <para>The following value types have been tested (stored and
      retrieved):</para>

      <itemizedlist>
        <listitem>
          <para>standard values: integer, short, long (INT), float, double
          (FLOAT), char (CHAR(2)).</para>
        </listitem>

        <listitem>
          <para>standard classes: Money ([does not work]), Percentage (FLOAT),
          Password (VARCHAR(12)), Color (INT), String (VARCHAR (65)).</para>
        </listitem>

        <listitem>
          <para>Special value mappers:</para>

          <itemizedlist>
            <listitem>
              <para><code>org.apache.isis.applib.value.date</code> and
              <code>java.sql.date</code> (DATE, via
              <code>org.apache.isis.alternatives.objectstore.sql.jdbc.JdbcDateMapper</code>)</para>
            </listitem>

            <listitem>
              <para>blah Time, DateTime, java.sql.Time, java.util.Date,
              java.sql.Timestamp blah</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>blah</para>
        </listitem>
      </itemizedlist>

      <para>Default automapper is installed by
      <code>org.apache.isis.alternatives.objectstore.sql.FieldMappingFactoryInstaller</code>
      ..</para>

      <para></para>
    </sect1>
  </chapter>

  <appendix>
    <title>Correspondence</title>

    <abstract>
      <para>Who said what, when?</para>
    </abstract>

    <sect1 id="sec.module-ui">
      <title>Email</title>

      <para></para>

      <sect2>
        <title>2011/02/01, Response by Dan Haywood</title>

        <para><remark>At the moment I'm just putting down whatever comes into
        my head, with a view of later editting it into a coherent document,
        but obviously there are questions of level of detail, etc. For
        example, should I really bother with describing what persistance is,
        and how the domain classes are introspected?! </remark></para>

        <para>I don't think so, no.</para>

        <para>That said, if you do find yourself writing "introductory"
        material like this, we can always move it. The place for such stuff
        should probably be the "core" documentation
        (core/src/docbkx/guide/isis-core.xml), which is what I'm chipping away
        at myself.</para>

        <para><remark>Yes to: what SQL data types are used by default, yes to:
        how to override the automappers and provide your own mapper, yes to:
        how collections and parent/child relatonships are handled, etc.
        </remark></para>

        <para>It'd be worth showing examples of all the different types of
        mappings supported, as well as those that are not supported.</para>

        <para>For example:</para>

        <itemizedlist>
          <listitem>
            <para>Id generation - how is that supported?</para>
          </listitem>

          <listitem>
            <para>optimistic locking - how supported?</para>
          </listitem>

          <listitem>
            <para>one&lt;-&gt;many</para>
          </listitem>

          <listitem>
            <para>one&lt;-many</para>
          </listitem>

          <listitem>
            <para>one-&gt;many</para>
          </listitem>

          <listitem>
            <para>two one&lt;-&gt;many relationships between same types A and
            B (if I recall, this isn't supported?)</para>
          </listitem>

          <listitem>
            <para>many&lt;-&gt;many</para>
          </listitem>

          <listitem>
            <para>many-&gt;many - subtype relationships (roll-up, roll-down,
            table per subtype)</para>
          </listitem>

          <listitem>
            <para>polymorphic relationships to interfaces</para>
          </listitem>
        </itemizedlist>

        <para>You could also peruse some of the Hibernate ORM docs for
        examples of mappings there; that might prompt you to consider some
        additional scenarios.</para>

        <para><remark>What else?</remark></para>

        <para>Obviously, any additional entries required in isis.properties to
        enable the SQL object store. In addition, as background it'd be worth
        explaining about the different subcomponents used by the object store:
        the OidGenerator, PersistAlgorithm, TransactionManager Also, I know
        that the JPA object store has to configure a different
        ClassSubstitutor/ObjectFactory, because it leaves the ORM to perform
        cglib proxying. I don't think you have any similar restrictions, but
        it might be worth saying so.</para>
      </sect2>
    </sect1>

    <sect1>
      <title>Edit History</title>

      <para>Last editted: Kevin, 31/01/2011.<!--dd/mm/yyyy--></para>
    </sect1>
  </appendix>
</book>
