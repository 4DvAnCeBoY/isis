~~  Licensed to the Apache Software Foundation (ASF) under one
~~  or more contributor license agreements.  See the NOTICE file
~~  distributed with this work for additional information
~~  regarding copyright ownership.  The ASF licenses this file
~~  to you under the Apache License, Version 2.0 (the
~~  "License"); you may not use this file except in compliance
~~  with the License.  You may obtain a copy of the License at
~~
~~        http://www.apache.org/licenses/LICENSE-2.0
~~
~~  Unless required by applicable law or agreed to in writing,
~~  software distributed under the License is distributed on an
~~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~~  KIND, either express or implied.  See the License for the
~~  specific language governing permissions and limitations
~~  under the License.



Viewers
 
 The <viewer> module is the parent of the different viewer implementations:

 * {{{./dnd/index.html}Drag-n-Drop viewer}}

 The Drag and Drop (DnD) viewer is non-web graphical user interface that employs a desktop metaphor for interacting with domain objects

 * {{{./html/index.html}HTML viewer}}

  The HTML viewer provides a simple, minimally customizable webapp interface for interacting with an Isis domain model.

 * {{{./scimpi/index.html}Scimpi}}

  The <scimpi> viewer is a webapp viewer that out-of-the-box provides a similar interface to that provided by the {{{./html/index.html}HTML viewer}}.
  However, unlike the HTML viewer it allows the user interface to be extensively customized. 

 * {{{./wicket/index.html}Wicket viewer}}

  The <wicket> viewer is a customizable webapp viewer for an Isis domain model, implemented using the {{{http://wicket.apache.org}Apache Wicket}} web framework.

 * {{{./xhtml/index.html}XHTML (Restful) viewer}}

  The <xhtml> viewer provides a RESTful interface to the domain object model, 
  providing XHTML representations of domain objects.  It is implemented as a webapp.

 * {{{./json/index.html}JSON (Restful) viewer}}

  The <json> viewer provides a RESTful interface to the domain object model, 
  providing JSON representations of domain objects.  It is implemented as a webapp.

 * {{{./bdd/index.html}BDD Framework Integration}}

  The <BDD> framework integration provides the ability to story-test the 
  functionality in your domain objects, using a behaviour-driven design (BDD) 
  framework.

  Currently the only supported framework supported is 
  {{{http://concordion.org}Concordion}}, but the design is such that support 
  for other frameworks can easily be added.

 * {{{./junit/index.html}JUnit Integration}}

  The <JUnit> viewer module provides {{{http://junit.org}JUnit4}} integration, 
  allowing unit tests to be written exercising business rules by catching the 
  exceptions thrown by proxied domain objects.
 
 []
