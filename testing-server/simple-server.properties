# ?How do we specify/set up the nakedobjects

nakedobjects.container=org.nakedobjects.NakedObjectsClient
#        NakedObjectsClient nakedObjects = new NakedObjectsClient();

        Configuration configuration = new Configuration(new ConfigurationPropertiesLoader("server.properties", true));
        nakedObjects.setConfiguration(configuration);

        PropertyConfigurator.configure(configuration.getProperties("log4j"));



nakedobjects.container=org.nakedobjects.reflector.java.JavaBusinessObjectContainer

#        JavaBusinessObjectContainer container = new JavaBusinessObjectContainer();
        new SystemClock();

#        TransientObjectStore objectStore = new TransientObjectStore();


nakedobjects.updateNotifier= org.nakedobjects.distribution.SingleResponseUpdateNotifier
#        SingleResponseUpdateNotifier updateNotifier = new SingleResponseUpdateNotifier();
nakedobjects.updateNotifier.factory= org.nakedobjects.distribution.java.JavaObjectDataFactory
#        DataFactory objectDataFactory = new JavaObjectDataFactory();
#        updateNotifier.setFactory(objectDataFactory);

#        JavaObjectFactory objectFactory = new JavaObjectFactory();
#        objectFactory.setContainer(container);

#        OidGenerator oidGenerator = new SimpleOidGenerator();
#        DefaultPersistAlgorithm persistAlgorithm = new DefaultPersistAlgorithm();
#	      persistAlgorithm.setOidGenerator(oidGenerator);


nakedobjects.container.objectManager= org.nakedobjects.object.persistence.defaults.LocalObjectManager
#        LocalObjectManager objectManager = new LocalObjectManager();
nakedobjects.container.objectManager.objectStore= org.nakedobjects.object.persistence.defaults.TransientObjectStore
#        objectManager.setObjectStore(objectStore);
nakedobjects.container.objectManager.objectStore.PersistAlgorithm= org.nakedobjects.object.persistence.defaults.DefaultPersistAlgorithm
nakedobjects.container.objectManager.objectStore.PersistAlgorithm.OidGenerator= org.nakedobjects.object.persistence.defaults.SimpleOidGenerator
#        objectManager.setPersistAlgorithm(persistAlgorithm);
nakedobjects.container.objectManager.CheckObjectsForDirtyFlag= true  
#        objectManager.setCheckObjectsForDirtyFlag(true);

# NOTE - this should be set internally from object manager setting
#        nakedObjects.setObjectManager(objectManager);
#nakedobjects.container.objectManager=nakedobjects.objectManager

nakedobjects.container.reflectionFactory= org.nakedobjects.object.defaults.LocalReflectionFactory
#       LocalReflectionFactory reflectionFactory = new LocalReflectionFactory();
#      nakedObjects.setReflectionFactory(reflectionFactory);

nakedobjects.container.reflectorFactory= org.nakedobjects.reflector.java.reflect.JavaReflectorFactory
#       JavaReflectorFactory reflectorFactory = new JavaReflectorFactory();
#       nakedObjects.setReflectorFactory(reflectorFactory);

nakedobjects.container.objectLoader= org.nakedobjects.object.defaults.ObjectLoaderImpl
#        ObjectLoaderImpl objectLoader = new ObjectLoaderImpl();
nakedobjects.container.objectLoader.pojoAdapterMap= org.nakedobjects.object.defaults.PojoAdapterHashImpl
#        objectLoader.setPojoAdapterMap(new PojoAdapterHashImpl());
nakedobjects.container.objectLoader.objectFactory= org.nakedobjects.reflector.java.JavaObjectFactory
#        objectLoader.setObjectFactory(objectFactory);
nakedobjects.container.objectLoader.objectFactory.Container= org.nakedobjects.reflector.java.JavaBusinessObjectContainer
nakedobjects.container.objectLoader.IdentityAdapterMap= org.nakedobjects.object.defaults.IdentityAdapterMapImpl
#        objectLoader.setIdentityAdapterMap(new IdentityAdapterMapImpl());
#        nakedObjects.setObjectLoader(objectLoader);





nakedobjects.container.nakedObjectSpecificationLoader= org.nakedobjects.object.defaults.NakedObjectSpecificationLoaderImpl
#        NakedObjectSpecificationLoaderImpl specificationLoader = new NakedObjectSpecificationLoaderImpl();

#        nakedObjects.setSpecificationLoader(specificationLoader);

#nakedobjects.serverDistribution=org.nakedobjects.distribution.ServerDistribution
#        ServerDistribution sd = new ServerDistribution();
        sd.setObjectFactory(objectFactory);
        sd.setObjectDataFactory(objectDataFactory);

nakedobjects.serverListener=org.nakedobjects.distribution.xml.ServerListener
#        ServerListener serverListener = new ServerListener();
        serverListener.setUpdateNotifier(updateNotifier);
#        serverListener.setServerDistribution(sd);
nakedobjects.serverListener.serverDistribution=org.nakedobjects.distribution.ServerDistribution

nakedobjects.objectManager.container.objectChangedListener=
        objectManager.addObjectChangedListener(updateNotifier);

        nakedObjects.init();
        
        serverListener.start();



nakedobjects.fixtureBuilder=org.nakedobjects.reflector.java.fixture.JavaFixtureBuilder
#        JavaFixtureBuilder fb = new JavaFixtureBuilder();
nakedobjects.fixtureBuilder.cities=fixtures.CitiesFixture
#        CitiesFixture cities;
nakedobject
        fb.addFixture(cities = new CitiesFixture());
        fb.addFixture(new BookingsFixture(cities));
        fb.addFixture(new ClassesFixture());
        fb.installFixtures();

nakedobjects.debugFrame= org.nakedobjects.utility.InfoDebugFrame
# TODO add closing mechanism
#        InfoDebugFrame debugFrame = new InfoDebugFrame() {
#            public void dialogClosing() {
#               System.exit(0);
#            }
#       };
#        DebugInfo debugInfo = objectManager;
nakedobjects.debugFrame.info =nakedobjects.container.objectManager
#        debugFrame.setInfo(debugInfo);
        debugFrame.setBounds(10, 10, 1000, 800);
        debugFrame.refresh();
        debugFrame.show();
