<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section SYSTEM "./documentation.dtd">
<section>
  <title>Configuration with Properties Files</title>

  <subheading>Editing configuration files</subheading>

  <para>The Naked Objects configuration is just a Java properties file and
  therefore contains just pure ASCII text that can be edited with any simple
  text editor. Any line that starts with a hash (#), or is blank, is ignored.
  Each configuration property consists of a simple key-value pair separated by
  an equals sign (=), using backslashes (\) to continue onto the next line if
  necessary. The example below shows such a file that could be used to
  configure a standalone application, specifying details for the GUI.</para>

  <property-listing>##
#  Exploration configuration
##

# GUI
nakedobjects.viewer.skylark.font.title=Serif-bold-18
nakedobjects.viewer.skylark.font.label=Serif-bold-10</property-listing>

  <para>All the properties relating to the Naked Objects framework are
  prefixed with <em>nakedobjects</em> which immediately distinguishes them
  from properties for other systems, for example Log4J whose properties start
  with <em>log4j</em>.</para>

  <subheading>Configuration files</subheading>

  <para>Configuration files for Naked Objects are conventionally named with a
  <path>.properties</path> suffix and are normally placed in the working
  directory, i.e. alongside the <path>images</path> directory. A default
  configuration file is sought if none is specified. They are:
  <path>client.properties</path> when the <class>Client</class> class is run;
  <path>server.properties</path> when the <class>Server</class> class is run;
  and <path>standalone.properties</path> when <class>Standalone</class> is
  run.</para>

  <para>To specify a configuration file when starting the framework - as a
  client or server - the configuration file is specified as the only command
  line parameter when running Java. If specified, the system will not start
  unless that configuration file is found. If no file is specified, then the
  default configuration file is sought and must also be found.</para>

  <para>When running a <class>JavaExploration</class> class the configuration
  file is normally only used to change font sizes and control logging. These
  properties are usually set up in the default configuration file
  <path>nakedobjects.properties</path> so that they apply to all exploration
  applications that are being run. However, the
  <method>configurationFile</method> method in <class>JavaExploration</class>
  can be overriden so it returns the path for another configuration file to be
  used instead.</para>

  <program-listing>protected String configurationFile() {
      return "another.properties";
}</program-listing>

  <para>If you need your exploration subclass to be able to accept a
  configuration file on the command line then the following code can be added.
  It simple captures the file name in the <method>main</method> method, stores
  it, and later passes it to the <class>Exploration</class> class via the
  aforementioned <method>configurationFile</method> method. If no command line
  parameter is provided then the default (<path>exploration.properties</path>)
  is used.</para>

  <program-listing>	static String configFile;

	public static void main(String[] args) {
		configFile = args.length &gt;= 1 ? args[0] : "exploration.properties";
		:
		:
	}

	protected String configurationFile() {
		return configFile;
	}</program-listing>
</section>