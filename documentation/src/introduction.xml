<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section SYSTEM "./documentation.dtd">
<section numbered="on">
  <title>Introduction - Naked Objects Applications</title>

  <description />

  <para>This manual is about the Naked Objects framework, an open source
  Java/.Net implementation of the naked objects pattern. This pattern states
  that you should design a business system solely from entity objects that are
  instantiable, persistent and behaviorally complete. These object should then
  be exposed directly to the user in manner where the user interface is 100%
  auto-generated and all user actions take the noun-verb form. Following this
  pattern gives rise to two sets of benefits. The first, is a better product
  where there is greater agility due to the behaviorally-complete objects and
  a more expressive user interface. And, the second, is a better development
  process where there is faster prototyping and development, a common language
  between developer and user, and automated user acceptance testing.</para>

  <para>When you first see a Naked Objects applications you will notice that
  the system is presented in a very simple and straightforward manner. It will
  display a set of classes and a number of instances of those classes. Every
  object is displayed as a titled icon and each can be viewed in ways that are
  suitable for that object, e.g. a collections can be viewed as a list or a
  table, and most objects can at least be shown either as the basic titled
  icon or as a form. When a form or table is shown, its contents are displayed
  in the same way, i.e. as icons, tables and forms, representing the
  associations between the objects and their content. Any value types within
  an object, however, are simply displayed as editable fields, e.g. text
  fields, check boxes, drop down list, etc.</para>

  <figure fileref="introduction/no-example.png">
    <para>This screenshot shows a typical Naked Objects application in use. It
    is a expense claim system that allows employees to prepare and managers to
    maintain expense claims. Each <em>icon</em> on the screen represents an
    <em>object</em> where the larger ones on the left represent the classes,
    or types, of objects available in the system.</para>

    <para>Each class of object that the user can start working with (create
    new instances, find existing instance etc) is displayed in the classes
    window (on the left). Each object created is available to the user and
    when displayed appears as shown here in the remaining windows.</para>

    <para>Each object can be viewed in ways that are suitable for that object
    - collections can be viewed as tables and lists, customers as forms etc.
    Each business object also has a menu which is used to access the
    capabilities of that object. The value objects - text, numbers, dates -
    held by a business object can be edited using the keyboard and
    mouse.</para>

    <para>The business objects can also be dragged and dropped onto other
    business objects or into empty fields that require that type of
    object.</para>
  </figure>

  <para>When you use a Naked Objects application there are only a small number
  of things that you can do, and yet all the functionality is immediately
  available. Text fields can be edited to assign values to the objects, and
  icons can be dragged into reference fields to set up associations between
  those objects. Right-clicking on an icon provides you with a pop-up menu
  makes some of the behaviours for that object available, while dragging an
  icon and dropping (<ital>drag-and-drop</ital>) it on another icon provides
  the rest. In addition to being able to invoke an object's behaviour the
  pop-up menu also provides a way of changing how the object is viewed, and
  generic abilitys such as removing associations and destroying objects where
  relevant.</para>

  <para>When you look at the code for a Naked Objects application you will
  notice that there is very little, and of what there is, absolutely none of
  it is to do with the user interface. A Naked Objects application is just a
  set of classes that represent the objects that the user wants to interact
  with. With a little further careful study you will see that there is a 1:1
  correspondence between the types of icon that show up on the screen and
  these classes. There is also an implicit 1:1 correspondence between those
  icons and the instances of those classes.</para>

  <para>Looking at the methods in those classes you will then see that there
  is a 1:1 correspondence between each fields and it's accessor (and,
  sometimes, a mutator) method, and a 1:1 correspondence between each of the
  pop-up menu options/drag-and-drop actions and the methods prefixed by
  'action'. In addition to these you can also find method that apply some form
  of control over the availability and useability of the classes, objects,
  fields and options, i.e. controlling whether something is available to the
  current user, or whether something can be done while the object is in its
  current state.</para>

  <para>To build such system using Naked Objects you concentrate on those
  business objects - Customer, Call, Order, Invoice, Flight, Airport, Plane,
  Crew etc - and leave the interface and persistence to the framework. These
  objects are defined as Java classes following a small number of coding
  conventions and the implementation of an interface provided by Naked
  Objects. An example of such a class is shown below.</para>

  <program-listing>package ecs.delivery; import org.nakedobjects.object.*;
  import org.nakedobjects.object.value.*; public class CreditCard { private
  String nameOnCard; private String number; private String expires; public
  void setExpires(String expires) { this.expires = expires; } public final
  String getExpires() { return expires; } public void setNameOnCard(String
  nameOnCard) { this.nameOnCard = nameOnCard; } public final String
  getNameOnCard() { return nameOnCard; } public void setNumber(String number)
  { this.number = number; } public final String getNumber() { return number; }
  public String title() { String num = number.stringValue(); int pos =
  Math.max(0, num.length() - 5); return "*****************".substring(0, pos))
  + num.substring(pos); } }</program-listing>
</section>