<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section SYSTEM "../documentation.dtd">
<section>
  <title>Repository</title>

  <para>There are a number of implementation of <class>NakedObjects</class>
  within the NOF, specifically one for client side use
  (<class>NakedObjectsClient)</class>, which is for use in applications where
  there is one of each component and hence no sharing. The other main
  implementation is for server use (<class>NakedObjectsByThread</class>),
  which keeps the one instance of each component for each thread in
  use.</para>

  <list>
    <item2>
      <label><class>org.nakedonbjects.NakedObjectsClient</class></label>

      <para>a single-threaded version that simply stores all the component
      references and will return those components regardless of the thread
      that it call with.</para>
    </item2>

    <item2>
      <label><class>org.nakedonbjects.NakedObjectsByThread</class></label>

      <para>a multi-threaded version that stores a unique reference to each
      for each thread in use. This way every thread has it own configuration,
      loader, object manager etc.</para>
    </item2>

    <item2>
      <label><class>org.nakedonbjects.NakedObjectsPipe</class></label>

      <para>a dual context version that provides one context for the server
      thread, and a second context for all other threads. This is used for
      running a client-server configuration in a single memory space, where
      the threads are used to keep the components separate.</para>
    </item2>
  </list>

  <subheading>Extending the Repository</subheading>

  <para>To create your own repository extend the
  <class>org.nakedobjects.NakedObjects</class> and implement the set methods
  for initialising the references, and the set of methods
  (<method>configuration</method>, <method>currentSession</method>,
  <method>objectLoader</method>, <method>objectManager</method>, and
  <method>specificationLoader</method>) that pass up the component references
  to the static accessors.</para>
</section>