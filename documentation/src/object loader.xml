<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section SYSTEM "./documentation.dtd">
<section>
  <title>Object Loader</title>

  <para>The object loader manages the domain objects in local memory, creating
  an adapter for each domain object that is in use within the system. The NOF
  only knows about the adapters and hence uses these throughout the system,
  and interacts with the domain object indirectly through the adapter. The
  adapters use the reflector to actually manipulate the domain objects. There
  should only ever be one adapter for any domain objects, so the second job
  for the loader is ensure that any time that a adapter is needed for a domain
  object it must find the existing one, if it exists, or create a new
  one.</para>

  <para>Every persistent object within the NOF has a unique identifier that is
  used identify each an every object within the object manager and when
  objects are passed between nodes on the network. Using such an identifier
  the NOF can persist relationships between objects in the persistance layer,
  and see two physical objects on separate machines as being the same logical
  object.</para>

  <subheading>How the Loader Works</subheading>

  <para>The loader holds two maps: one for the association between the domain
  object and its adapter (the <class>NakedObject</class> instance) - the
  <ital>adapter map</ital>; and another for the association between the OID
  and the adapter - the <ital>identity map</ital>. Two sets of methods are
  provided for adding objects to these maps and retrieving them later. The
  <method>create...</method> and <method>recreate...</method> methods
  generally take a domain object and return an adapter, adding the association
  to the adapter map in the process. If the object is persistent and OID is
  passed in then an association is also added to the identity map. The
  <method>get...</method> methods provide a way of retrieving known adapters
  from loader for a specified domain object or an OID.</para>

  <comment>Expand on the process of creating an adapter. - values,
  collections, objects</comment>

  <para>To keep the loader from forever growing an <method>unload</method>
  method is provided.</para>

  <para>The rest of the methods deal with the changing states of the adpaters,
  as they become persistent or are lazily loaded into memoy. When an object is
  made persistent, and is being added to persistent memory, the
  <method>madePersistent</method> method is called, enabling the loader to add
  an association to its identity map for the existing adapter and its new
  identity or OID. The <method>start</method> and <method>end</method> methods
  provide a way for the persistence and distribution mechanisms to change the
  resolved state of of lazily loaded objects in a controlled fashion,
  informing the rest of the framework whether an object is fully loaded or not
  and whether changes should be recorded or not.</para>

  <comment>Detail how ResolvedState is used &amp; what the possible states
  are</comment>

  <subheading>Installation</subheading>

  <para>The naked objects repositry needs to have a object loader installed.
  To install the loader call the <method>setObjectLoader method</method> on
  <class>NakedObjects</class> passing in an instance of
  <class>org.nakedobjects.object.NakedObjects</class>. The supplied loader -
  <class>org.nakedobjects.object.defaults.ObjectLoaderImpl</class> - is
  normally suitable, so a common configuration would be:-</para>

  <program-listing>objectLoader = new ObjectLoaderImpl();
:
:
NakedObjects.setObjectLoader(objectLoader);</program-listing>

  <subheading>Implementations</subheading>

  <para>The implementation provided with the NOF delegates its mapping and
  creation of adapters to four separate delegates: PojoAdapterMap,
  IdentityAdapterMap, ObjectFactory and AdapterFactory. These are set up using
  their accessor methods<comment>should we add a reference to configuration
  and running section?</comment>.</para>

  <subheading>Creating a New Object Loader</subheading>

  <para>Implement the interface
  org.nakedobjects.object.NakedObjectLoader.</para>

  <comment><para>Add the method details from the interface
  declaration</para></comment>
</section>