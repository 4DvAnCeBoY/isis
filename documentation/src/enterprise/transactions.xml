<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section SYSTEM "../documentation.dtd">
<section>
  <title>How to Ensure Transactional Integrity</title>

  <para>The NOF provides a way to automatically demarcate transaction
  boundries and manage transactions for action methods and the setting of
  fields. By decorating the reflection peers (ActionPeer, OneToOnePeer and
  OneToManyPeer) we can detect when the framework excecute actions or
  manipulates fields, on the user's behalf, and ask the object persistor to
  run each as a tranactional unit.</para>

  <subheading>How it works</subheading>

  <para>The reflection peers <class>ActionTransaction</class>,
  <class>OneToOneTransaction</class> and <class>OneToManyTransaction</class>
  (all from the <class>org.nakedobjects.object.transaction</class> package)
  call the <method>startTransaction</method> when their
  <method>execute</method> and <method>set</method> methods are called, and
  calls <method>endTransaction</method> before returning. If the decorated
  peer throws an exception when it is called by the decorator then
  <method>abortTransaction</method> is called instead of
  <method>endTransaction</method>.</para>

  <subheading>Installation</subheading>

  <para>To install transaction demarcation you need to add the peer factory
  <class>org.nakedobjects.object.transaction.TransactionPeerFactory</class> to
  the specification loader, along with any other needed peer factories. The
  following example show this:-</para>

  <program-listing>JavaSpecificationLoader specificationLoader = new JavaSpecificationLoader();

ReflectionPeerFactory[] factories = new ReflectionPeerFactory[] {
    new TransactionPeerFactory()
};
specificationLoader.setReflectionPeerFactories(factories);</program-listing>
</section>