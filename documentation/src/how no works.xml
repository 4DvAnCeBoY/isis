<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section SYSTEM "./documentation.dtd">
<section numbered="on">
  <title>How Naked Objects Works</title>

  <comment>This document details how to get started with Naked objects -
  covering:</comment>

  <intro>
    <para>Naked Objects now works with pure Java objects rather than being
    having to extend, and use, specific classes defined within the Naked
    Objects Framework.</para>
  </intro>

  <para>The following set of screenshots shows the features of Naked
  Objects.</para>

  <subheading>Classes</subheading>

  <para>An 'application' consists of nothing more than a set of business
  object classes. All user operations take the form of actions invoked upon an
  instance of one of those classes or upon the class as a whole. Any class
  that could form the start-point of a user activity is shown as a class icon
  on the left of the window.</para>

  <figure width="50%" 
        fileref="intro/classes.png"
        label="The opening screen of the Naked Objects example showing the six classes" />

  <list>
    <para>These are the six business classes that constitute the prototype
    reservations system.</para>

    <para>The window on the right-hand side represents a collection of
    objects: in this case, all seven of the cities in the system.</para>

    <para>Right-clicking on any class icon pops up a menu of class
    methods.</para>

    <para>The top three options represent class methods that can be performed
    on the Booking class. These are the class methods that the reflector has
    picked up.</para>

    <para>The bottom three methods are exploration options automatically
    provided by the framework for creating new instances, finding particular
    instances or showing all instances of that class. These options are only
    visible when running exploration, and hence will not be available in a
    delivered version. Of course it possible to add methods to your classes to
    do these things if it is necessary.</para>

    <para>There is one Java class corresponding to each of the business object
    classes presented to the user. The label on the user's class icon is (by
    default) automatically derived from Java class name. Here CreditCard has
    been converted into Credit Cards. (Irregular plurals must be manually
    specified.)</para>

    <para>The only code in this project that is not a business class is
    EcsExploration and its Fixtures which are needed to run the application.
    When the application is deployed this EcsExploration will be replaced by a
    simple configuration file.</para>
  </list>

  <figure fileref="intro/example-code.png"
          label="The code for this example is in example\org\nakedobjects\example\ecs" />

  <subheading>Instances</subheading>

  <para>For most business scenarios, the user of the system will be dealing
  with individual instances of the business classes, and sometimes with
  collections of instances of the same type. By default, an instance uses the
  same icon as its class, but has an individual title. It is also possible to
  vary the icon according to the identity or the status of the object.</para>

  <figure fileref="intro/instances.png"
          label="Instances of customer (top-left window) and an open instance." />

  <list>
    <para>By default, instances use the icon of their class, but instances
    have titles to identify them. The instances in the list of customers are
    as icon-only views.</para>

    <para>The specific customer instance is shown in it form view (the default
    view for all open objects).</para>

    <para>The menu actions shown on the larger window provides different ways
    to view the object. The viewing options offered will depend upon the type
    of object. All the viewing options are created automatically by the
    framework.</para>

    <para>Instances have titles that are usually derived from one or more of
    their identifying attributes and/or their current state.</para>
  </list>

  <subheading>Fields</subheading>

  <para>Open a view of any object and you will see a set of fields. Some of
  these fields contain simple values (such as dates, numbers or text strings),
  which the user may be able to enter or edit. Other fields will contain
  business objects, shown as icons. Even where an icon appears inside another
  object view, that icon still represents a fully functional object: you can
  invoke its behaviours in situ or open up a new view of it.</para>

  <figure fileref="intro/fields.png"
          label="Two windows showing empty and full fields" />

  <list>
    <para>The top window shows a new location object with text fields for the
    street address and its known-as identifier.</para>

    <para>The red triangles show fields where objects can be paced. A city
    object can be dropped onto the empty city field, or the grey downward
    triangle can be click to bring up a list of available cities, one of which
    can be selected by clicking on it.</para>

    <para>The lower window contains a complete location object with entries in
    the text fields and the reference fields, ie the city field contains
    another business object - the city Boston.</para>

    <para>When you attempt to drag the right type of object into a field,
    (below, a Customer) the drop zone will flash green. A red flash indicates
    that the framework will not let you drop that object there, either because
    it is the wrong type or due to some other programmer-specified
    rule.</para>
  </list>

  <figure fileref="intro/dropping-field.png"
          label="Dropping an object into a field where such a drop is valid." />

  <subheading>Associations</subheading>

  <para>We have just seen how a field can contain a reference to another
  business object. Naked Objects can also handle more complex relationships
  such as multiple associations, where one object knows multiple instances of
  another type, and bi-directional associations, where two objects both know
  about each other.</para>

  <figure fileref="intro/associations.png"
          label="Two views showing one-to-many and bidirectional associations" />

  <list>
    <para>The larger window, for a Customer shows the set of Locations
    associated with it.</para>

    <para>A new Location can be associated by dropping it left-hand icon at
    the top of the set.</para>

    <para>Right clicking on any member of this collection offers the option to
    Clear Association, ie to remove that element from the list.</para>

    <para>This also shows an example of a bi-directional association. When a
    Customer is associated with a Location, a reference to that Location is
    automatically added to the customer's list of locations. Similarly when
    the location is removed from the list (using the Clear Association option)
    the item is removed from the list and the reference in the location, back
    to the customer, is cleared.</para>

    <para>A multiple association is managed by an collection object, and is
    reflectively revealed to the framework through a series of methods,
    including one that adds objects to the collection.</para>

    <para>The reflection mechanism looks for special associate and dissociate
    method to help set up and manage bi-directional associations (whether
    singular or multiple).</para>
  </list>

  <subheading>Behaviour</subheading>

  <para>The two principal mechanisms by which a user can invoke a business
  behaviour are by selecting an action from a pop-up menu on a business object
  and by dragging one object onto another. (The latter is not the same as
  dragging an object into an empty field inside an object.) It is also
  possible to invoke business behaviours at the class level - through the
  pop-up menu on that class - or by dragging an instance icon onto the class
  icon.</para>

  <figure fileref="intro/behaviour.png"
          width="50%"
          label="Each object displays all its behaviours when you right-click." />

  <list>
    <para>The pop-up menu for an object shows the business methods that can be
    applied to that object.</para>

    <para>An ellipsis ... following the menu action indicates that this will
    return another object as a new window.</para>

    <para>Dragging Home, Boston directly onto Logan Airport, Boston will
    trigger the creation of a new Booking that uses those two locations as
    Pick Up and Drop Off respectively. This shortcut is most useful when both
    locations show up in a list of frequently-used locations inside a
    Customer.</para>
  </list>

  <figure fileref="intro/drag-and-drop.png" />

  <subheading>Control</subheading>

  <para>Naked objects empower the user but that does not imply an absence of
  controls. Different users will need access to different objects, different
  fields within those objects and different behaviours on those objects. It
  will also be necessary to enforce certain business rules, such as preventing
  an action from being invoked unless the object is in the right state. In
  Naked Objects these forms of control are provided by the reflection
  mechanism. Again specific methods are recognised and will affect the way the
  framework works.</para>

  <figure fileref="intro/control.png"
          label="Menus options are greyed out to show they are unavailable." />

  <list>
    <para>Here, the Return Booking option is greyed out, but the user can Copy
    Booking. A return booking canot be created as the booking is not yet
    complete, whereas there is enough useful information to make it useful to
    create a copy.</para>

    <para>Selecting the Confirm option will change the state of the booking to
    confirmed, and will therefore allow the Return Booking to be selected next
    time the use brings up the booking object menu.</para>
  </list>

  <figure fileref="intro/control2.png" />
</section>