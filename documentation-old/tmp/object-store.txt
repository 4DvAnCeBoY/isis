Using the object store a client asks for a set of instances by creating a finder object 
and calling getInstances().  This returns an InstanceCollection with all the found 
instances, where each instance is unresolved.  


We could split the persist/distribute by splitting the mechanism into two parts.  Where
the client facing interface has the methods in the current ObjectStore (getInstances, 
makePersistent, resolve etc) using NakedObjects and collections.  The persistent storage
facing interface would then have methods that take the object's data, Vectors, Strings,
ints, OIDs etc.  The former would deconstruct/reconstruct the naked objects into data
for the storage mechnism to use.

Working locally they would link together directly.  Remotely the data woud pass back 
and forward over the network between the two interfaces.

How would this work for object based storage mechnisms?  How would object seaching
take place?






Distribution in naked objects means having the objects in two places at once: one copy
on the client and one copy on the server.  They are replicated.



MAKE PERSISTENT

Unlike at other times the process for saving objects is different when the object is not already
persistent.  When an new object is to be made persistent initially it is necessary to save the
whole object graph.  Whereas when an objects state is re-saved only the details from that
object need to be persisted: each referenced object takes care of its own persistence.

When an object is made persistent it needs to have its OID defined, and all its non-persistent
relations persisted as well.

The problem that arises when persisting the graph of a new object occurs when an object
within the graph refers to another object in the graph, as this can cause circular persisting.

