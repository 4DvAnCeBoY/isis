<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
-->
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"file:./src/docbkx/dtd-4.5/docbookx.dtd">
<book>
  <bookinfo>
    <title><?eval ${docbkxGuideTitle}?></title>

    <subtitle><?eval ${docbkxGuideSubTitle}?></subtitle>

    <releaseinfo><?eval ${project.version}?></releaseinfo>

    <authorgroup>
      <author>
        <firstname>Dan</firstname>

        <surname>Haywood</surname>
      </author>
    </authorgroup>

    <legalnotice>
      <para>Permission is granted to make and distribute verbatim copies of
      this manual provided that the copyright notice and this permission
      notice are preserved on all copies.</para>
    </legalnotice>
  </bookinfo>

  <!-- front matter -->

  <toc></toc>

  <preface id="preface">
    <title>Preface</title>

    <para><emphasis>Apache Isis</emphasis> is designed to allow programmers
    rapidly develop domain-driven applications following the <ulink
    url="http://en.wikipedia.org/wiki/Naked_Objects">Naked Objects</ulink>
    pattern. It is made up of a core framework plus a number of alternate
    implementations, and supports various viewers and object stores.
    <emphasis>Apache Isis</emphasis> is hosted at the <ulink
    url="http://incubator.apache.org/isis">Apache Foundation</ulink>, and is
    licensed under <ulink
    url="http://www.apache.org/licenses/LICENSE-2.0.html">Apache Software
    License v2</ulink>.</para>

    <para>If all you are interested in is just using
    <emphasis>Isis</emphasis>, then please refer to <ulink
    url="http://incubator.apache.org/isis/where-to-start.html">where to start?
    page</ulink> on the Isis site. This will explain how to get going using a
    Maven archetype.</para>

    <para>This guide though, is for those who want to go a little deeper. It
    breaks into three parts:</para>

    <itemizedlist>
      <listitem>
        <para>the first part is for those just wanting to build either
        <emphasis>Apache Isis</emphasis> or its site+documentation from
        source, without necessarily contributing any changes back to the
        projects;</para>
      </listitem>

      <listitem>
        <para>the second part is for those who are intending to contribute
        changes back. It deals with such matters as setting up the standard
        development environment, writing documentation and site documentation;
        and releasing <emphasis>Isis</emphasis>.</para>
      </listitem>

      <listitem>
        <para>the third part covers the release process, and is for those
        contributors who want to be able to make Isis releases (snapshot or
        formal Apache releases)</para>
      </listitem>
    </itemizedlist>

    <para>Note that some of this material also appears, in different form, on
    the <emphasis>Apache Isis</emphasis> wiki:</para>

    <itemizedlist>
      <listitem>
        <para><ulink
        url="https://cwiki.apache.org/confluence/display/ISIS/SettingUpDevelopmentEnvironment">setting
        up the development environment</ulink></para>
      </listitem>

      <listitem>
        <para><ulink
        url="https://cwiki.apache.org/confluence/display/ISIS/BuildProcess">build
        process</ulink></para>
      </listitem>

      <listitem>
        <para><ulink
        url="https://cwiki.apache.org/confluence/display/ISIS/SmokeTest">smoke
        test</ulink></para>
      </listitem>
    </itemizedlist>

    <para>The intent is for this guide to be definitive, but you may find that
    the wiki may have slightly more up-to-date (or indeed less-out-of-date)
    information. At any rate, it's worth checking the wiki out too...</para>
  </preface>

  <!-- main content -->

  <part id="prt.Building">
    <title>Building</title>

    <partintro>
      <para>This part of the contributors guide describes how to build
      <emphasis>Apache Isis</emphasis> from source, for example, just to get a
      better understanding of how the project works, or because your
      organization requires any open source projects to be re-built
      in-house.</para>

      <para>This part of the guide also covers how to build
      <emphasis>Isis</emphasis>' site and documentation (along with
      prerequisite software that needs to be installed prior to doing
      this).</para>

      <para>If you are looking to contribute to <emphasis>Apache
      Isis</emphasis> itself, the information in this part of the guide does
      still apply, but see also <xref linkend="prt.Contributing" /> for much
      more information.</para>
    </partintro>

    <chapter id="chp.PrerequisiteSoftware">
      <title>Prerequisite Software</title>

      <abstract>
        <para>The software needed to build <emphasis>Apache
        Isis</emphasis>.</para>
      </abstract>

      <para>This chapter describes the prerequisite software needed to build
      <emphasis>Apache Isis</emphasis> modules, and its site and
      documentation.</para>

      <sect1>
        <title>Command Line Software</title>

        <para>Install the following software (you may well already have these
        installed):</para>

        <itemizedlist>
          <listitem>
            <para>a <ulink
            url="http://subversion.tigris.org">Subversion</ulink> <ulink
            url="http://subversion.tigris.org/">client</ulink> (the
            <filename>svn</filename> executable)</para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://www.oracle.com/technetwork/java/javase/downloads/index.html">Java
            6</ulink></para>

            <para>and setup the <varname>JAVA_HOME</varname> environment
            variable;</para>
          </listitem>

          <listitem>
            <para><ulink url="http://maven.apache.org">Maven
            2.2.1</ulink>,</para>

            <para>and setup the <varname>MAVEN_HOME</varname> environment
            variable.</para>

            <para>Highly recommended is to also setup the
            <classname>MAVEN_OPTS</classname> environment variable, to:</para>

            <programlisting>-Xms512m -Xmx2048m -XX:PermSize=256m -XX:MaxPermSize=512m</programlisting>

            <para><note>
                <para>At the time of writing, Maven 3.0 was not currently
                supported; see <ulink
                url="https://issues.apache.org/jira/browse/ISIS-11">ISIS-11</ulink>.</para>
              </note></para>
          </listitem>
        </itemizedlist>

        <para>Finally, add Subversion's <filename>svn</filename> executable
        and Maven's <filename>mvn</filename> executable to your
        <varname>PATH</varname> environment variable.</para>
      </sect1>

      <sect1 id="sec.SettingUpIde">
        <title>IDE</title>

        <para>Apache Isis is built using Maven, so it isn't strictly necessary
        to use an IDE. However, we do strongly recommend it.</para>

        <para>All of the main IDEs provide Maven support: NetBeans and
        IntelliJ "natively", while Eclipse provides support through both the
        m2eclipse or the q4e plugins.</para>

        <para>Install each of these from their respective update sites.</para>

        <sect2>
          <title>Setting up Eclipse IDE</title>

          <sect3>
            <title>Base Install</title>

            <para>Install a recent version of <ulink
            url="http://eclipse.org">Eclipse</ulink> (eg 3.5 or 3.6). The
            standard Java edition is sufficient, but you can install the JEE
            enterprise edition if you wish.</para>

            <para>As a minimum, Eclipse requires the
            <emphasis>subclipse</emphasis> and <emphasis>m2eclipse</emphasis>
            plugins. These should be installed next.</para>
          </sect3>

          <sect3>
            <title>Subclipse</title>

            <para>The <ulink
            url="http://subclipse.tigris.org">subclipse</ulink> plugin
            provides <emphasis>Subversion</emphasis> support, and can be
            installed from its <ulink
            url="http://subclipse.tigris.org/update_1.6.x">update
            site</ulink>.</para>
          </sect3>

          <sect3>
            <title>m2eclipse</title>

            <para>Normally Eclipse uses its own <filename>.project</filename>
            and <filename>.classpath</filename> files to (respectively) define
            the layout of the project and the classpath for a project. With
            Maven however this same information is available in the
            <filename>pom.xml</filename>.</para>

            <para>What the <ulink
            url="http://m2eclipse.codehaus.org">m2eclipse</ulink> plugin does
            is generate the <filename>.project</filename> and
            <filename>.classpath</filename> files on-the-fly, and uses
            Eclipse's own "Classpath Container" to reference
            <emphasis>Maven</emphasis> modules in the local repository.
            <emphasis>m2eclipse</emphasis> will also download any referenced
            modules from remote repositories into the local repository.</para>

            <para><emphasis>m2eclipse</emphasis> can be installed from its
            <ulink url="http://m2eclipse.sonatype.org/sites/m2e">update
            site</ulink>.</para>

            <para>Once installed, we recommend that you point m2eclipse back
            to your local Maven installation, using Windows &gt; Preferences
            &gt; Maven &gt; Installations:</para>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/dev-env/m2eclipse-preferences-maven-installation.png"
                           scale="50" />
              </imageobject>
            </mediaobject>
          </sect3>

          <sect3>
            <title>Other Plugins</title>

            <para>There are many other plugins that you can install with
            Eclipse. You might want to check out:</para>

            <itemizedlist>
              <listitem>
                <para><ulink url="???">EasyShell</ulink>, to provide easy
                integration with the operating system shell and command
                line.</para>
              </listitem>

              <listitem>
                <para><ulink
                url="http://www.soyatec.com/euml2/">Soyatec</ulink>, for a
                free (or commercial) <acronym>UML</acronym>/code live
                synchronization (a la the venerable <ulink
                url="http://www.borland.com/us/products/together/index.html">TogetherJ</ulink>).</para>

                <para>To install the free edition, it is necessary to install
                the <acronym>GMF</acronym> at the same time (see this <ulink
                url="http://www.soyatec.com/forum/viewtopic.php?t=898&amp;sid=1a1388b502a12114e6b8f28d7bbdee2a">forum
                posting</ulink>).</para>
              </listitem>
            </itemizedlist>

            <para>The following diagram shows the context menu that
            <emphasis>EasyShell</emphasis> adds within package
            explorer:</para>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/dev-env/easyshell-integration.png"
                           scale="50" />
              </imageobject>
            </mediaobject>

            <para>Key bindings for the <emphasis>EasyShell</emphasis> commands
            can be set up using Windows &gt; Preferences &gt; General &gt;
            Keys:</para>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/dev-env/easyshell-keys.png"
                           scale="45" />
              </imageobject>
            </mediaobject>

            <para></para>

            <para>In addition, if you are also a contributor to
            <emphasis>Isis</emphasis>, then there are some additional plugins
            (FindBugs, CheckStyle, PMD) that should be installed for enforcing
            coding standards; see <xref linkend="chp.CodingQuality" />.</para>
          </sect3>

          <sect3>
            <title>Templates</title>

            <para>Apache Isis provides a number of code templates which will
            reduce the typing when applying standard patterns.</para>

            <table>
              <title>Isis Code Templates</title>

              <tgroup cols="3">
                <colspec colwidth="100" />

                <colspec colwidth="60" />

                <colspec />

                <thead>
                  <row>
                    <entry align="center">Template</entry>

                    <entry align="center">Prefix</entry>

                    <entry align="center">Description</entry>
                  </row>
                </thead>

                <tbody>
                  <row>
                    <entry><ulink
                    url="http://incubator.apache.org/isis/ide/eclipse/templates/isis-templates.xml">isis-templates.xml</ulink></entry>

                    <entry><literal>is</literal></entry>

                    <entry>for writing <emphasis>Isis</emphasis> domain
                    objects, eg properties, collections, actions etc.</entry>
                  </row>

                  <row>
                    <entry><ulink
                    url="http://incubator.apache.org/isis/ide/eclipse/templates/junit4-templates.xml">junit4-templates.xml</ulink></entry>

                    <entry><literal>ju</literal></entry>

                    <entry>for writing <ulink url="http://junit.org">JUnit
                    4</ulink> tests, eg <classname>@Test</classname> methods,
                    <classname>@Before</classname> methods etc.</entry>
                  </row>

                  <row>
                    <entry><ulink
                    url="http://incubator.apache.org/isis/ide/eclipse/templates/junit4-templates.xml">jmock2-templates.xml</ulink></entry>

                    <entry><literal>jm</literal></entry>

                    <entry>for writing unit tests that use <ulink
                    url="http://jmock.org">JMock2</ulink>, eg mockery, context
                    etc</entry>
                  </row>
                </tbody>
              </tgroup>
            </table>

            <para>These can be downloaded from the <ulink
            url="http://incubator.apache.org/isis/ide/eclipse/templates/">Isis
            website</ulink>, and installed using Windows &gt; Preferences &gt;
            Java &gt; Editor &gt; Templates:</para>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/dev-env/windows-preferences-java-editor-templates-junit.png"
                           scale="60" />
              </imageobject>
            </mediaobject>
          </sect3>
        </sect2>

        <sect2>
          <title>Other IDEs</title>

          <para>All of the committers for <emphasis>Isis</emphasis> use the
          Eclipse IDE with the m2eclipse plugin, so the instructions provided
          in this guide reflect our own experience. However, if you use one of
          the other IDEs, please feel free to contribute patches to this
          documentation to explain the setup, and we'll add in your words of
          wisdom here.</para>
        </sect2>
      </sect1>
    </chapter>

    <chapter id="chp.SetUpDevelopmentEnvironment">
      <title>Obtaining Isis Source Code</title>

      <abstract>
        <para>Where to actually download the Isis source code from.</para>
      </abstract>

      <para>The <emphasis>Isis</emphasis> source code resides in a publicly
      accessible Subversion repository, hosted by the Apache Software
      Foundation. Anyone can check out the source code anonymously. In common
      with all Apache projects, commit (write) access is restricted to those
      who have been voted by the <emphasis>Isis</emphasis> community in as
      committers.</para>

      <sect1>
        <title>Anonymous (read-only) download</title>

        <para>If you do not have commit writes, then you can still check out
        the Isis source code for read-only using:</para>

        <programlisting>svn co http://svn.apache.org/repos/asf/incubator/isis/trunk .</programlisting>

        <para>hecking out the code Anonymous read-only access: * Committer
        read-write access: * svn co
        https://svn.apache.org/repos/asf/incubator/isis/trunk .</para>
      </sect1>

      <sect1>
        <title>Committer (read-write) download</title>

        <para>If you have commit writes, then you can check out the Isis
        source code for read/write using:</para>

        <programlisting>svn co https://svn.apache.org/repos/asf/incubator/isis/trunk .</programlisting>

        <para>Note that this uses the 'https' scheme rather than the 'http'
        scheme.</para>
      </sect1>
    </chapter>

    <chapter id="chp.BuildingIsisFromSource">
      <title>Building Isis from Source</title>

      <abstract>
        <para>How to build <emphasis>Isis</emphasis>' code modules (not site
        and docs) from source.</para>
      </abstract>

      <para><emphasis>Isis</emphasis> is built using
      <emphasis>Maven</emphasis>, so you should then be able to get going
      using a simple <code>mvn clean install</code>. However, there is a
      little more to it than that, because we do have a number of profiles
      which allow the build to be tailored in various ways.</para>

      <sect1>
        <title>Maven Profiles</title>

        <para>The Maven profiles that customize the build are activated by
        setting properties, where the property name determines the means by
        which the build is customized. They are:</para>

        <itemizedlist>
          <listitem>
            <para><code>-D modules=</code></para>

            <itemizedlist>
              <listitem>
                <para><code>standard</code></para>

                <para>This is the default, so can be omitted if no other -D
                properties are specified.</para>

                <para>Using <code>-D modules=standard</code> will build the
                <filename>applib</filename>, <filename>core</filename>,
                <filename>defaults</filename>,
                <filename>alternatives</filename> and
                <filename>viewer</filename> modules</para>
              </listitem>

              <listitem>
                <para><code>all</code></para>

                <para>Using <code>-D modules=all</code> will build the
                <filename>applib</filename>, <filename>core</filename>,
                <filename>defaults</filename>,
                <filename>alternatives</filename>,
                <filename>viewer</filename>, <filename>support</filename>,
                <filename>release</filename>, examples and
                <filename>site-skin</filename> modules</para>
              </listitem>

              <listitem>
                <para><code>skin</code> or <code>applib</code> or
                <code>core</code> or <code>defaults</code> or
                <code>alternatives</code> or <code>viewer</code> or
                <code>support</code> or <code>release</code> or
                <code>examples</code></para>

                <para>Using <code>-D modules=...</code> for any of the above
                will build just the corresponding module</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para><code>-D build=</code><itemizedlist>
                <listitem>
                  <para><code>standard</code></para>

                  <para>This is the default, so can be omitted if no other -D
                  properties are specified.</para>

                  <para>Using <code>-D build=standard</code> when run under
                  <code>mvn clean install</code> will perform the standard
                  plugins for the Maven 'default' lifecycle, and will also run
                  the <filename>enforcer</filename>,
                  <filename>eclipse</filename>, <filename>source</filename>,
                  <filename>jar</filename> and <filename>pdf</filename>
                  plugins. See <literal>/project/build/plugins</literal> in
                  the parent <filename>pom.xml </filename>for an up-to-date
                  list.</para>
                </listitem>

                <listitem>
                  <para><code>full</code></para>

                  <para>This will perform a full build, which basically means
                  to also run a number of additional plugins.</para>

                  <para>Using -<code>D build=full</code> runs all the plugins
                  for standard, along with the <classname>javadoc</classname>
                  plugin (is 'jar' goal). See
                  <literal>/project/profiles/profile[id='build-full']/build/plugins</literal>
                  in the parent <filename>pom.xml</filename> for an up-to-date
                  list.</para>
                </listitem>
              </itemizedlist></para>
          </listitem>
        </itemizedlist>

        <para>The <code>-D modules=xxx</code> and <code>-D build=yyy</code>
        profiles are pretty much orthogonal; any set of modules can be built
        with either build profile. The one exception minor exception is that
        the <filename>release</filename> module (and hence any profile that
        references it) cannot be built using <code>-D
        build=full</code>.</para>
      </sect1>

      <sect1>
        <title>Typical Use Cases</title>

        <para>Although the above set of profiles might seem complex, most of
        the time you'll find yourself running just one of a small number of
        commands. This section lists the typical use cases.</para>

        <warning>
          <para>The first time you run these, you'll need to omit the -o
          (offline) flag in order to download plugins and dependencies.
          Thereafter though the -o flag is strongly recommended!</para>
        </warning>

        <para>The most typical use cases are</para>

        <itemizedlist>
          <listitem>
            <para>Quick build</para>

            <programlisting>mvn clean install -o</programlisting>
          </listitem>

          <listitem>
            <para>Build 'release' module (prereq for the examples)</para>

            <programlisting>mvn clean install -D modules=release -o</programlisting>
          </listitem>

          <listitem>
            <para>Build everything</para>

            <programlisting>mvn clean install -D modules=all -o</programlisting>
          </listitem>

          <listitem>
            <para>Build in readiness for a release</para>

            <programlisting>mvn clean install -D modules=standard -D build=full -o</programlisting>
          </listitem>
        </itemizedlist>
      </sect1>

      <sect1>
        <title>Smoke Test</title>

        <para>Once you've build the source code, you might want to run a smoke
        test.</para>

        <para>The best way to do this is to use the quick start archetype. How
        to do this is documented on the website; however we want to run the
        archetype in a slightly different form, specifying the local catalog
        (ie to pick up the modules just built):</para>

        <programlisting>mvn archetype:generate \
     -D archetypeCatalog=local \
     -D archetypeGroupId=org.apache.isis.support \
     -D archetypeArtifactId=quickstart-archetype \
     -D groupId=com.mycompany.mygroup \
     -D artifactId=myapp</programlisting>

        <para>The <ulink
        url="http://incubator.apache.org/isis/quickstart-app.html">quickstart</ulink>
        page on the website then describes how to go about testing the
        generated classes.</para>
      </sect1>
    </chapter>

    <chapter id="chp.BuildingSiteAndDocs">
      <title>Building Site and Documentation</title>

      <abstract>
        <para>How to build <emphasis>Isis</emphasis>' site and documentation
        from source.</para>
      </abstract>

      <para>In the same way that Isis code modules are built using <code>mvn
      clean install</code> (see <xref
      linkend="chp.BuildingIsisFromSource" />), so too can its site and
      documentation be built using <code>mvn site-deploy</code>. Again though,
      there is a little more to it than that, because we do have a number of
      profiles which allow the build to be tailored in various ways. There is
      also some prerequisite software that must be installed.</para>

      <sect1>
        <title>Prerequisites (JIMI Jar File)</title>

        <para>Generally speaking all Maven artifacts are automatically
        downloads from the Maven <ulink
        url="http://repo1.maven.org/maven2/">central repo</ulink>. However,
        some artifacts must be manually installed or built, either because
        they haven't been formally released or because there are licensing
        restrictions preventing them from being hosted in the repository.
        These must therefore be downloaded and manually installed into your
        local repository (<filename>~/.m2/repository</filename>) .</para>

        <para><emphasis>Apache Isis</emphasis> currently use the
        <acronym>JIMI</acronym> jar to generate documentation.
        Therefore:</para>

        <itemizedlist>
          <listitem>
            <para>From the <ulink
            url="http://java.sun.com/products/jimi/">Jimi page</ulink>,
            download the <filename>jimi1_0.zip</filename> file, and
            unzip.</para>
          </listitem>

          <listitem>
            <para>Within the unzipped files, you'll find the
            <filename>JimiProClasses.zip</filename> file. This is the
            <acronym>JAR</acronym> that needs to be installed. Make a note of
            its location.</para>
          </listitem>

          <listitem>
            <para>Install into your local Maven repository using:</para>

            <screen>mvn install:install-file       \
    -D groupId=com.java        \
    -D artifactId=jimi         \
    -D version=1.0             \
    -D packaging=jar           \
    -D file=/path/to/JimiProClasses.zip</screen>
          </listitem>
        </itemizedlist>
      </sect1>

      <sect1>
        <title>Maven Profiles</title>

        <para>The Maven profiles customize the build are activated by setting
        properties, where the property name determines the means by which the
        build is customized.</para>

        <para>They are:</para>

        <itemizedlist>
          <listitem>
            <para><code>-D modules=</code></para>

            <itemizedlist>
              <listitem>
                <para><code>skin</code></para>

                <para>Using <code>-D modules=skin</code> will build just the
                skin module</para>
              </listitem>

              <listitem>
                <para><code>standard</code></para>

                <para>This is the default, so can be omitted if no other -D
                properties are specified.</para>

                <para>Using <code>-D modules=standard</code> will build all
                modules.</para>
              </listitem>

              <listitem>
                <para><code>skin</code> or <code>applib</code> or
                <code>core</code> or <code>runtimes</code> or
                <code>progmodels</code> or <code>security</code> or
                <code>viewer</code> or <code>support</code>.</para>

                <para>Using <code>-D modules=...</code> for any of the above
                will build just the corresponding module</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para><code>-D site=</code><itemizedlist>
                <listitem>
                  <para><code>standard</code></para>

                  <para>Using <code>-D site=standard</code> when run under
                  <code>mvn site-deploy</code> will perform the standard
                  plugins for the Maven 'site' lifecycle, and will also run
                  the <filename>docbkx</filename> plugin (where relevant) in
                  order to build the DocBook documentation. See
                  <literal>/project/build/plugins</literal> in the parent
                  <filename>pom.xml</filename>for an up-to-date list (note the
                  binding to the 'site' phase).</para>
                </listitem>

                <listitem>
                  <para><code>full</code></para>

                  <para>This will perform a full build, which basically means
                  to also run a number of additional reporting plugins.</para>

                  <para>Using -<code>D site=full</code> in addition runs all
                  the reporting plugins runs all the plugins for standard,
                  along with the <filename>surefire-report</filename>,
                  <filename>project-info-reports</filename>,
                  <filename>cobertura</filename>,
                  <filename>checkstyle</filename>, <filename>pmd</filename>,
                  <filename>findbugs</filename>,
                  <filename>javancss</filename>, <filename>jdepend</filename>,
                  <filename>jxr</filename>, <filename>taglist</filename>,
                  <filename>javadoc</filename>.</para>

                  <para>See
                  <literal>/project/profiles/profile[id='site-full']/reporting/plugins</literal>
                  in the parent <filename>pom.xml</filename> for an up-to-date
                  list.</para>
                </listitem>
              </itemizedlist></para>
          </listitem>

          <listitem>
            <para><code>-D deploy=</code></para>

            <itemizedlist>
              <listitem>
                <para><code>local</code></para>

                <para>Using <code>-D deploy=local</code> will deploy the site
                to <filename>/tmp/m2-sites/isis</filename>, where you can
                check it</para>
              </listitem>
            </itemizedlist>

            <para>At the time of writing the profile for remote deployment to
            Apache's staging server (<code>-D deploy=remote</code>) had not
            been finalized.</para>
          </listitem>
        </itemizedlist>

        <para>The <code>-D modules=xxx</code> and <code>-D site=yyy</code>
        profiles are pretty much orthogonal; any set of modules can be built
        with either build profile. The one exception minor exception is that
        the <filename>release</filename> module (and hence any profile that
        references it) cannot be built using <code>-D site=full</code>.</para>
      </sect1>

      <sect1>
        <title>Typical Use Cases</title>

        <para>Most of the time you'll find yourself running just one of a
        small number of commands. This section lists the typical use
        cases.</para>

        <warning>
          <para>The first time you run these, you'll need to omit the -o
          (offline) flag in order to download plugins and dependencies.
          Thereafter though the -os flag is strongly recommended!</para>
        </warning>

        <para>The most typical use cases are</para>

        <itemizedlist>
          <listitem>
            <para>Quick build of site and documentation</para>

            <programlisting>mvn site-deploy -D modules=standard -D deploy=local -o</programlisting>
          </listitem>

          <listitem>
            <para>Full build of site and documentation</para>

            <programlisting>mvn site-deploy -D modules=standard -D site=full -D deploy=local -o</programlisting>
          </listitem>

          <listitem>
            <para>Quick build all code and documentation</para>

            <programlisting>mvn clean install site-deploy -D modules=standard -D deploy=local -o</programlisting>
          </listitem>

          <listitem>
            <para>Full build of all code and documentation</para>

            <programlisting>mvn clean install site-deploy -D modules=standard -D build=full -D site=full -D deploy=local -o</programlisting>
          </listitem>
        </itemizedlist>
      </sect1>
    </chapter>
  </part>

  <part id="prt.Contributing">
    <title>Contributing</title>

    <partintro>
      <para>If you are looking to contribute to <emphasis>Apache
      Isis</emphasis>, then this part of the guide offers guidance on how to
      contribute changes. It builds on the first part, <xref
      linkend="prt.Building" />, and assumes that you have installed any
      prerequisite software.</para>

      <para>Note that in order to gain commit writes to Apache Software
      Foundation projects, you must be voted in as a committer by the existing
      community. In order for that to happen, you will need to have shown
      demonstrated an ongoing and active interest. The easiest way to do this
      is to participate in discussions on the mailing list, to file or comment
      on JIRA tickets (bugs/defects), and to provide patches to bugs/defects
      by way of attaching to the relevant JIRA tickets.</para>
    </partintro>

    <chapter id="chp.CodingStandardsPrinciples">
      <title>Coding Standards Principles</title>

      <abstract>
        <para>This chapter describes the principles of the main coding
        standards adopted within the <emphasis>Isis</emphasis> codebase. The
        enforcement of these coding standards is through plugins to both the
        IDE and Maven,</para>
      </abstract>

      <para>This chapter describes the principles of the main coding standards
      adopted within the <emphasis>Isis</emphasis> codebase. The enforcement
      of these coding standards is through plugins to both the IDE and Maven,
      see <xref linkend="chp.CodingStandardsEnforcement" />.</para>

      <warning>
        <para>The style of framework code has developed over the lifetime of
        the project, so you won't find that all code satisfies the principles
        laid out here. We expect to address this piecemeal, incrementally
        moving towards these principles over time. The use of tools and
        plugins should help.</para>
      </warning>

      <sect1>
        <title>Code Formatting</title>

        <para>A code formatting conventions adopted are those in use within a
        number of other Apache projects. Some of the more important standards
        are:</para>

        <itemizedlist>
          <listitem>
            <para>Indentation is achieved using spaces, not tabs; there should
            be no tabs, except where needed in quoted strings</para>
          </listitem>

          <listitem>
            <para>Each level of indentation is 4 characters</para>
          </listitem>

          <listitem>
            <para>Code lines are wrapped at 120 characters, with a 4 space
            indentation for wrapped lines</para>
          </listitem>

          <listitem>
            <para>Statements should only be wrapped when too long for the
            line</para>
          </listitem>

          <listitem>
            <para>Braces ({}) start on the same line as their controlling
            statement and end, indented to the same level as the starting
            line, on a new line</para>
          </listitem>

          <listitem>
            <para>One blank line between package statement and imports</para>
          </listitem>

          <listitem>
            <para>One blank lines between imports and class/interface
            declaration</para>
          </listitem>

          <listitem>
            <para>One blank line between each method declaration, and blocks
            of field etc</para>
          </listitem>
        </itemizedlist>

        <para>See <xref linkend="chp.CodingStandardsEnforcement" /> for
        details on configuring the Eclipse code formatter for these
        standards.</para>
      </sect1>

      <sect1>
        <title>Naming</title>

        <sect2>
          <title>General Principles</title>

          <itemizedlist>
            <listitem>
              <para>All names appearing in code should be written in English
              and be full words.</para>
            </listitem>

            <listitem>
              <para>Abbreviations should be avoided unless they are well known
              and unambiguous.</para>
            </listitem>

            <listitem>
              <para>Complementary names should be used for complementary
              concepts, showing that they are related.</para>

              <para>For example: start/stop; next/previous; begin/end,
              open/close, show/hide.</para>
            </listitem>
          </itemizedlist>
        </sect2>

        <sect2>
          <title>Maven GroupId and ArtifactIds</title>

          <itemizedlist>
            <listitem>
              <para>all package names should be in lower case</para>
            </listitem>

            <listitem>
              <para>where an artifact is acting as an aggregator
              module:</para>

              <itemizedlist>
                <listitem>
                  <para>its groupId should be "one up" from the group it
                  manages</para>
                </listitem>

                <listitem>
                  <para>its artifactId should be plural and be the same as the
                  last element of the groupId it is aggregating for</para>
                </listitem>
              </itemizedlist>

              <para>For example, using the groupId:artifactId notation:</para>

              <itemizedlist>
                <listitem>
                  <para><code>org.apache.isis.runtimes.dflt:objectstores</code>
                  is the aggregator for the "objectstores" group.</para>
                </listitem>

                <listitem>
                  <para>Child modules within this group would include
                  <code>org.apache.isis.runtimes.dflt.objectstores:sql</code>
                  and
                  <code>org.apache.isis.runtimes.dflt.objectstores:xml</code>.</para>
                </listitem>
              </itemizedlist>
            </listitem>
          </itemizedlist>
        </sect2>

        <sect2>
          <title>Package Naming</title>

          <itemizedlist>
            <listitem>
              <para>the package name should be the concatenation of the group
              Id and the artifact Id</para>

              <para>For example, all packages in the
              <code>org.apache.isis.runtimes.dflt.objectstores:xml</code>
              module should reside in the
              <package>org.apache.isis.runtimes.dflt.objectstores.xml</package>
              package.</para>
            </listitem>

            <listitem>
              <para>all package names should be lower case</para>
            </listitem>
          </itemizedlist>
        </sect2>

        <sect2>
          <title>Type Names</title>

          <itemizedlist>
            <listitem>
              <para>All class names should be nouns and written in camel case;
              eg <classname>ObjectAdapter</classname>,
              <classname>Configuration</classname>.</para>
            </listitem>

            <listitem>
              <para>Interfaces should <emphasis role="strong">not</emphasis>
              have an 'I' placed in front of it.</para>
            </listitem>

            <listitem>
              <para>Implemenations should not have an "Impl" suffix. Instead
              identify the implementation technology; eg
              <classname>AuthenticationManagerLdap</classname>.</para>

              <para>If there really is no good suffix, use "Default" rather
              than "Impl"; eg
              <classname>ProgrammingModelDefault</classname>.</para>
            </listitem>
          </itemizedlist>
        </sect2>

        <sect2>
          <title>Method Naming</title>

          <para><itemizedlist>
              <listitem>
                <para>Method names should be verbs and written in mixed case
                starting with lower case; eg
                <methodname>isActionStatic()</methodname>,
                <methodname>prepare()</methodname>.</para>
              </listitem>

              <listitem>
                <para>Accessor and mutator method names should be prefixed
                with <emphasis>get</emphasis> and <emphasis>set</emphasis>; eg
                <methodname>getActionName()</methodname>,
                <methodname>setDelay(...)</methodname>.</para>
              </listitem>

              <listitem>
                <para>Boolean variable and accessor method names should be
                prefixed with <emphasis>is</emphasis>,
                <emphasis>can</emphasis>, <emphasis>has</emphasis> or
                <emphasis>should</emphasis>; eg
                <methodname>isDirty()</methodname>,
                <methodname>canSave(...)</methodname>.</para>
              </listitem>
            </itemizedlist></para>
        </sect2>

        <sect2>
          <title>Variable and Parameter Naming</title>

          <itemizedlist>
            <listitem>
              <para>Variable names must be in mixed case starting with lower
              case (never an underscore). Variables should have full sensible
              name, reflecting their purpose; eg <varname>count</varname>,
              <varname>target</varname>,
              <varname>previousOid</varname>.</para>
            </listitem>

            <listitem>
              <para>Short variable names should only be used within small
              blocks of codes or short method.</para>
            </listitem>

            <listitem>
              <para>Short variable names should never be used for parameter
              names</para>
            </listitem>
          </itemizedlist>
        </sect2>

        <sect2>
          <title>Constant Naming</title>

          <para>Constants' names should be all uppercase with an underscore
          between words.</para>
        </sect2>
      </sect1>

      <sect1>
        <title>Code Style</title>

        <sect2>
          <title>General Remarks</title>

          <itemizedlist>
            <listitem>
              <para>Use <code>final</code> variables where possible</para>
            </listitem>

            <listitem>
              <para>All <code>final</code> parameters always</para>
            </listitem>

            <listitem>
              <para><emphasis>DO NOT</emphasis> check in commented-out
              code</para>

              <para>use the repository to revert to previous versions</para>
            </listitem>

            <listitem>
              <para>Go for "Clean Code" (see Robert Martin's book):</para>

              <itemizedlist>
                <listitem>
                  <para>Methods should typically be no more than 10 lines
                  long</para>
                </listitem>

                <listitem>
                  <para>Try to ensure methods are either commands or queries
                  (no side-effects)</para>
                </listitem>

                <listitem>
                  <para>Think and aim for immutability if possible</para>
                </listitem>
              </itemizedlist>
            </listitem>

            <listitem>
              <para>Unless there is a clash of class names, fully qualified
              names should not be used in the code</para>
            </listitem>

            <listitem>
              <para>Add TODO, REVIEW, FIXME tasks to code wherever work is to
              be done on the code that you are not going to do now</para>
            </listitem>
          </itemizedlist>
        </sect2>

        <sect2>
          <title>Commenting</title>

          <itemizedlist>
            <listitem>
              <para>Do not overuse comments - they go out-of-sync with the
              code, causing confusion.</para>
            </listitem>

            <listitem>
              <para>Comments <emphasis>should</emphasis> be used explaining
              the WHY</para>
            </listitem>

            <listitem>
              <para>Comments should <emphasis>not</emphasis> be used for
              explaining the WHAT - that should be reflected in the method
              name</para>
            </listitem>

            <listitem>
              <para>Comments should <emphasis>not</emphasis> be used for
              explaining the HOW - read the body of the method instead</para>
            </listitem>

            <listitem>
              <para>Comments should not be used for explaining the WHO or the
              WHEN - that's what Subversion is for</para>
            </listitem>

            <listitem>
              <para>Don't introduce an explanatory comment in the middle of a
              method; instead, extract out the block as a method
              instead</para>
            </listitem>

            <listitem>
              <para>Comments should not contain any JavaDoc tags that are not
              complete.</para>

              <para>For example, remove <emphasis>@param</emphasis> markers if
              they don't add any information over and above the name of the
              parameter.</para>
            </listitem>
          </itemizedlist>
        </sect2>

        <sect2>
          <title>Imports</title>

          <itemizedlist>
            <listitem>
              <para>Imports should be grouped by major type, with a blank line
              between each.</para>

              <para>The order should be: java, javax, com, org,
              org.apache.isis.</para>
            </listitem>

            <listitem>
              <para>Classes, not packages, should be imported; don't use
              '*'</para>
            </listitem>

            <listitem>
              <para>No un-needed imports should be left in the code</para>
            </listitem>
          </itemizedlist>

          <para>Eclipse's Source &gt; Organize Imports can be used to organize
          imports. See <xref linkend="sec.ImportOrder" /> for details on how
          to configure Eclipse to enforce the required order.</para>
        </sect2>

        <sect2>
          <title>Use of Constants</title>

          <itemizedlist>
            <listitem>
              <para>Use constants instead of fixed phrases, except for
              messages, debug information and the like.</para>

              <para>For example:</para>

              <programlisting>if (name.equals(OPENING_TAG)) // Not if (name.equals("&lt;"))</programlisting>
            </listitem>

            <listitem>
              <para>Use constants instead of magic numbers.</para>

              <para>For example:</para>

              <programlisting>if (line &gt; MAXIMUM_LINES) // Not if (line &gt; 5)</programlisting>
            </listitem>

            <listitem>
              <para>Place public constants in a non-instantiable
              <classname>*Constants</classname> class for the package. This
              makes the constants easier to locate.</para>

              <para>For example, a 'remoting' package might have a
              RemotingConstants class:</para>

              <programlisting>public final class RemotingConstants {
    private RemotingConstants(){}

    public final static String HTTP_SCHEME = "http://";
    ...
}</programlisting>
            </listitem>
          </itemizedlist>
        </sect2>

        <sect2>
          <title>Member Order</title>

          <para>Declarations within each class should follow the standard
          order:</para>

          <itemizedlist>
            <listitem>
              <para>Typed (inner classes etc)</para>
            </listitem>

            <listitem>
              <para>Static field</para>
            </listitem>

            <listitem>
              <para>Static initializers</para>
            </listitem>

            <listitem>
              <para>Static methods</para>
            </listitem>

            <listitem>
              <para>Initializers</para>
            </listitem>

            <listitem>
              <para>Fields</para>
            </listitem>

            <listitem>
              <para>Constructors</para>
            </listitem>

            <listitem>
              <para>Methods</para>
            </listitem>
          </itemizedlist>

          <para>This order can be specified in the preferences under
          <emphasis>Java/Appearance/Members Sort Order</emphasis>, and the
          code can be ordered using the <emphasis>Source/Sort
          Members</emphasis> options.</para>
        </sect2>

        <sect2>
          <title>Method Order</title>

          <para>Methods should be grouped by responsibility, with comment
          blocks used to delineate different responsibilities:</para>

          <programlisting>///////////////////////////////////////////////////////////
// Authentication
///////////////////////////////////////////////////////////

... methods pertaining to authentication go here ...</programlisting>

          <para>By convention, methods which access the IsisContext or are
          injected should go at the end:</para>

          <programlisting>///////////////////////////////////////////////////////////
// Dependencies (from context)
///////////////////////////////////////////////////////////

protected IsisConfiguration getConfiguration() {
    return IsisContext.getConfiguration();
}</programlisting>

          <para>These should be non-<code>static</code> and
          <code>protected</code> so that they can be overridden in tests with
          a stub or mock if required.</para>
        </sect2>
      </sect1>

      <sect1>
        <title>License Notices</title>

        <para>In common with all other Apache projects, the standard Apache
        license notice should be present at the top of every code file.</para>
      </sect1>
    </chapter>

    <chapter id="chp.CodingStandardsEnforcement">
      <title>Coding Standards Enforcement</title>

      <abstract>
        <para>How we enforce coding standards (in Eclipse) for
        <emphasis>Apache Isis</emphasis>.</para>
      </abstract>

      <para>The <emphasis>Apache Isis</emphasis> community has standardized on
      using Eclipse as its preferred IDE. This chapter describes the main
      tools that are available to help enforce the coding standard principles
      described in <xref linkend="chp.CodingStandardsPrinciples" />.</para>

      <sect1 id="sec.CodeStyleTemplates">
        <title>Code Style Templates</title>

        <para>All Apache projects are required to have a standard license
        comment at the top of every code file. Eclipse can be configured so
        that these licenses are automatically available in every new
        file.</para>

        <para>Therefore, download the <ulink
        url="http://incubator.apache.org/isis/ide/eclipse/templates/Apache-code-style-template.xml">code
        style template config file</ulink> and import using Windows &gt;
        Preferences &gt; Java &gt; Code style &gt; Code Templates:</para>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/dev-env/windows-preferences-java-code-style-code-templates.png"
                       scale="50" />
          </imageobject>
        </mediaobject>

        <para>Make sure that the "Automatically add comments for new methods
        and types" is selected. Now, when you create a new class using File
        &gt; New &gt; Class, the license comments will already be in
        place.</para>
      </sect1>

      <sect1 id="sec.CodeStyleFormatter">
        <title>Code Style Formatter</title>

        <para><emphasis>Apache Isis</emphasis> has adopted a set of coding
        standards used by several other Apache projects, and compatible with
        our own principles. These projects have previously developed a
        configuration file for Eclipse's Code Style Formatter feature, meaning
        that the formatting can be applied easily.</para>

        <para>Therefore, download the <ulink
        url="http://incubator.apache.org/isis/ide/eclipse/templates/Apache-code-style-formatting.xml">code
        style formatter config file</ulink> and import using Windows &gt;
        Preferences &gt; Java &gt; Code Style &gt; Formatter:</para>

        <screenshot>
          <screeninfo>Eclipse Java Code Style Formatter</screeninfo>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/dev-env/windows-preferences-java-code-style-formatter.png"
                         scale="50" />
            </imageobject>
          </mediaobject>
        </screenshot>

        <para>To run the formatter, use Source &gt; Format. Note that this can
        be done recursively, from a higher level package if required.</para>

        <para>Alternatively, you can use Cleanup, (see <xref
        linkend="sec.CodeStyleCleanup" />), which performs formatting and a
        number of other checks too.</para>

        <para>A final option is to you configure formatting to be run
        automatically as a Save action (see <xref
        linkend="sec.SaveActions" />).</para>
      </sect1>

      <sect1 id="sec.CodeStyleCleanup">
        <title>Code Style Cleanup</title>

        <para><emphasis>Apache Isis</emphasis> provides a configuration file
        for Eclipse's Code Style Cleanup feature. This defines a set of
        operations aimed at removing simple problems with the code, as well as
        running the formatter (see <xref
        linkend="sec.CodeStyleFormatter" />).</para>

        <para>Therefore, download the <ulink
        url="http://incubator.apache.org/isis/ide/eclipse/templates/Apache-Isis-code-style-cleanup.xml">code
        style cleanup config file</ulink> and import using Windows &gt;
        Preferences &gt; Java &gt; Code Style &gt; Cleanup:</para>

        <para><screenshot>
            <screeninfo>Configuring Eclipse's Java Code Style
            Cleanup</screeninfo>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/dev-env/windows-preferences-java-code-style-clean-up.png"
                           scale="50" />
              </imageobject>
            </mediaobject>
          </screenshot></para>

        <para>The cleanup wizard can be run on an adhoc basis using Source
        &gt; Cleanup. Note that this can be done recursively, from a higher
        level package if required. For example:</para>

        <screenshot>
          <screeninfo>Running Source Code Cleanup (1 of 3)</screeninfo>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/doc/Eclipse-cleanup-1.png" scale="50" />
            </imageobject>
          </mediaobject>
        </screenshot>

        <screenshot>
          <screeninfo>Running Source Code Cleanup (2 of 3)</screeninfo>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/doc/Eclipse-cleanup-2.png" scale="50" />
            </imageobject>
          </mediaobject>
        </screenshot>

        <screenshot>
          <screeninfo>Running Source Code Cleanup (3 of 3)</screeninfo>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/doc/Eclipse-cleanup-3.png" scale="50" />
            </imageobject>
          </mediaobject>
        </screenshot>
      </sect1>

      <sect1 id="sec.ImportOrder">
        <title>Import Order</title>

        <para>Our coding standard principles recommend a fixed import order.
        This can be configured using Eclipse's Code Style Organize Imports
        feature.</para>

        <para>Therefore, download the <ulink
        url="http://incubator.apache.org/isis/ide/eclipse/templates/isis.importorder">code
        style organize imports config file</ulink> and import using Windows
        &gt; Preferences &gt; Java &gt; Code Style &gt; Organize
        Imports:</para>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/dev-env/windows-preferences-java-codestyle-organize-imports.png"
                       scale="50" />
          </imageobject>
        </mediaobject>

        <para>The import order can be reorganized using Source &gt; Organize
        Imports. Note that this can be done recursively, from a higher level
        package if required. It can also be defined to be run automatically as
        a Save Action, see <xref linkend="sec.SaveActions" />.</para>
      </sect1>

      <sect1 id="sec.SaveActions">
        <title>Save Actions</title>

        <para>While the formatter (<xref linkend="sec.CodeStyleFormatter" />)
        and organize imports (<xref linkend="sec.ImportOrder" />) can be run
        manually, it is also possible to run the formatter whenever code is
        saved.</para>

        <para>To configure this, navigate to Windows &gt; Preferences &gt;
        Save &gt; Actions and enable:</para>

        <screenshot>
          <screeninfo>Eclipse Save Actions</screeninfo>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/dev-env/windows-preferences-java-editor-save-actions.png"
                         scale="50" />
            </imageobject>
          </mediaobject>
        </screenshot>

        <para>From the dialog it is also possible to automatically perform the
        same actions as the cleanup (the Configure button). However, it
        doesn't seem possible (as of Eclipse 3.6) to export/import these
        settings within a config file.</para>

        <para>Our recommendation for now is just to enable the simple
        formatting on save and organize imports, and not waste time manually
        configuring any other actions on save too.</para>

        <warning>
          <para>We make the above recommendation slightly tentatively;
          reformatting all lines clearly could cause a lot of changes.</para>
        </warning>
      </sect1>
    </chapter>

    <chapter id="chp.CodeQuality">
      <title>Code Quality</title>

      <abstract>
        <para>Using plugins such as Checkstyle and PMD to improve code
        quality.</para>
      </abstract>

      <para>As well as using the tools to enforce code standards, there are
      also numerous tools available to improve the overall code quality. As
      many projects do, Apache Isis uses these tools to improve the quality of
      its codebase.</para>

      <para>The tools that we configure are intended to run in both the IDE
      (for immediate visibility to the contributor community) and within Maven
      (for visibility to the user community). There is some overlap between
      them.</para>

      <itemizedlist>
        <listitem>
          <para>the <ulink url="http://www.eclemma.org/">EclEmma
          plugin</ulink> (for Eclipse), and <ulink
          url="http://cobertura.sourceforge.net/">Cobertura</ulink> (for
          Maven) test coverage results</para>
        </listitem>

        <listitem>
          <para>Eclipse's own compiler warnings configuration</para>
        </listitem>

        <listitem>
          <para>the <ulink url="http://eclipse-cs.sourceforge.net">eclipse-cs
          plugin</ulink>, for <ulink
          url="http://checkstyle.sourceforge.net">Checkstyle</ulink>
          support</para>
        </listitem>

        <listitem>
          <para>the <ulink url="http://pmd.sourceforge.net/eclipse">PMD for
          eclipse plugin</ulink>, for <ulink
          url="http://pmd.sourceforge.net">PMD</ulink> support</para>
        </listitem>
      </itemizedlist>

      <para>In addition, we recommend that <ulink
      url="http://findbugs.sourceforge.net/manual/eclipse.html">findBugs is
      installed into the IDE</ulink>. However, findBugs is not part of the
      Maven build because it would flag violations that, to suppress, would
      require introducing a dependency on its associated library which is
      published under <acronym>LGPL</acronym> (not compatible with the
      <acronym>ASF</acronym>).</para>

      <para>This chapter describes the configuration of some of these
      tools.</para>

      <warning>
        <para>This chapter is more of a statement-of-intent for the future,
        rather than reflecting the current status. Right now, if we run these
        tools with the config files that we've located/inherited, we will end
        up with an overwhelming number of issues. There is also some overlap
        between these config files, which still needs to be eliminated.</para>

        <para>So, the plan is to pare down these config files to a bare
        minimum, and then slowly ratchet up the tests as we aim to improve the
        overall code quality going forward.</para>

        <para>By all means go ahead and configure these plugins, but be aware
        that we have not - yet - fully configured them nor are tracking their
        outputs.</para>
      </warning>

      <sect1>
        <title>Code Coverage (Cobertura and Emma)</title>

        <para>Code coverage of unit testing is provided using
        <emphasis>EclEmma</emphasis> for Eclipse and
        <emphasis>Cobertura</emphasis> for Maven. Although there is an Eclipse
        plugin for <emphasis>Cobertura</emphasis>, it has not been maintained
        and no longer runs on the latest versions of Eclipse. Conversely,
        although there is a Maven plugin for Emma, the
        <emphasis>Cobertura</emphasis> plugin gives reports that are more
        easily understood.</para>

        <note>
          <para>In fact, in the future we may move to <ulink
          url="http://www.eclemma.org/jacoco/">JaCoCo</ulink>, a new code
          coverage tool being developed by the originators of EclEmma. One of
          the benefits of <emphasis>JaCoCo</emphasis> is that the
          instrumentation is performed via a java:agent, ie on-the-fly. This
          would allow code coverage to be captured during integration tests,
          for example, without requiring a specific build.</para>
        </note>

        <sect2>
          <title>Eclipse Plugin (Emma)</title>

          <para>The <ulink url="http://www.eclemma.org/">EclEmma</ulink>
          Eclipse plugin offers transparent code coverage directly within the
          Eclipse IDE. Rather than run the tests using Run &gt; Run As &gt;
          JUnit Test, instead use Coverage &gt; Coverage As &gt; JUnit Test.
          This will instrument the code and then provide a coverage view and
          highlights in the editor to show which code has been
          exercised.</para>

          <para>The coverage view looks like:</para>

          <screenshot>
            <screeninfo>EclEmma's Coverage view</screeninfo>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/dev-env/eclemma-coverage-view.png"
                           scale="50" />
              </imageobject>
            </mediaobject>
          </screenshot>

          <para>The highlighted editor looks like:</para>

          <screenshot>
            <screeninfo>EclEmma's highlights for the editord</screeninfo>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/dev-env/eclemma-editor.png"
                           scale="50" />
              </imageobject>
            </mediaobject>
          </screenshot>

          <para>Use the menu item on the Coverage View to select between
          manage the history of coverage runs (selecting none / deleting all
          removes the highlights on the editor).</para>

          <para>To change what code is instrumented, use Run &gt; Coverage
          ...</para>
        </sect2>

        <sect2>
          <title>Maven Plugin (Cobertura)</title>

          <para>The isis-parent <acronym>POM</acronym> automatically includes
          the Maven <ulink
          url="http://mojo.codehaus.org/cobertura-maven-plugin">Cobertura
          plugin</ulink>:</para>

          <para><screen>&lt;plugin&gt;
    &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
    &lt;artifactId&gt;cobertura-maven-plugin&lt;/artifactId&gt;
    &lt;version&gt;2.4&lt;/version&gt;
    &lt;inherited&gt;true&lt;/inherited&gt;          
&lt;/plugin&gt;</screen></para>

          <para>This plugin is not bound to any Maven lifecycle phase, and is
          not intended to be run other than as a report within <classname>mvn
          site</classname>. For more immediate feedback, use the Emma Eclipse
          plugin, above.</para>
        </sect2>
      </sect1>

      <sect1>
        <title>Compiler Warnings</title>

        <para>Eclipse can be configured so that Java compiler warnings can be
        elevated to being fatal errors, or conversely moved down to
        ignored.</para>

        <para>At the current time we do not configuration file for Eclipse,
        but we do intend to do this in the future. The plan will be to start
        with a relatively lax set of warnings (ie most set to ignore) in order
        that we can get 0 warnings in the build. Then we'll slowly start to
        elevate back up to warning, and use that as a way to improve the
        codebase piecemeal.</para>
      </sect1>

      <sect1 id="sec.Checkstyle">
        <title>Checkstyle</title>

        <para><ulink url="checkstyle.sourceforge.net">Checkstyle</ulink> is
        the first of three powerful tools (the others being <ulink
        url="http://pmd.sourceforge.net">PMD</ulink> and <ulink
        url="http://findbugs.sourceforge.net/">FindBugs) for </ulink>enforcing
        coding standards and detecting certain classes of likely errors. The
        <ulink
        url="http://incubator.apache.org/isis/codequality/checkstyle.xml">checkstyle
        definition config file</ulink> for <emphasis>Apache Isis</emphasis> is
        derived from Sun's standards, with a number of modifications.</para>

        <para>Checkstyle integrates with both Maven and with Eclipse.</para>

        <sect2>
          <title>Eclipse Plugin</title>

          <para>The <ulink
          url="http://eclipse-cs.sourceforge.net">eclipse-cs</ulink> plugin
          allows Checkstyle violations to be flagged as warnings or errors
          within the Problems view of the Eclipse IDE. To associate
          <emphasis>eclipse-cs</emphasis> with the Checkstyle config file, use
          Windows &gt; Preferences, and specify the config file as <ulink
          url="???">http://incubator.apache.org/isis/codequality/checkstyle.xml</ulink>.
          Alternatively, the file is available locally in
          <filename>trunk/src/site/resources/codequality/checkstyle.xml</filename>.</para>

          <para><remark>TODO: the screenshot is out of date</remark></para>

          <screenshot>
            <screeninfo>Configuring Eclipse-CS</screeninfo>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/dev-env/windows-preferences-eclipse-cs.png"
                           scale="45" />
              </imageobject>
            </mediaobject>
          </screenshot>

          <para><warning>
              <para>According to eclipse-cs' documentation, it is meant to
              integrate with m2eclipse and transparently pick up any Maven
              configuration of mvn-checkstyle-plugin. This doesn't seem to
              work for me, though.</para>
            </warning></para>

          <para>You may then need to enable CheckStyle for each project as
          required, using the context menu in Package Explorer. CheckStyle
          violations show up in the Problems view:</para>

          <screenshot>
            <screeninfo>Viewing CheckStyle violations in the Problems
            view</screeninfo>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/dev-env/problems-view-checkstyle.png"
                           scale="50" />
              </imageobject>
            </mediaobject>
          </screenshot>

          <para>These violations are dynamic updated, so fixing any problem
          should automatically remove the violation from the problems view. A
          quick fix short cut (ctrl+1) is available for some of these.</para>
        </sect2>

        <sect2>
          <title>Maven Plugin</title>

          <para>The isis-parent <acronym>POM</acronym> automatically includes
          the <ulink
          url="http://maven.apache.org/plugins/maven-checkstyle-plugin/">Maven
          checkstyle plugin</ulink>:</para>

          <para><screen>&lt;properties&gt;
    &lt;checkstyle.configLocation&gt;
        ${trunkBaseDir}/src/site/resources/codequality/checkstyle.xml
    &lt;/checkstyle.configLocation&gt;
&lt;/properties&gt;
&lt;reporting&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
            &lt;artifactId&gt;maven-checkstyle-plugin&lt;/artifactId&gt;
            &lt;version&gt;2.6&lt;/version&gt;
            &lt;configuration&gt;
                &lt;configLocation&gt;${checkstyle.configLocation}&lt;/configLocation&gt;
            &lt;/configuration&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/reporting&gt;</screen>This plugin is not bound to any Maven lifecycle
          phase, and is not intended to be run other than as a report within
          <classname>mvn site</classname>. In particular, note that the
          configuration is only defined in the
          <sgmltag>&lt;reporting&gt;</sgmltag> section, so it isn't possible
          to run using <classname>mvn checkstyle:checkstyle</classname>. For
          more immediate feedback, use the Eclipse plugin, above.</para>
        </sect2>
      </sect1>

      <sect1 id="sec.PMD">
        <title>PMD</title>

        <para><ulink url="http://pmd.sourceforge.net">PMD</ulink> is another
        static analysis tool that - like FindBugs and Checkstyle - checks for
        problematic code (possible bugs, dead code, suboptimal code and so
        on). As for Checkstyle, <emphasis>Apache Isis</emphasis> defines a
        <ulink url="http://incubator.apache.org/isis/codequality/pmd.xml">PMD
        config file</ulink>, this one adapted from other projects within
        Apache.</para>

        <para>PMD integrates with both Maven and with Eclipse.</para>

        <sect2>
          <title>Eclipse Plugin</title>

          <para>The <ulink url="http://pmd.sourceforge.net/eclipse">PMD for
          eclipse</ulink> plugin allows PMD violations to be flagged as
          warnings or errors within the Problems view of the Eclipse IDE. The
          plugin also provides a custom "PMD" perspective which also lists all
          violations. To associate <emphasis>PMD for Eclipse</emphasis> with
          the PMD config file, use Windows &gt; Preferences:</para>

          <screenshot>
            <screeninfo>Configuring PMD</screeninfo>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/dev-env/windows-preferences-pmd.png"
                           scale="45" />
              </imageobject>
            </mediaobject>
          </screenshot>

          <para>First, use "Clear All" to remove the default rule set. Then,
          use "Import rule set" and specify the pmd.xml file. Unlike the
          Checkstyle plugin, this must be a local file so must be referenced
          locally, from
          <filename>trunk/src/site/resources/codequality/pmd.xml</filename>.</para>

          <para>Also unlike the Checkstyle plugin, PMD violations are not
          continually updated against the code (it is not implemented as an
          Eclipse builder). To perform a check, you must use the context menu
          in Package Explorer and then use PMD &gt; Check Code with PMD. This
          will switch into the PMD perspective; the Violations view will
          indicate any code that needs attention:</para>

          <screenshot>
            <screeninfo>Viewing PMD violations in the Violations
            view</screeninfo>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/dev-env/pmd-violations-view.png"
                           scale="50" />
              </imageobject>
            </mediaobject>
          </screenshot>

          <para>Alternatively, you can switch back to the Java view; any PMD
          violations show up in the Problems view:</para>

          <screenshot>
            <screeninfo>Viewing PMD violations in the Problems
            view</screeninfo>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/dev-env/problems-viewpmd.png"
                           scale="50" />
              </imageobject>
            </mediaobject>
          </screenshot>

          <para>Once violations are fixed, the Check must be performed again
          to refresh both of these views.</para>

          <para>Note, to prevent PMD from switching to its own perspective,
          use Windows &gt; Preferences &gt; PMD and then disable "Show PMD
          Perspective when checking code".</para>
        </sect2>

        <sect2>
          <title>Maven Plugin</title>

          <para>The isis-parent <acronym>POM</acronym> automatically includes
          the Maven <ulink
          url="http://maven.apache.org/plugins/maven-pmd-plugin/">PMD
          plugin</ulink>:</para>

          <para><screen>&lt;properties&gt;
    &lt;pmd.ruleset&gt;
        ${trunkBaseDir}/src/site/resources/codequality/pmd.xml
    &lt;/pmd.ruleset&gt;
&lt;/properties&gt;
&lt;reporting&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
            &lt;artifactId&gt;maven-pmd-plugin&lt;/artifactId&gt;
            &lt;version&gt;2.5&lt;/version&gt;
            &lt;configuration&gt;
                &lt;sourceEncoding&gt;${project.build.sourceEncoding}&lt;/sourceEncoding&gt;
                &lt;minimumTokens&gt;100&lt;/minimumTokens&gt;
                &lt;linkXref&gt;true&lt;/linkXref&gt;
                &lt;targetJdk&gt;${compileTarget}&lt;/targetJdk&gt;
                &lt;rulesets&gt;
                    &lt;ruleset&gt;${pmd.ruleset}&lt;/ruleset&gt;
                &lt;/rulesets&gt;
                &lt;excludeRoots&gt;
                    &lt;excludeRoot&gt;
                        ${project.build.directory}/generated-sources/modello
                    &lt;/excludeRoot&gt;
                    &lt;excludeRoot&gt;
                        ${project.build.directory}/generated-sources/plugin
                    &lt;/excludeRoot&gt;
                &lt;/excludeRoots&gt;
            &lt;/configuration&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/reporting&gt;</screen></para>

          <para>As for Checkstyle, this plugin is not bound to any Maven
          lifecycle phase, and is not intended to be run other than as a
          report within <classname>mvn site</classname>. In particular, note
          that the configuration is only defined in the
          <sgmltag>&lt;reporting&gt;</sgmltag> section, so it isn't possible
          to run using <classname>mvn pmd:pmd</classname>. For more immediate
          feedback, use the Eclipse plugin, above.</para>
        </sect2>
      </sect1>

      <sect1 id="sec.FindBugs">
        <title>FindBugs</title>

        <para><ulink url="http://findbugs.sourceforge.net/">FindBugs</ulink>
        is a tool that - like CheckStyle and PMD - can be used to enforce
        coding standards and detecting certain classes of likely
        errors.</para>

        <para>FindBugs does not (seem to) have a configuration file; it is
        just run against a codebase and reports all errors.</para>

        <para>Although FindBugs integrates with both Maven and with Eclipse,
        we do not include it in the Maven build. This is because the companion
        library that is used to suppress certain types of warning is licensed
        under LGPL, which the ASF views as being incompatible with the ASF v2
        license.</para>

        <para>Nevertheless, we do recommend installing FindBugs for
        Eclipse.</para>

        <sect2>
          <title>Eclipse Plugin</title>

          <para>The <ulink
          url="http://findbugs.cs.umd.edu/eclipse/">findbugs</ulink> plugin
          allows FindBugs to be run against a single Eclipse project at a
          time, eg from the context menu:</para>

          <screenshot>
            <screeninfo>Running FindBugs</screeninfo>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/dev-env/findbugs-context-menu.png"
                           scale="45" />
              </imageobject>
            </mediaobject>
          </screenshot>

          <para>If this finds any errors, then <screenshot>
              <screeninfo>Bugs Found!</screeninfo>

              <mediaobject>
                <imageobject>
                  <imagedata fileref="images/dev-env/findbugs-bugs-found-message.png"
                             scale="50" />
                </imageobject>
              </mediaobject>
            </screenshot></para>

          <para>You can then switch to the findbugs perspective to review and
          fix the potential bugs:</para>

          <screenshot>
            <screeninfo>yViewing CheckStyle violations in the Problems
            view</screeninfo>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/dev-env/findbugs-perspective.png"
                           scale="40" />
              </imageobject>
            </mediaobject>
          </screenshot>

          <para>If you want to suppress, rather than fix, the bug, you can
          annotate using the
          <classname>@edu.umd.cs.findbugs.annotations.SuppressWarnings</classname>
          annotion. For example:</para>

          <screenshot>
            <screeninfo>Suppressing warnings from findbugs</screeninfo>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/dev-env/findbugs-suppress-warnings.png"
                           scale="60" />
              </imageobject>
            </mediaobject>
          </screenshot>
        </sect2>
      </sect1>
    </chapter>

    <chapter id="chp.WritingDocumentation">
      <title>Writing Documentation</title>

      <abstract>
        <para>This chapter provides some guidance on writing both DocBook and
        site (APT) documentation.</para>
      </abstract>

      <para>This chapter provides some guidance on writing both DocBook and
      site (APT) documentation, explaining what sort of content should go into
      each of these types, as well as the mechanics of actually writing these
      types of documents.</para>

      <para>See <xref linkend="chp.BuildingSiteAndDocs" /> for details on how
      to build the site documentation.</para>

      <para>See <xref linkend="chp.AptQuickStart" /> and <xref
      linkend="chp.DocBookQuickStart" /> for details on how to write APT or
      DocBook documentation.</para>

      <sect1>
        <title>Overview</title>

        <para>Maven provides the ability to automatically create a website
        holding various reports, such as Checkstyle, <acronym>PMD</acronym>,
        test results and code coverage. At least as far as <emphasis>Apache
        Isis</emphasis> is concerned, the site created reflects the module
        hierarchy, with at least one single index.html page to introduce each
        module. The main site (corresponding to isis-parent) has rather more
        content, eg discussing the naked objects pattern.</para>

        <para>This additional site content can be written in a number of
        formats, but the most straightforward is to use Maven's own APT
        format. APT here stands for "almost plain text"; it's basically a
        wiki-like syntax. The index.html for each file would typically
        correspond to <filename>index.apt</filename> file; the site content
        lives under <filename>src/site</filename> (relative to each module's
        <filename>pom.xml</filename>).</para>

        <para>In addition, a number of the modules have formal documentation
        in the form of (all-in-one) user/programmer/developer guides. These
        are written in DocBook 4.5, so that they can be processed by the
        <filename>docbkx-maven-plugin</filename> and converted to either
        <acronym>PDF</acronym> or <acronym>HTML</acronym>. These guides can be
        found under <filename>src/docbkx</filename> (relative to the module's
        <filename>pom.xml</filename>).</para>
      </sect1>

      <sect1>
        <title>Maven Modules</title>

        <para>The following tables indicates which modules have DocBook
        guides, and which do not:</para>

        <table>
          <title>Isis Modules</title>

          <tgroup cols="8">
            <colspec colname="_1" colwidth="20" />

            <colspec colname="_2" colwidth="20" />

            <colspec colname="_3" colwidth="20" />

            <colspec colname="_4" colwidth="60" />

            <colspec colname="_5" />

            <colspec colname="_6" />

            <colspec align="center" colwidth="50" />

            <colspec />

            <thead>
              <row>
                <entry align="center" nameend="_6"
                namest="_1">Directory</entry>

                <entry align="center">DocBk?</entry>

                <entry align="center">Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry nameend="_6" namest="_1">./</entry>

                <entry>Y</entry>

                <entry>Parent</entry>
              </row>

              <row>
                <entry></entry>

                <entry nameend="_6" namest="_2">applib</entry>

                <entry>Y</entry>

                <entry>Applib for default programming model</entry>
              </row>

              <row>
                <entry></entry>

                <entry nameend="_6" namest="_2">core</entry>

                <entry>Y</entry>

                <entry>Parent for core framework</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_6" namest="_3">testsupport</entry>

                <entry></entry>

                <entry>Unit testing support</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_6" namest="_3">common</entry>

                <entry></entry>

                <entry>Common utilities</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_6" namest="_3">metamodel</entry>

                <entry></entry>

                <entry>Meta-model</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_6" namest="_3">progmodel</entry>

                <entry></entry>

                <entry>Reusable programming model facets</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_6" namest="_3">runtime</entry>

                <entry></entry>

                <entry>Common classes for runtime implementations
                constructs</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_6" namest="_3">webapp</entry>

                <entry></entry>

                <entry>Common filters etc. for web-based viewers</entry>
              </row>

              <row>
                <entry></entry>

                <entry nameend="_6" namest="_2">progmodel</entry>

                <entry>Y</entry>

                <entry>Parent for programming model implementations</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_6" namest="_3">dflt</entry>

                <entry></entry>

                <entry>Default (Java5) programming model</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_6" namest="_3">groovy</entry>

                <entry></entry>

                <entry>Groovy programming model</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_6" namest="_3">wrapper</entry>

                <entry></entry>

                <entry>Wrapper programming model</entry>
              </row>

              <row>
                <entry></entry>

                <entry nameend="_6" namest="_2">security</entry>

                <entry>Y</entry>

                <entry>Parent for security (authentication and authorization)
                implementations</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_6" namest="_3">dflt</entry>

                <entry></entry>

                <entry>Default (no-op) implementation</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_6" namest="_3">file</entry>

                <entry></entry>

                <entry>Simple file-based implementation</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_6" namest="_3">ldap</entry>

                <entry></entry>

                <entry>LDAP implementation</entry>
              </row>

              <row>
                <entry></entry>

                <entry nameend="_6" namest="_2">runtimes</entry>

                <entry></entry>

                <entry>Parent for runtime implementations</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_6" namest="_3">dflt</entry>

                <entry>Y</entry>

                <entry>Default runtime implementation, includes documentation
                on bttecode providers, default object store and default
                profile store</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3"></entry>

                <entry nameend="_6" namest="_5">remoting</entry>

                <entry>Y</entry>

                <entry>Default runtime's remoting support</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3"></entry>

                <entry nameend="_6" namest="_5">bytecode</entry>

                <entry>N</entry>

                <entry>Parent for default runtime's bytecode implementations;
                documentation for child implementations included in default
                runtime's.</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3"></entry>

                <entry nameend="_6" namest="_5">objectstores</entry>

                <entry></entry>

                <entry>Parent for default runtime's object store
                implementations</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3"></entry>

                <entry></entry>

                <entry>dflt</entry>

                <entry></entry>

                <entry>Default (in-memory) object store; documentation
                included in default runtime's, see above</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3"></entry>

                <entry></entry>

                <entry>xml</entry>

                <entry>Y</entry>

                <entry>XML Object Store</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3"></entry>

                <entry></entry>

                <entry>sql</entry>

                <entry>Y</entry>

                <entry>SQL Object Store</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3"></entry>

                <entry></entry>

                <entry>nosql</entry>

                <entry>Y</entry>

                <entry>NoSQL Object Store</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3"></entry>

                <entry nameend="_6" namest="_5">profilestores</entry>

                <entry></entry>

                <entry>Parent for default runtime's profilte store
                implementations</entry>
              </row>

              <row>
                <entry></entry>

                <entry nameend="_4" namest="_2"></entry>

                <entry></entry>

                <entry>dflt</entry>

                <entry></entry>

                <entry>Default (in-memory) profile store; documentation
                included in default runtime's, see above</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3"></entry>

                <entry></entry>

                <entry>xml</entry>

                <entry></entry>

                <entry>XML Profile Store</entry>
              </row>

              <row>
                <entry></entry>

                <entry nameend="_6" namest="_2">viewer</entry>

                <entry></entry>

                <entry>Parent for viewer implementations</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3">bdd</entry>

                <entry></entry>

                <entry></entry>

                <entry>Y</entry>

                <entry>BDD viewer (<ulink
                url="http://concordion.org">Concordion</ulink> test framework
                integration)</entry>
              </row>

              <row>
                <entry nameend="_4" namest="_3">dnd</entry>

                <entry></entry>

                <entry></entry>

                <entry>Y</entry>

                <entry>DnD viewer</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3">html</entry>

                <entry></entry>

                <entry></entry>

                <entry>Y</entry>

                <entry>HTML viewer</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3">junit</entry>

                <entry></entry>

                <entry></entry>

                <entry>Y</entry>

                <entry>JUnit viewer (<ulink
                url="http://junit.org">JUnit</ulink> test framework
                integration)</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3">restful</entry>

                <entry></entry>

                <entry></entry>

                <entry>Y</entry>

                <entry>Restful viewer</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3">scimpi</entry>

                <entry></entry>

                <entry></entry>

                <entry>Y</entry>

                <entry>Scimpi (customizable web UI) viewer</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3">wicket</entry>

                <entry></entry>

                <entry></entry>

                <entry>Y</entry>

                <entry><ulink url="http://wicket.apache.org">Apache
                Wicket</ulink>-based viewer</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para>In general, the principle is for the DocBook guide to be
        reasonably complete. The docbkx-maven-plugin is capable of
        transforming the guide into fully hyperlinked HTML, and the
        configuration within the pom.xml is such that this is published as
        part of the site. In addition (as already mentioned) the DocBook is
        also converted into <acronym>PDF</acronym> for those that prefer that
        form (eg to download and print out).</para>

        <para>The APT site documentation therefore should be used to provide
        just enough of an overview so that a prospective user can understand
        what the particular module is for, and to provide signposting to the
        more detailed docbook guide where needed. Much of this signposting is
        taken care of already, being configured in the site menu.</para>
      </sect1>
    </chapter>

    <chapter id="chp.WritingSiteDocs">
      <title>APT Quick Start</title>

      <abstract>
        <para>Common use cases for writingy site documentation using
        APT.</para>
      </abstract>

      <para>As discussed in <xref linkend="chp.WritingDocumentation" />,
      <emphasis>Apache Isis</emphasis> uses Maven's <acronym>APT</acronym>
      (almost plain text) syntax for most of its site documentation. This
      chapter is a quick-start on using APT.</para>

      <sect1 id="sec.additional-site-content">
        <title>File Formats and Locations</title>

        <para>When writing additional site content</para>

        <itemizedlist>
          <listitem>
            <para>documents go in <filename>src/site/xxx</filename>, where
            <filename>xxx</filename> is the file format.</para>

            <para>For example <acronym>APT</acronym> documents live under
            <filename>src/site/apt</filename>.</para>
          </listitem>

          <listitem>
            <para>images and other resources go in src/site/resources and are
            referenced relative to this directory.</para>

            <para>For example images typically live under
            <filename>src/site/resources/images</filename>.</para>
          </listitem>
        </itemizedlist>

        <para>For example, <filename>src/site/apt/index.apt</filename> will
        correspond to index.html for the module.</para>

        <para>Maven sites can include documentation in any of a number of file
        formats:</para>

        <table>
          <title>File formats supported by Maven site</title>

          <tgroup cols="4">
            <thead>
              <row>
                <entry align="center">Format</entry>

                <entry align="center">Type</entry>

                <entry align="center">Location</entry>

                <entry align="center">Reference</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>APT</entry>

                <entry>Wiki-like format</entry>

                <entry>src/site/apt/xxx.apt</entry>

                <entry><ulink
                url="http://maven.apache.org/doxia/references/apt-format.html">Maven
                Doxia site (APT reference)</ulink></entry>
              </row>

              <row>
                <entry>DocBook</entry>

                <entry>Full power of DocBook</entry>

                <entry>src/site/docbook/xxx.xml</entry>

                <entry><ulink
                url="http://docbook.org/tdg/en/html/quickref.html">DocBook
                site (quick ref)</ulink></entry>
              </row>

              <row>
                <entry>FML</entry>

                <entry>FAQ Markup Language</entry>

                <entry>src/site/fml/xxx.xml</entry>

                <entry><ulink
                url="http://maven.apache.org/doxia/references/fml-format.html">Maven
                Doxia site (FML reference)</ulink></entry>
              </row>

              <row>
                <entry>XDoc</entry>

                <entry>Simplified DocBook, used in Maven 1.</entry>

                <entry>src/site/xdoc/xxx.xml</entry>

                <entry><ulink
                url="http://maven.apache.org/doxia/references/xdoc-format.html">Maven
                Doxia site (XDoc reference)</ulink></entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para>Of these, <acronym>APT</acronym> is the lowest entry, and is the
        generally recommended format. APT reference is available online at
        <ulink
        url="http://maven.apache.org/doxia/references/apt-format.html">http://maven.apache.org/doxia/references/apt-format.html</ulink>,
        but the following are some of the main formatting tips.</para>
      </sect1>

      <sect1>
        <title>Sections and Sub-sections</title>

        <para>Sections are not indented, paragraphs are.</para>

        <screen>My section title (not indented).

  My paragraph first line (indented by 2 spaces).  There is no need for remaining 
sentences in the paragraph to be indented.  A blank line terminates the paragraph.</screen>

        <para>Subsections can be defined using leading asterisks
        (<varname>*</varname>) to indicate the subsection level
        indents:</para>

        <screen>Section title

* Sub-section title

** Sub-sub-section title

*** Sub-sub-sub-section title</screen>
      </sect1>

      <sect1>
        <title>Fonts</title>

        <para>In addition to regular font, we can specify italics, bold or
        monospaced:</para>

        <screen>  &lt;italicised text&gt;
  &lt;&lt;bold text&gt;&gt;
  &lt;&lt;&lt;monospaced text&gt;&gt;&gt;</screen>
      </sect1>

      <sect1>
        <title>Lists</title>

        <para>List items are indented, and begin with an asterisk
        (<varname>*</varname>)</para>

        <screen>  * List item 1.

  * List item 2.

    Paragraph contained in list item 2.

    * Sub-list item 1.

    * Sub-list item 2.

  * List item 3.</screen>

        <para>To force the end of a list, use the <varname>[]</varname>
        pseudo-element:</para>

        <screen>  * List item 3.
 
  []

  This text is not in the list</screen>
      </sect1>

      <sect1>
        <title>Links and Figures</title>

        <para>To create an external link, use:</para>

        <screen>  Link to {{http://www.pixware.fr}}.
  or 
  Link to {{{http://www.pixware.fr}Pixware home page}}.</screen>

        <para>To create an internal link (to a page relative to this one),
        use:</para>

        <screen>  Link to {{{./docbkx/guide/isis-applib.pdf}AppLib Guide (PDF)}}</screen>

        <warning>
          <para>the "./" is required for internal links.</para>
        </warning>

        <para>To create an anchor, use:</para>

        <screen>  {Anchor}. This text is anchored.
  and then
  Link to {{anchor}}.
  or
  Link to {{{anchor}showing alternate text}}</screen>

        <para>Figures are specified by</para>

        <screen>  [images/foo/bar.png] Figure caption</screen>
      </sect1>

      <sect1>
        <title>Code Blocks (verbatim text)</title>

        <para>To quote a code block, use 3 dashes (<varname>---</varname>)
        before and after:</para>

        <screen>----------------------------------------
public class FooBar {
  ...
}
----------------------------------------</screen>

        <para>To put into a box, use a plus symbol
        (<varname>+--</varname>)</para>
      </sect1>

      <sect1>
        <title>Other Code Elements</title>

        <para>In addition to the above, <acronym>APT</acronym> supports
        tables, horizontal rules (===), page breaks, comments and special
        characters. See the <ulink
        url="http://maven.apache.org/doxia/references/apt-format.html">Maven
        Doxia</ulink> site for further details.</para>
      </sect1>
    </chapter>

    <chapter id="chp.WritingDocBookDocs">
      <title>DocBook Quick Start</title>

      <abstract>
        <para>Common use cases for writing formal documentation using
        DocBook.</para>
      </abstract>

      <para>As discussed in <xref linkend="chp.WritingDocumentation" />,
      <emphasis>Apache Isis</emphasis> uses DocBook as its primary
      documentation format, each significant module providing its own guide
      which is then converted into both PDF and HTML forms.</para>

      <para>DocBook is just XML, so you could edit the text with any text
      editor. However, you may find it easier to use an editor; and the we
      recommend here is from <ulink
      url="http://www.xmlmind.com/xmleditor">XMLMind</ulink>. The personal
      edition is free for use on open source projects.</para>

      <para>Below is a quick notes on using XmlMind.</para>

      <sect1>
        <title>Writing DocBook Guides (using XMLMind)</title>

        <para>DocBook guides can be found in src/docbkx (relative to the
        module's <filename>pom.xml</filename>).</para>
      </sect1>

      <sect1>
        <title>Creating a Document</title>

        <para>Use <emphasis>File &gt; New Document</emphasis> to create an
        <emphasis>DocBook </emphasis>document. This will create a v4.5
        docbook:</para>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/doc/DocBook-new-document.png"
                       scale="50" />
          </imageobject>
        </mediaobject>

        <para>The file should be saved under
        <filename>src/docbkx/guide</filename>.</para>

        <para>Once the file has been created, change the
        <literal>DOCTYPE</literal> entry to reference <acronym>DTD</acronym>s
        stored locally. We use the <literal>svn:externals</literal> property
        to "symbolically link" 3 directories under
        <filename>trunk/src/docbkx/guide</filename>
        (<filename>dtd-4.5</filename>, <filename>images</filename> and
        <filename>style</filename>); these can therefore be referenced
        locally.</para>

        <para>In addition, the standard Apache license comment is
        required.</para>

        <para>Here's the boilerplate to copy-n-paste in:</para>

        <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!--
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
--&gt;
&lt;!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"file:./src/docbkx/dtd-4.5/docbookx.dtd"&gt;

&lt;book&gt;
    ...
&lt;/book&gt;</programlisting>

        <para>Note the <acronym>DTD</acronym> location, as
        <filename>file:./src/test/resources/dtd</filename>.</para>
      </sect1>

      <sect1>
        <title>Loading a Document</title>

        <para>To load an existing document, simply use
        <emphasis>File&gt;Open</emphasis>. This will display the DocBook
        styled using the CSS. DocBook does allow the CSS to be customized; at
        the time of writing we have not done this for DocBook.</para>
      </sect1>

      <sect1>
        <title>Navigating the Document</title>

        <para>To navigate around, use up arrow, down arrow, pg up, pg down to
        move around.</para>

        <para>It is also possible to navigate by opening up an alternative
        view, using <emphasis>View &gt; Add</emphasis> to bring up a
        dialog:</para>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/doc/DocBook-add-view.png" scale="40" />
          </imageobject>
        </mediaobject>

        <para>For example, this is a view of the raw XML:</para>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/doc/DocBook-view-left.png" scale="40" />
          </imageobject>
        </mediaobject>

        <para>Alternatively it could be styled as a document structure:</para>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/doc/DocBook-document-structure-view.png"
                       scale="40" />
          </imageobject>
        </mediaobject>

        <para>This can then be used to navigate, collapsing sections if
        needed.</para>
      </sect1>

      <sect1>
        <title>Knowing where you are</title>

        <para>The position within the document is shown as a XPath like
        expression. If the unstyled view is open, then the current position is
        highlighted (even if the section is collapsed). In the styled view the
        current cursor position is shown just as in a regular word
        processor.</para>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/doc/DocBook-navigate-xpath.png"
                       scale="35" />
          </imageobject>
        </mediaobject>
      </sect1>

      <sect1>
        <title>Selecting Content (eg to delete/move, or prior to adding new
        content)s</title>

        <para>The XMLMind editor understands the structure of DocBook
        documents, and will only let you enter content where it is valid to do
        so. What you can do (in terms of edits) therefore depends on where you
        are in the document.</para>

        <para>Use <emphasis>Select &gt; Select Parent</emphasis>
        (<command>ctrl+up</command>) to successively select larger segments of
        the document; and <emphasis>Select &gt; Select Child</emphasis>
        (<command>ctrl+down</command>) to selects smaller segments.</para>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/doc/DocBook-selectingcontent-1.png"
                       scale="40" />
          </imageobject>
        </mediaobject>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/doc/DocBook-selectingcontent-2.png"
                       scale="40" />
          </imageobject>
        </mediaobject>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/doc/DocBook-selectingcontent-3.png"
                       scale="40" />
          </imageobject>
        </mediaobject>
      </sect1>

      <sect1>
        <title>Writing Content</title>

        <sect2>
          <title>Adding New Paragraphs</title>

          <para>To modify the content in a paragraph, just start writing!
          Hitting enter will start a new paragraph; delete will join two
          paragraphs together. Behind the scenes the &lt;para&gt; elements are
          added.</para>
        </sect2>

        <sect2>
          <title>Formatting Existing Paragraphs</title>

          <para>Using <emphasis>Edit &gt; Insert</emphasis>
          (<command>ctrl+I</command>) within a paragraph will only bring up
          elements that are valid within that paragraph, such as
          <literal>emphasis</literal>:</para>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/doc/DocBook-insert-within.png"
                         scale="40" />
            </imageobject>
          </mediaobject>

          <para>That said, for adding tags within a paragraph (such as
          emboldening or emphasis), it is generally easier to write the words
          and then use <emphasis>Edit &gt; Convert (wrap)</emphasis>. First,
          highlight the words by holding shift and then navigating as usual
          (eg <command>shift+left</command>, <command>shift+right</command>).
          Then, use <emphasis>Edit&gt;Convert(wrap)</emphasis> to add the
          emphasis.</para>
        </sect2>

        <sect2>
          <title>Adding a new heading (sect1, sect2) etc</title>

          <para>In general, use <emphasis>Edit &gt; Insert After</emphasis>
          (<command>ctrl+J</command>) after to add new content after the
          current location, and <emphasis>Edit &gt; Insert Before</emphasis>
          (<command>ctrl+H</command>) to insert before. This will bring up a
          list of valid elements in the top right:</para>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/doc/DocBook-inserting-sections.png"
                         scale="40" />
            </imageobject>
          </mediaobject>

          <para>Note that it isn't possible to add a new subsection in the
          middle of existing paragraphs; as the screenshot below shows,
          attempting to add a section "sect3" under <emphasis>this</emphasis>
          paragraph would not be allowed, for example:</para>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/doc/DocBook-cant-add-section-in-middle.png"
                         scale="70" />
            </imageobject>
          </mediaobject>

          <para>Instead, go to last paragraph (eg like this one) and add the
          subsection there. Then cut-and-paste the content around as
          required.</para>
        </sect2>

        <sect2>
          <title>Adding lists</title>

          <para>Adding lists are added as for any element: use
          <command>ctrl+J</command> and then select
          <literal>itemizedlist</literal> (unordered list) or
          <literal>&lt;orderedlist&gt;</literal>. You’ll get the first
          <literal>listitem</literal> for free. Create new list items by
          selecting the current list item (<command>ctrl+up</command> as far
          as required) then use <command>ctrl+J</command>.</para>

          <para>If you want to terminate the list, then select the current
          list (<command>ctrl+up</command>), then <command>ctrl+J</command>
          and select <literal>para</literal> for next paragraph.</para>
        </sect2>

        <sect2>
          <title>Adding Images</title>

          <para>Images should be saved as <filename>.png</filename> files,
          under the <filename>images</filename> subdirectory (relative the
          directory holding <filename>xxx-guide.xml</filename>).</para>

          <para>Images should be embedded into the documentation using either
          a <sgmltag>mediaobject/imageobject/imagedata</sgmltag> tag or a
          <sgmltag>screenshot/mediaobject/imageobject/imagedata</sgmltag> tag.
          In XMLMind, use Edit&gt;Insert and select screenshot:</para>

          <screenshot>
            <screeninfo>Image</screeninfo>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/doc/embedded-imagedata.png"
                           scale="50" />
              </imageobject>
            </mediaobject>
          </screenshot>

          <para>The outer <sgmltag>imagedata</sgmltag> tag should have an
          appropriate <varname>scale</varname> attribute; a value of 50 (note:
          <emphasis>not</emphasis> 50%) works reasonably well:</para>

          <screenshot>
            <screeninfo>ImageData Attributes</screeninfo>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/doc/embedded-image-attributes.png"
                           scale="50" />
              </imageobject>
            </mediaobject>
          </screenshot>
        </sect2>

        <sect2>
          <title>Adding and Altering Tables</title>

          <para>Use <emphasis>Edit &gt; Insert After</emphasis> (or
          <emphasis>Edit &gt; Insert Before</emphasis>), and then select one
          of the table elements:</para>

          <itemizedlist>
            <listitem>
              <para><literal>table</literal></para>
            </listitem>

            <listitem>
              <para><literal>table (head_column)</literal></para>

              <para>to include a header column (on the left hand side)</para>
            </listitem>

            <listitem>
              <para><literal>table (head_row)</literal></para>

              <para>to include a header row</para>
            </listitem>

            <listitem>
              <para><literal>table (head_row_column)</literal></para>

              <para>to include a header row and column</para>
            </listitem>
          </itemizedlist>

          <para>This will create a 2x2 table body with a header row and/or
          column if requested. Then use DocBook &gt; Column &gt; Insert or
          DocBook &gt; Row &gt; Insert to adjust the number of columns and
          rows as required.</para>

          <para>To adjust the width of columns, select the first row and then
          use Edit&gt;Insert before to insert &lt;colspec&gt; elements.</para>

          <para>It's also possible to merge cells using
          DocBook&gt;Cell&gt;Increment ... Span</para>
        </sect2>
      </sect1>

      <sect1>
        <title>Deleting Content</title>

        <para>To delete content, select the content first
        (<command>ctrl+up</command> / <command>ctrl+down</command>), then
        <emphasis>Edit &gt; Delete</emphasis>
        (<command>ctrl+K</command>).</para>

        <para>In general you shouldn’t need to use the <emphasis>Edit &gt;
        Force Deletion</emphasis>; instead try adjusting the range being
        selected if <emphasis>Edit &gt; Delete</emphasis> isn’t
        enabled.</para>
      </sect1>

      <sect1>
        <title>Moving Content</title>

        <para>Select the content you want using <command>ctrl+up</command>. If
        necessary extend the selection using <emphasis>Select &gt; Extend
        Selection to Following Sibling</emphasis> or <emphasis>Select &gt;
        Extend Selection to Preceding Sibling</emphasis>.</para>

        <para>Use <emphasis>Edit &gt; Cut</emphasis> to cut, and then
        <emphasis>Edit &gt; Paste After</emphasis> or <emphasis>Edit &gt;
        Paste Before</emphasis> to paste wherever. If these are greyed out,
        bear in mind that XmlMind won’t let you paste in content where it
        would be invalid. If necessary, adjust the selection until they become
        enabled.</para>
      </sect1>
    </chapter>
  </part>

  <part>
    <title>Release Process</title>

    <partintro>
      <para>This part of the guide describes the release process for
      <emphasis>Apache Isis</emphasis>, in particular as it applies to the
      requirements of the Apache Software Foundation. It consists of:</para>

      <itemizedlist>
        <listitem>
          <para>an overview of the release process (see <xref
          linkend="chp.ReleaseOverview" />)</para>
        </listitem>

        <listitem>
          <para>the detailed steps for performing a snapshot release (see
          <xref linkend="chp.SnapshotReleases" />)</para>
        </listitem>

        <listitem>
          <para>the detailed steps for performing a formal release (see <xref
          linkend="chp.FormalRelease" />)</para>
        </listitem>
      </itemizedlist>
    </partintro>

    <chapter id="chp.ReleaseOverview">
      <title>Overview</title>

      <para>The following diagram summarizes the various stages involved in
      building and releasing <emphasis>Apache Isis</emphasis>.</para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/release/release-process.png" scale="55" />
        </imageobject>
      </mediaobject>

      <para>The steps are:</para>

      <orderedlist>
        <listitem>
          <para>check out code using svn checkout (see <xref
          linkend="chp.BuildingIsisFromSource" />).</para>
        </listitem>

        <listitem>
          <para>make changes, implements features, fixes bugs. These are
          installed, in the normal way, to local repo using <code>mvn
          install</code>.</para>
        </listitem>

        <listitem>
          <para>when the codebase is ready for a snapshot release, manually
          deploy the snapshot into the Apache snapshot repo. This is discussed
          further in <xref linkend="sec.ManuallyDeploySnapshot" />.</para>

          <para>In addition, the snapshot version of the site may be deployed
          to the website. This is discussed further in <xref
          linkend="sec.ManuallyDeploySite" />.</para>
        </listitem>

        <listitem>
          <para>when the codebase is ready for a formal release (-RCn), the
          contributor uses <code>mvn release:prepare</code> to produce the
          release artifacts. This goal:</para>

          <itemizedlist>
            <listitem>
              <para>update the <acronym>POM</acronym>s from
              <filename>x.x.x-SNAPSHOT-incubating</filename> to
              <filename>x.x.x-RCn-incubating</filename></para>
            </listitem>

            <listitem>
              <para>builds and verifies the codebase</para>
            </listitem>

            <listitem>
              <para>commits the changes</para>
            </listitem>

            <listitem>
              <para>creates a tag copy</para>
            </listitem>

            <listitem>
              <para>updates the POMs for the next iteration, ie from
              <filename>x.x.x-RCn-incubating</filename> to
              <filename>x.x.y-incubating-SNAPSHOT</filename></para>
            </listitem>
          </itemizedlist>

          <para>On the local computer the local repo
          (<filename>~/.m2/repository</filename>) will have signed versions of
          release (x.x.x) versions of all modules, and in trunk there will
          also be a signed zip of the source. See <xref
          linkend="sec.MavenReleasePrepare" />.</para>
        </listitem>

        <listitem>
          <para>the signed version of the source is uploaded to the
          contributors home directory ready for voting. See <xref
          linkend="sec.UploadReleaseForVoting" />.</para>
        </listitem>

        <listitem>
          <para>the signed versions of the Maven binaries are deployed to the
          Apache staging directory ready for voting. Again, see <xref
          linkend="sec.UploadReleaseForVoting" />.</para>
        </listitem>

        <listitem>
          <para>the release is voted on by the community.</para>

          <itemizedlist>
            <listitem>
              <para>If the vote is rejected, then fixes are made and then the
              above steps (2 through 7) are performed again with the next
              release candidate.</para>
            </listitem>

            <listitem>
              <para>If the vote is accepted, then the above steps (2 through
              7) are performed again, but without the -RCn suffix</para>
            </listitem>
          </itemizedlist>

          <para>While in the incubator a vote must also be performed by the
          Incubator PMC (ie on mailto:incubator@apache.org). It is permissible
          to perform these in parallel if required. See <xref
          linkend="sec.Voting" /></para>
        </listitem>

        <listitem>
          <para>once the vote is passed, the source release should be
          copied/moved to the "dist" folder, where it will be mirrored. It can
          also be referenced as a download at this point. See <xref
          linkend="sec.PromotingReleaseToDistribution" /></para>
        </listitem>

        <listitem>
          <para>once the vote is passed, the binary release should be promoted
          from the staging repository to release repository (again, see <xref
          linkend="sec.PromotingReleaseToDistribution" />), after
          which...</para>
        </listitem>

        <listitem>
          <para>... it will be automatically be replicated up to Maven central
          repo</para>
        </listitem>

        <listitem>
          <para>Finally, the website should be deployed manually. See <xref
          linkend="sec.ManuallyDeployReleaseSite" />.</para>
        </listitem>
      </orderedlist>

      <para>The following chapters provide detail on the above steps.</para>
    </chapter>

    <chapter id="chp.SnapshotReleases">
      <title>Snapshot Release</title>

      <para>This chapter describes the steps that make up deploying a snapshot
      release.</para>

      <para>As you'll see if you compare them with the steps required to make
      a formal release (see <xref linkend="chp.FormalRelease" />), they are
      significantly less arduous. This is because the legal status of a
      snapshot release does NOT constitute an actual release of the ASF; it is
      merely provided as a convenience for users.</para>

      <sect1>
        <title>Contributor Prerequisites</title>

        <para>The only prerequistes for performing a release is that the
        contributor has configured their environment. This involves updating
        your <filename>settings.xml</filename> file:</para>

        <programlisting>&lt;settings&gt;
  &lt;servers&gt;
    &lt;!-- To publish a snapshot of some part of Maven --&gt;
    &lt;server&gt;
      &lt;id&gt;apache.snapshots.https&lt;/id&gt;
      &lt;username&gt;xxx&lt;/username&gt;
      &lt;password&gt;yyy&lt;/password&gt;
    &lt;/server&gt;
    ...
  &lt;/servers&gt;
  ...
&lt;/settings&gt;</programlisting>

        <para>where 'xxx' and 'yyy' constitute your apache LDAP username and
        password.</para>

        <para>This information is as documented in the <ulink
        url="http://www.apache.org/dev/publishing-maven-artifacts.html#dev-env">ASF
        documentation</ulink>.</para>

        <para><note>
            <para>It is also possible to configure to use
            <filename>.ssh</filename> secure keys, and thereby avoid
            hardcoding your Apache <acronym>LDAP</acronym> password into your
            <filename>.m2/settings.xml</filename> file. A description of how
            to do this can be found, for example, <ulink
            url="http://incubator.apache.org/bval/cwiki/release-setup.html">here</ulink>.</para>
          </note></para>
      </sect1>

      <sect1 id="sec.ManuallyDeploySnapshot">
        <title>Manually Deploy Snapshot</title>

        <sect2>
          <title>Sanity Check</title>

          <para>Before deploying the snapshot, perform a quick sanity
          check:</para>

          <itemizedlist>
            <listitem>
              <para>builds ok (<code>mvn clean install</code>)</para>
            </listitem>

            <listitem>
              <para>archetype runs ok (<code>-D
              archetypeCatalog=local</code>)</para>
            </listitem>

            <listitem>
              <para>app generated from the archetype runs ok</para>
            </listitem>
          </itemizedlist>
        </sect2>

        <sect2>
          <title>Deploy All Modules</title>

          <para>Deploy all modules using:</para>

          <programlisting>mvn -D deploy=snapshot deploy</programlisting>

          <para>This will deploy all the modules that make up a release,
          including the archetype.</para>

          <para>To confirm that they are present, browse to the Nexus
          repository manager <ulink
          url="https://repository.apache.org">https://repository.apache.org</ulink>
          and search for "isis".</para>

          <para>Be warned: this is liable will take a long time.</para>
        </sect2>
      </sect1>

      <sect1 id="sec.ManuallyDeploySite">
        <title>Manually Uploading the Website</title>

        <sect2>
          <title>Update <filename>archetype-catalog.xml</filename> (if
          required)</title>

          <para>The <emphasis>Isis</emphasis> site comes with its own
          <filename>archetype-catalog.xml</filename> so that the quickstart
          archetype can be used from the snapshot repository by those who want
          to use the "latest-and-greatest". This file lives in
          <filename>.../trunk/src/main/site/resources</filename>, and looks
          something like:</para>

          <programlisting>&lt;archetype-catalog&gt;
  &lt;archetypes&gt;
    &lt;archetype&gt;
       &lt;groupId&gt;org.apache.isis.support&lt;/groupId&gt;
       &lt;artifactId&gt;quickstart-archetype&lt;/artifactId&gt;
       &lt;version&gt;x.x.x-incubating-SNAPSHOT&lt;/version&gt;
       &lt;repository&gt;http://repository.apache.org/content/groups/snapshots-group/&lt;/repository&gt;
       &lt;description&gt;Isis Quickstart Archetype&lt;/description&gt;
    &lt;/archetype&gt;
    ...
  &lt;/archetypes&gt;
&lt;/archetype-catalog&gt;</programlisting>

          <para>Where <code>x.x.x-incubating-SNAPSHOT</code> is the current
          release. It may also have entries for previous SNAPSHOT
          releases.</para>

          <para>If it missing an entry for the current snapshot, then update
          it and commit.</para>
        </sect2>

        <sect2>
          <title>Build the site</title>

          <para>Next, build the site, as per <xref
          linkend="chp.BuildingSiteAndDocs" />.</para>

          <para>This should generate the current site in
          <filename>/tmp/m2-sites/isis</filename>.</para>
        </sect2>

        <sect2>
          <title>Upload the site</title>

          <para>Finally, upload the site (as a <acronym>ZIP</acronym>) to your
          local account on <code>people.apache.org</code>:</para>

          <itemizedlist>
            <listitem>
              <para>cd <filename>/tmp/m2-sites</filename></para>
            </listitem>

            <listitem>
              <para>zip up isis to <filename>isis.zip</filename></para>
            </listitem>

            <listitem>
              <para>scp the <filename>isis.zip</filename> to
              <filename>people.apache.org/~</filename></para>
            </listitem>

            <listitem>
              <para>login to <code>people.apache.org</code> using ssh:</para>

              <programlisting>ssh -l xxxxxxxx@people.apache.org</programlisting>

              <para>where xxxxxxx is your apache user Id</para>
            </listitem>

            <listitem>
              <para>unzip <filename>isis.zip</filename></para>

              <para>This should leave you with the same directory, isis, as
              was previously in /tmp/m2-sites.</para>
            </listitem>
          </itemizedlist>

          <para>Then, copy the exploded ZIP into
          /www/incubator.apache.org:</para>

          <itemizedlist>
            <listitem>
              <para>Switch to the destination directory:</para>

              <programlisting>cd /www/incubator.apache.org</programlisting>
            </listitem>

            <listitem>
              <para>Move the previous site to one side:</para>

              <programlisting>mv isis isis-yyyymmdd </programlisting>

              <para>where <emphasis>yyyymmdd</emphasis> is the date that the
              previous version was uploaded</para>
            </listitem>

            <listitem>
              <para>move the new site into the distribution location:</para>

              <para>mv ~/isis isis</para>
            </listitem>

            <listitem>
              <para>make the new site readable by all:</para>

              <programlisting>chmod -R g+w isis
chgrp -R incubator isis
for a in `find isis -type d -print` ; do chmod g+s $a ; done</programlisting>
            </listitem>
          </itemizedlist>
        </sect2>
      </sect1>
    </chapter>

    <chapter id="chp.FormalRelease">
      <title>Formal Release</title>

      <abstract>
        <para>This chapter describes the steps that make up a formal release.
        </para>
      </abstract>

      <para>Before starting off the release process it is essential to gain
      consensus on the isis-dev mailing list that this is the right time for a
      release and to agree its content. Allow at least a week for this
      discussion.</para>

      <para>Once agreed, the formal release can begin. There are a number of
      prerequisites to the release, in terms of (a) the codebase itself, (b)
      the community process, and (c) the contributor acting as release manager
      and performing the release. There are then the actual steps required to
      perform the release (as per the diagram in <xref
      linkend="chp.ReleaseOverview" />). This chapter discusses all of these
      things.</para>

      <sect1>
        <title>Code Prerequisites</title>

        <para>Before making any formal release, there are a number of
        prerequisites that should always be checked.</para>

        <sect2 id="sec.SanityCheck">
          <title>Sanity check</title>

          <para>Before deploying the snapshot, perform a quick sanity
          check:</para>

          <itemizedlist>
            <listitem>
              <para>builds ok (<code>mvn clean install</code>)</para>
            </listitem>

            <listitem>
              <para>site builds ok (<code>mvn site-deploy -D deploy=local -D
              site=full</code>)</para>
            </listitem>

            <listitem>
              <para>archetype is up-to-date</para>
            </listitem>

            <listitem>
              <para>archetype runs ok (<code>-D
              archetypeCatalog=local</code>)</para>
            </listitem>

            <listitem>
              <para>app generated from the archetype runs ok</para>
            </listitem>
          </itemizedlist>
        </sect2>

        <sect2>
          <title>Code Cleanup / Formatting</title>

          <para>Make sure that all source code has been cleaned up and
          formatted according to the Isis and ASF conventions:</para>

          <itemizedlist>
            <listitem>
              <para>code formatting should be checked as per <xref
              linkend="sec.CodeStyleFormatter" />;</para>
            </listitem>

            <listitem>
              <para>imports should be organized as per <xref
              linkend="sec.ImportOrder" />;</para>
            </listitem>

            <listitem>
              <para>code cleanup should be performed as per <xref
              linkend="sec.CodeStyleCleanup" />. (this performs both code
              formatting and organizing imports)</para>
            </listitem>
          </itemizedlist>

          <para>Optionally, you might also want to run and address warnings
          from:</para>

          <itemizedlist>
            <listitem>
              <para>checkstyle, as per <xref
              linkend="sec.Checkstyle" />;</para>
            </listitem>

            <listitem>
              <para>PMD, as per <xref linkend="sec.PMD" />;</para>
            </listitem>

            <listitem>
              <para>findbugs, as per <xref linkend="sec.FindBugs" />.</para>
            </listitem>
          </itemizedlist>
        </sect2>

        <sect2 id="sec.RatTool">
          <title>License Notice (RAT Tool)</title>

          <para>The Apache Release Audit Tool (RAT) is designed to perform a
          number of basic checks, most signifcant being missing copyright
          header files.</para>

          <para>In theory it can be run from Maven (<code>mvn
          rat:check</code>), with the <filename>maven-rat-plugin</filename>
          being inherited from the Apache parent <acronym>POM</acronym>.
          However, although the plugin is configured in the Isis parent
          <acronym>POM</acronym> to exclude certain files (eg
          <filename>.java.hsp</filename> project files for Structure101).
          However, unfortunately the plugin seems to ignore any configured
          exclusions, making this method of performing a check somewhat
          useless.</para>

          <para>Instead, the tool can be run from the command-line; a JAR
          binary of the tool has been checked into the <emphasis>Apache
          Isis</emphasis> codebase. </para>

          <para>First, clean up any generated artifacts:</para>

          <programlisting>mvn clean</programlisting>

          <para>Then, run the tool using:</para>

          <programlisting>java -jar apache-rat-0.8-SNAPSHOT.jar \
  -d . --exclude \
  resources.txt site.vm \
  *.project *.classpath *.launch *.importorder \
  *.java.hsp \
  *.ucd *.ucls \
  *-LICENSE.txt \
  fop-cust.xsl html-cust.xsl *.ent *.dtd *.pdn catalog.xml *.mod usage.txt screen.css docbook.cat \
  org.apache.isis.viewer.wicket.ui.ComponentFactory \
  fixture-data test.data example.ldif slapd.conf \
  .plxarc MANIFEST.MF \
  .log \
  &gt;/tmp/rat.txt</programlisting>

          <para>where:</para>

          <itemizedlist>
            <listitem>
              <para><filename>resources.txt, site.vm</filename> are resources
              to do with site generation</para>
            </listitem>

            <listitem>
              <para><filename>.project, .classpath, .launch</filename> and
              <filename>.importorder</filename> are Eclipse
              <acronym>IDE</acronym> project files</para>
            </listitem>

            <listitem>
              <para><filename>.java.hsp</filename> are the Structure101
              project files</para>
            </listitem>

            <listitem>
              <para><filename>.ucd</filename> and <filename>.ucls</filename>
              are Soyatec (<acronym>UML</acronym> plugin) project files</para>
            </listitem>

            <listitem>
              <para><filename>-LICENSE.txt</filename> are required license
              files for certain third party dependencies</para>
            </listitem>

            <listitem>
              <para><filename>fop-cust.xsl html-cust.xsl *.ent *.dtd *.pdn
              catalog.xml *.mod usage.txt screen.css docbook.cat</filename>
              are files related to DocBook generation</para>
            </listitem>

            <listitem>
              <para><filename>org.apache.isis.viewer.wicket.ui.ComponentFactory</filename>
              is a manifest file required for dynamic classloading</para>
            </listitem>

            <listitem>
              <para><filename>fixture-data test.data example.ldif
              slapd.conf</filename> are test resource files</para>
            </listitem>

            <listitem>
              <para><filename>.plxarc</filename> and
              <filename>MANIFEST.MF</filename> are artifacts generated by
              various Maven goals</para>
            </listitem>

            <listitem>
              <para><filename>.log</filename> are any generated log
              files</para>
            </listitem>
          </itemizedlist>

          <para>Then, review any missing license notes using:</para>

          <programlisting>cat /tmp/rat.txt \
   | grep '^ !???' \
   | grep -v "tests-common/.*\.xml" \
   | grep -v "tests-common/.*/tests\..*" \
   | grep -v "tests-common/.*\.xml" \
   | grep -v "tests/.*\.xml"</programlisting>

          <para>where:</para>

          <itemizedlist>
            <listitem>
              <para><filename>!???</filename> is used to identify those files
              that are missing license notes</para>
            </listitem>

            <listitem>
              <para><filename>tests-common/*</filename> and
              <filename>tests/*</filename> ignores certain test files</para>
            </listitem>
          </itemizedlist>

          <para>Investigate and fix any reported violations.</para>
        </sect2>

        <sect2>
          <title>Missing License Check</title>

          <para>Although <emphasis>Apache Isis</emphasis> has no dependencies
          which have incompatible licenses, the <acronym>POM</acronym>s for
          these dependencies (in the Maven central repo) do not necessarily
          contain the required license information. This results in the
          <filename>META-INF/DEPENDENCIES</filename> file and generated Maven
          site listing dependencies as being "unknown".</para>

          <para>Fortunately, Maven allows the missing information to be
          provided by configuring the
          <package>maven-remote-resources-plugin</package>. This is stored in
          the
          <filename>src/main/appended-resources/supplemental-models.xml</filename>
          file in the parent <package>[oai:isis-parent]</package>
          module.</para>

          <para>To capture the missing license information, use:</para>

          <programlisting>mvn license:download-licenses
groovy checkmissinglicenses.groovy</programlisting>

          <para>This Maven plugin creates a <filename>license.xml</filename>
          file in the <filename>target/generated</filename>-resources/
          directory of each module.</para>

          <para>Then, run the <emphasis>Isis</emphasis> script:</para>

          <programlisting>groovy checkmissinglicenses.groovy</programlisting>

          <para>This searches for all <filename>licenses.xml</filename> files,
          and compares them against the contents of the
          <filename>supplemental-models.xml</filename> file. For example, the
          output could be something like:</para>

          <programlisting>licenses to add to supplemental-models.xml:

[org.slf4j, slf4j-api, 1.5.7]
[org.codehaus.groovy, groovy-all, 1.7.2]


licenses to remove from supplemental-models.xml (are spurious):

[org.slf4j, slf4j-api, 1.5.2]</programlisting>

          <para>If any missing entries are listed or are spurious, then update
          <filename>supplemental-models.xml</filename> and try again.</para>
        </sect2>
      </sect1>

      <sect1>
        <title>JIRA Prerequisites</title>

        <sect2>
          <title>Close all JIRA tickets for the release</title>

          <para>All JIRA tickets for the release should be closed, or moved to
          future releases if not yet addressed.</para>
        </sect2>

        <sect2>
          <title>Generate Release Notes</title>

          <para>Each release should a release note page called
          <filename>release-x.x.x.html</filename>, in
          <filename>src/site/resources</filename> (in
          <package>[oai:isis-parent]</package>). This is linked to from the
          download page (<filename>src/site/apt/downloads.apt.vm</filename>);
          the download page should not need updating.</para>

          <para>The release notes can be generated using JIRA, using the
          procedure documented <ulink
          url="http://confluence.atlassian.com/display/JIRA/Creating+Release+Notes">here</ulink>.
          If any of the tickets closed are tasks/subtasks, then please edit
          the contents of the file to associate them back together
          again.</para>
        </sect2>

        <sect2>
          <title>Update STATUS file</title>

          <para>The trunk holds a <filename>STATUS</filename> file which is a
          brief summary of the current status of the project. Update this file
          prior to cutting the release.</para>
        </sect2>
      </sect1>

      <sect1>
        <title>Contributor (Release Manager) Prerequisites</title>

        <para>In order that a contributor can make a release it is necessary
        for them to have generated a key and had that key recognized by other
        members of the ASF.</para>

        <para>For background information on this topic, see the <ulink
        url="http://www.apache.org/dev/release-signing.html">release signing
        page</ulink> and the <ulink
        url="http://www.apache.org/dev/openpgp.html#generate-key">openpgp
        page</ulink> on the Apache wiki.</para>

        <sect2>
          <title>Install and Configure gpg</title>

          <para>Download and install GnuPG (gpg), version 1.4.10 or
          higher.</para>

          <para>Then, edit <filename>~/.gnupg/gpg.conf</filename> (on Windows,
          the file to edit is
          <filename>C:\Users\xxx\AppData\Roaming\gnupg\gpg.conf</filename>) so
          that the default is to generate a strong key:</para>

          <programlisting>{code}
personal-digest-preferences SHA512
cert-digest-algo SHA512
default-preference-list SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed
{code}</programlisting>
        </sect2>

        <sect2>
          <title>Key Generation</title>

          <para>The ASF requires that keys are signed with a key (or subkey)
          based on RSA 4096 bits. To do this:</para>

          <programlisting>$ gpg --gen-key
gpg (GnuPG) 1.4.11; Copyright (C) 2010 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Please select what kind of key you want:
   (1) RSA and RSA (default)
   (2) DSA and Elgamal
   (3) DSA (sign only)
   (4) RSA (sign only)
Your selection?</programlisting>

          <para>Specify RSA key:</para>

          <programlisting>Your selection? 1

RSA keys may be between 1024 and 4096 bits long.
What keysize do you want? (2048)</programlisting>

          <para>Specify key length as 4096 bits:</para>

          <programlisting>What keysize do you want? (2048) 4096
Requested keysize is 4096 bits

Please specify how long the key should be valid.
         0 = key does not expire
      &lt;n&gt;  = key expires in n days
      &lt;n&gt;w = key expires in n weeks
      &lt;n&gt;m = key expires in n months
      &lt;n&gt;y = key expires in n years
Key is valid for? (0)</programlisting>

          <para>Specify key as non-expiring:</para>

          <programlisting>Key is valid for? (0) 0
Key does not expire at all
Is this correct? (y/N) y

You need a user ID to identify your key; the software constructs the user ID
from the Real Name, Comment and Email Address in this form:
    "Heinrich Heine (Der Dichter) &lt;heinrichh@duesseldorf.de&gt;"

Real name: </programlisting>

          <para>Enter your name, email and comment:</para>

          <itemizedlist>
            <listitem>
              <para>use your apache.org email</para>
            </listitem>

            <listitem>
              <para>the comment should be "CODE SIGNING KEY" </para>
            </listitem>
          </itemizedlist>

          <programlisting>Real name: Xxx Xxxxxxxxx
Email address: &lt;xxx@apache.org&gt;
Comment: CODE SIGNING KEY
You selected this USER-ID:
    "Xxx Xxxxxxxxx (CODE SIGNING KEY) &lt;xxx@apache.org&gt;"

Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O

You need a Passphrase to protect your secret key.
Enter passphrase:</programlisting>

          <para>Provide a passphrase to secure your key. </para>

          <programlisting>Enter passphrase:
Repeat passphrase:</programlisting>

          <para>GPG will goes on to generate your key:</para>

          <programlisting>We need to generate a lot of random bytes. It is a good idea to perform
some other action (type on the keyboard, move the mouse, utilize the
disks) during the prime generation; this gives the random number
generator a better chance to gain enough entropy.
...+++++
.........................+++++
We need to generate a lot of random bytes. It is a good idea to perform
some other action (type on the keyboard, move the mouse, utilize the
disks) during the prime generation; this gives the random number
generator a better chance to gain enough entropy.
....+++++
...+++++
gpg: key nnnnnnnn marked as ultimately trusted
public and secret key created and signed.

gpg: checking the trustdb
gpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust model
gpg: depth: 0  valid:   1  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 1u
pub   4096R/nnnnnnnn yyyy-mm-dd
      Key fingerprint = xxxx xxxx xxxx xxxx xxxx  xxxx xxxx xxxx xxxx xxxx
uid                  Xxx Xxxxxx &lt;xxx@apache.org&gt;
sub   4096R/kkkkkkkk yyyy-mm-dd</programlisting>

          <para>The public key with id nnnnnnnn should now be stored in
          <filename>~/.gnupg/pubring.pgp</filename> (on Windows 7, this is in
          c<filename>:/Users/xxx/AppData/Roaming/gnupg/pubring.pgp</filename>).
          </para>

          <para>To confirm the key has been generated, use:</para>

          <programlisting>$ gpg --list-keys --fingerprint</programlisting>

          <para>The key Id is the one true way to identify the key, and is
          also the last 8 digits of the fingerprint. The corresponding secret
          key for id nnnnnnnn is stored in
          <filename>~/.gnupg/secring.pgp</filename> (on Windows 7, this is in
          <filename>c:/Users/xxx/AppData/Roaming/gnupg/secring.pgp</filename>).</para>

          <para>It's also worth confirming the key has the correct preference
          of algorithms (reflecting the initial configuration we did earlier).
          For this, enter the gpg shell for your new key:</para>

          <para><programlisting>$ gpg --edit-key nnnnnnnnn
gpg&gt;</programlisting>where nnnnnnnn is your key id. Now, use the 'showpref'
          subcommand to list details:</para>

          <programlisting>gpg&gt; showpref
[ultimate] (1). Xxx Xxxxxxxx (CODE SIGNING KEY) &lt;xxx@apache.org&gt;
     Cipher: AES256, AES192, AES, CAST5, 3DES
     Digest: SHA512, SHA384, SHA256, SHA224, SHA1
     Compression: ZLIB, BZIP2, ZIP, Uncompressed
     Features: MDC, Keyserver no-modify

gpg&gt;</programlisting>

          <para>The Digest line should list SHA-512 first and SHA-1 last.
          </para>

          <para>Finally, remember to take a backup of your key and the keyring
          (ie, backup the <filename>.gnupg</filename> directory and its
          contents).</para>
        </sect2>

        <sect2>
          <title>Subkey Generation</title>

          <para>It's recommended to use a subkey with an expiry date to sign
          releases, rather than your main, non-expiring subkey. If a subkey is
          present, then gpg will use it in preference to the main key.</para>

          <para>Enter the gpg shell using (the identifier of) your main
          key:</para>

          <programlisting>gpg --edit-key xxxxxxxx
gpg&gt;</programlisting>

          <para>Type 'addkey' to create a subkey, and enter your passphrase
          for the main key:</para>

          <para><programlisting>gpg&gt; addkey
Key is protected.
[enter your secret passphrase]

You need a passphrase to unlock the secret key for
user: "Dan Haywood (CODE SIGNING KEY) &lt;danhaywood@apache.org&gt;"
4096-bit RSA key, ID xxxxxxxx, created 2011-02-01

Please select what kind of key you want:
   (3) DSA (sign only)
   (4) RSA (sign only)
   (5) Elgamal (encrypt only)
   (6) RSA (encrypt only)
Your selection?</programlisting></para>

          <para>Select (4) to choose an RSA key for signing:</para>

          <programlisting>Your selection? 4

RSA keys may be between 1024 and 4096 bits long.
What keysize do you want? (2048) 4096

Requested keysize is 4096 bits

Please specify how long the key should be valid.
         0 = key does not expire
      &lt;n&gt;  = key expires in n days
      &lt;n&gt;w = key expires in n weeks
      &lt;n&gt;m = key expires in n months
      &lt;n&gt;y = key expires in n years
Key is valid for?</programlisting>

          <para>Specify that the key is valid for 1 year:</para>

          <programlisting>Key is valid for? (0) 1y

Key expires at yy/MM/dd hh:mm:ss
Is this correct? (y/N) y
Really create? (y/N) y
We need to generate a lot of random bytes. It is a good idea to perform
some other action (type on the keyboard, move the mouse, utilize the
disks) during the prime generation; this gives the random number
generator a better chance to gain enough entropy.
...+++++
.+++++

pub  4096R/xxxxxxxx  created: yyyy-mm-dd  expires: never       usage: SC
                     trust: ultimate      validity: ultimate
sub  4096R/xxxxxxxx  created: yyyy-mm-dd  expires: never       usage: E
sub  4096R/xxxxxxxx  created: yyyy-mm-dd  expires: yyYY-mm-dd  usage: S
[ultimate] (1). Dan Haywood (CODE SIGNING KEY) &lt;danhaywood@apache.org&gt;

gpg&gt;</programlisting>

          <para>Quit the gpg shell; you now have a subkey.</para>
        </sect2>

        <sect2>
          <title>Generate a Revocation Certificate</title>

          <para>It's good practice to generate a number of revocation
          certificates so that the key can be revoked if it happens to be
          compromised. See <ulink
          url="http://www.apache.org/dev/openpgp.html#revocation-certs">the
          gpg page</ulink> on the Apache wiki for more background on this
          topic.</para>

          <para>First, generate a "no reason specified" key:</para>

          <programlisting>$ gpg --output revoke-nnnnnnnn-0.asc --armor --gen-revoke nnnnnnnn

sec  4096R/nnnnnnnn yyyy-mm-dd Xxx Xxxxxxx (CODE SIGNING KEY) &lt;xx@apache.org&gt;
Create a revocation certificate for this key? (y/N) Y

Please select the reason for the revocation:
  0 = No reason specified
  1 = Key has been compromised
  2 = Key is superseded
  3 = Key is no longer used
  Q = Cancel
(Probably you want to select 1 here)
Your decision?</programlisting>

          <para>Select 0.</para>

          <programlisting>Your decision? 0

Enter an optional description; end it with an empty line:</programlisting>

          <para>Provide a description:</para>

          <programlisting>&gt; Generic certificate to revoke key, generated at time of key creation.
&gt;
Reason for revocation: No reason specified
Generic certificate to revoke key, generated at time of key creation.
Is this okay? (y/N)</programlisting>

          <para>Confirm this is ok.</para>

          <programlisting>Is this okay? y

You need a passphrase to unlock the secret key for
user: "Xxx Xxxxxxx (CODE SIGNING KEY) &lt;xxx@apache.org&gt;"
4096-bit RSA key, ID nnnnnnnn, created yyyy-mm-dd

Enter passphrase:</programlisting>

          <para>Enter a passphrase:</para>

          <programlisting>Enter passphrase:
Revocation certificate created.

Please move it to a medium which you can hide away; if Mallory gets
access to this certificate he can use it to make your key unusable.
It is smart to print this certificate and store it away, just in case
your media become unreadable.  But have some caution:  The print system of
your machine might store the data and make it available to others!</programlisting>

          <para>The file 'revoke-nnnnnnnn-0.asc' should be created: Then,
          backup this file.</para>

          <para>Now repeat the process to create two further revocation
          certificates: </para>

          <itemizedlist>
            <listitem>
              <para><code>gpg --output revoke-nnnnnnnn-1.asc --armor
              --gen-revoke nnnnnnnn</code></para>

              <para>Specify reason as "1 = Key has been compromised"</para>
            </listitem>

            <listitem>
              <para><code>gpg --output revoke-nnnnnnnn-3.asc --armor
              --gen-revoke nnnnnnnn</code></para>

              <para>Specify reason as "3 = Key is no longer used"</para>
            </listitem>
          </itemizedlist>

          <para>Backup these files also.</para>

          <para><note>
              <para>if you find that you need to revoke your certificate, this
              <ulink
              url="http://www.hackdiary.com/2004/01/18/revoking-a-gpg-key">blog
              post</ulink> explains how.</para>
            </note></para>
        </sect2>

        <sect2>
          <title>Publish Key</title>

          <para>It is also necessary to publish your key. There are several
          places where this should be done. In most cases, you'll need the
          "armored" " (ie ASCII) representation of your key. This can be
          generated using:</para>

          <programlisting>$ gpg --armor --export nnnnnnnn &gt; nnnnnnnn.asc</programlisting>

          <para>where nnnnnnnn is the id of your public key.</para>

          <para>You'll also need the fingerprint of your key. This can be
          generated using:</para>

          <programlisting>$ gpg --fingerprint nnnnnnnn</programlisting>

          <para>The output from this command includes a line beginning "Key
          fingerprint", followed by a (space delimited) 40 character
          hexadecimal fingerprint. The last 8 characters should be the same as
          the key id (nnnnnnnn).</para>

          <sect3>
            <title>Publish to a public key server</title>

            <para>To a publish your key to a public key server (eg the MIT key
            server hosted at <ulink
            url="http://pgp.mit.edu">http://pgp.mit.edu</ulink>), use the
            procedure below. Public key servers synchronize with each other,
            so publishing to one key server should be sufficient. For
            background reading on this, see the <ulink
            url="http://www.apache.org/dev/release-signing.html#keyserver-upload">release
            signing page</ulink> on the Apache wiki, and the <ulink
            url="http://maven.apache.org/developers/release/pmc-gpg-keys.html">gpg
            key page</ulink> on the Maven wiki.</para>

            <para>To send the key up to the key server:</para>

            <programlisting>$ gpg --send-keys --keyserver pgp.mit.edu nnnnnnnn</programlisting>

            <para>where nnnnnnnn is the key Id.</para>

            <para>Alternatively, you can browse to the <ulink
            url="http://pgp.mit.edu">MIT key server</ulink> and paste in the
            armored representation of your key.</para>

            <para>Confirm the key has been added by browsing to submitting the
            following URL:</para>

            <programlisting>http://pgp.mit.edu:11371/pks/lookup?search=0xnnnnnnnnn&amp;op=vindex</programlisting>

            <para>again, where nnnnnnnn is the key Id.</para>
          </sect3>

          <sect3>
            <title>Publish to your Apache home directory</title>

            <para>The armored representation of your public key should be
            uploaded to your home directory on people.apache.org, and renamed
            as <filename>.pgpkey</filename>. Make sure this is readable by
            all.</para>
          </sect3>

          <sect3>
            <title>Publish to your Apache HTML home directory</title>

            <para>The armored representation of your public key should be
            uploaded to your <filename>public_html</filename> home directory
            on people.apache.org, named nnnnnnnn.asc. Make sure this is
            readable by all.</para>

            <para>Check the file is accessible by browsing to:<programlisting>http://people.apache.org/~xxxxxxxx/nnnnnnnn.asc</programlisting></para>

            <para>where xxxxxxxx is your apache LDAP user name and nnnnnnnn is
            your public key id.</para>
          </sect3>

          <sect3>
            <title>FOAF</title>

            <para>First, check out the committers/info directory:</para>

            <programlisting>svn co https://svn.apache.org/repos/private/committers/info</programlisting>

            <para>Go to Apache FOAF-a-matic <ulink
            url="http://people.apache.org/foaf/foafamatic.html">web
            page</ulink> to generate the FOAF file text (we copy this text out
            in a minute):</para>

            <itemizedlist>
              <listitem>
                <para>enter ASF LDAP user name</para>
              </listitem>

              <listitem>
                <para>enter First name, Last name</para>
              </listitem>

              <listitem>
                <para>for PGP key fingerprints, add Key</para>

                <itemizedlist>
                  <listitem>
                    <para>paste in the key id</para>
                  </listitem>

                  <listitem>
                    <para>paste in the fingerprint</para>
                  </listitem>
                </itemizedlist>
              </listitem>

              <listitem>
                <para>press "Create"</para>
              </listitem>
            </itemizedlist>

            <para>In the box below, you should have a FOAF file, something
            like:</para>

            <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;rdf:RDF
      xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
      xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
      xmlns:foaf="http://xmlns.com/foaf/0.1/"
      xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
      xmlns:pm="http://www.web-semantics.org/ns/pm#"
      xmlns:wot="http://xmlns.com/wot/0.1/"
      xmlns:rss="http://purl.org/rss/1.0/"
      xmlns:dc="http://purl.org/dc/elements/1.1/"
      xmlns:ical="http://www.w3.org/2002/12/cal/ical#"
      xmlns:doap="http://usefulinc.com/ns/doap#"&gt;
  &lt;foaf:Person rdf:ID="danhaywood"&gt;
    &lt;foaf:name&gt;Xxx Xxxxxxxx&lt;/foaf:name&gt;
    &lt;foaf:givenname&gt;Xxx&lt;/foaf:givenname&gt;
    &lt;foaf:family_name&gt;Xxxxxxxx&lt;/foaf:family_name&gt;
    &lt;wot:hasKey&gt;
      &lt;wot:PubKey&gt;
        &lt;wot:fingerprint&gt;nnnn nnnn nnnn nnnn nnnn  nnnn nnnn nnnn nnnn nnnn&lt;/wot:fingerprint&gt;
        &lt;wot:hex_id&gt;nnnnnnnn&lt;/wot:hex_id&gt;
      &lt;/wot:PubKey&gt;
    &lt;/wot:hasKey&gt;
  &lt;/foaf:Person&gt;
&lt;/rdf:RDF&gt;</programlisting>

            <para>(If you are creating the FOAF file for the first time, you
            may want to add additional details).</para>

            <para>From this, copy out the wot:key, and paste into your FDF
            file in committers/info: </para>

            <programlisting>    &lt;wot:hasKey&gt;
      &lt;wot:PubKey&gt;
        &lt;wot:fingerprint&gt;nnnn nnnn nnnn nnnn nnnn  nnnn nnnn nnnn nnnn nnnn&lt;/wot:fingerprint&gt;
        &lt;wot:hex_id&gt;nnnnnnnn&lt;/wot:hex_id&gt;
      &lt;/wot:PubKey&gt;
    &lt;/wot:hasKey&gt;</programlisting>

            <para>Then, manually add in a &lt;wot:pubkeyAddress&gt; element
            within &lt;wot:PubKey&gt;:</para>

            <programlisting>    &lt;wot:hasKey&gt;
      &lt;wot:PubKey&gt;
        &lt;wot:fingerprint&gt;nnnn nnnn nnnn nnnn nnnn  nnnn nnnn nnnn nnnn nnnn&lt;/wot:fingerprint&gt;
        &lt;wot:hex_id&gt;nnnnnnnn&lt;/wot:hex_id&gt;
        &lt;wot:pubkeyAddress
          rdf:resource="http://people.apache.org/~username/nnnnnnnn.asc/&gt;
      &lt;/wot:PubKey&gt;
    &lt;/wot:hasKey&gt;</programlisting>

            <para>ie, referencing your publically exported public key</para>

            <para>Finally, commit your changes.</para>
          </sect3>

          <sect3>
            <title>Save to KEYS</title>

            <para>The armored representation of the public key should be saved
            to Isis' KEYS file, <ulink
            url="https://svn.apache.org/repo/asf/incubator/isis/KEYS">https://svn.apache.org/repo/asf/incubator/isis/KEYS</ulink>
            (ie, parent of <filename>trunk</filename>).</para>

            <para>First, in a new directory, checkout this file:</para>

            <programlisting>svn -N co https://svn.apache.org/repos/asf/incubator/isis/ .</programlisting>

            <para>This should bring down the <filename>KEYS</filename>
            file.</para>

            <para>Then, export your signature and armored
            representation.</para>

            <programlisting>gpg --list-sigs nnnnnnnn &gt;&gt;KEYS
gpg --armor --export nnnnnnnn &gt;&gt;KEYS</programlisting>

            <para>Then commit.</para>
          </sect3>

          <sect3>
            <title>id.apache.org</title>

            <para>Log onto id.apache.org and ensure that the finger print of
            your public key is correct.</para>
          </sect3>
        </sect2>

        <sect2>
          <title>Attend Key Signing Party (Apache web of trust)</title>

          <para>It is strongly advised that the contributor attend a key
          signing party at an Apache event, in order that other Apache
          committers/members can in person verify their identity against the
          key. The process for this is described <ulink
          url="http://www.apache.org/dev/release-signing.html#key-signing-party">here</ulink>
          and <ulink
          url="http://wiki.apache.org/apachecon/PgpKeySigning">here</ulink>.</para>
        </sect2>

        <sect2>
          <title>Update Maven Settings file
          (<filename>~/.m2/settings.xml</filename>)</title>

          <para>The Maven release plugin will automatically sign the release,
          however it is necessary to update the
          <filename>~/.m2/settings.xml</filename> file with your GPG
          passphrase in order that it can use your secret key. This is defined
          under a profile so that it is activated only when we perform a
          release (as defined by <package>[org,apache:apache]</package> parent
          <acronym>POM</acronym>.</para>

          <para>Therefore, make the following </para>

          <programlisting>&lt;settings&gt;
  ...
  &lt;profiles&gt;
    &lt;profile&gt;
      &lt;id&gt;apache-release&lt;/id&gt;
      &lt;properties&gt;
    &lt;gpg.passphrase&gt;xxx xxx xxx xxx xxx xxx xxx&lt;/gpg.passphrase&gt;
      &lt;/properties&gt;
    &lt;/profile&gt;
  &lt;/profiles&gt;
&lt;/settings&gt;</programlisting>

          <para>In addition, to allow the release plugin to tag SVN changes,
          you must either add in your LDAP username/password or configure
          .ssh:</para>

          <programlisting>&lt;settings&gt;
  ...
  &lt;servers&gt;
    ...
    &lt;server&gt;
      &lt;id&gt;apache.releases.https&lt;/id&gt;
      &lt;username&gt;xxxx&lt;/username&gt;
      &lt;password&gt;xxxx&lt;/password&gt;
    &lt;/server&gt;
  &lt;/servers&gt;
  ...
&lt;/settings&gt;</programlisting>
        </sect2>
      </sect1>

      <sect1 id="sec.MavenReleasePrepare">
        <title>Preparing a Release (<code>mvn release:prepare</code>)</title>

        <para>We recommend creating release candidates from branches, and then
        the final release from trunk.</para>

        <sect2>
          <title>Branch (release candidates only)</title>

          <para>First, create a branch:</para>

          <programlisting>svn mkdir https://svn.apache.org/repos/asf/incubator/isis/branches/x.x.x-RCn-incubating \
   -m "branching to create x.x.x-RCn-incubating"
svn copy https://svn.apache.org/repos/asf/incubator/isis/trunk \
    https://svn.apache.org/repos/asf/incubator/isis/branches/x.x.x-RCn-incubating/trunk \
    -m "copying trunk to branches/x.x.x-RCn-incubating"</programlisting>

          <para>Now create a workspace for this branch. The easiest approach
          is to copy <filename>trunk</filename> and perform an <code>svn
          switch</code>:</para>

          <programlisting>cd .../trunk   # your local workspace for isis/trunk

cd ..
mkdir -p branches/x.x.x-RCn-incubating
cp -R trunk branches/x.x.x-RCn-incubating/trunk

cd branches/x.x.x-RCn-incubating/trunk
svn switch https://svn.apache.org/repos/asf/incubator/isis/branches/x.x.x-RCn-incubating/trunk</programlisting>

          <para>Because the release is being performed in a branch, it is then
          necessary to edit the parent <filename>pom.xml</filename> in
          <package>[oai:isis-parent]</package>. Change
          <emphasis>trunk</emphasis> to
          <emphasis>branches/x.x.x-RCn-incubating/trunk</emphasis> for each of
          the children of the <code>&lt;scm&gt;</code> tag:</para>

          <programlisting>&lt;scm&gt;
  &lt;connection&gt;
    scm:svn:http://svn.apache.org/repos/asf/incubator/isis/branches/x.x.x-RCn-incubating/trunk/
  &lt;/connection&gt;
  &lt;developerConnection&gt;
    scm:svn:https://svn.apache.org/repos/asf/incubator/isis/branches/x.x.x-RCn-incubating/trunk/
  &lt;/developerConnection&gt;
  &lt;url&gt;
    http://svn.apache.org/repos/asf/incubator/isis/branches/x.x.x-RCn-incubating/trunk/
  &lt;/url&gt;
&lt;/scm&gt;</programlisting>

          <para>The commit the <filename>pom.xml</filename> file.</para>
        </sect2>

        <sect2>
          <title>Dry run</title>

          <para>The release:prepare command updates all POMs, creates a tag.
          It's common practice to perform a dry run first:</para>

          <programlisting>mvn release:clean release:prepare -P apache-release -D dryRun=true</programlisting>

          <para>Specify version as
          <emphasis>0.x.x-RCn-incubating</emphasis>.</para>

          <para></para>

          <para>*** more detail required here.</para>

          <para></para>
        </sect2>

        <sect2>
          <title>Release Proper</title>

          <para>Assuming that the dry run has succeeded, it's time to create
          the release proper</para>

          <programlisting>mvn release:clean release:prepare -P apache-release -D skipTests=true</programlisting>

          <para>Specify version as
          <emphasis>0.x.x-RCn-incubating</emphasis>.</para>

          <para><note>
              <para>If you are in Europe the <code>mvn release:prepare</code>
              command almost always fails at the last step, with a message
              like:</para>

              <programlisting>[ERROR]
 BUILD FAILURE
[INFO]
 ------------------------------------------------------------------------
[INFO]
 Unable to tag SCM
Provider message:
The svn tag command failed.
Command output:
svn: No such revision 936951</programlisting>

              <para>This is due to the SVN mirroring in place between Europe
              and the master in the US. When you make a commit, it isn't
              immediately available in Europe to svn up to. Just wait 10 secs
              and repeat the mvn release:prepare command for it to restart
              where it left off.</para>
            </note><note>
              <para>If other things go wrong, then <code>mvn
              release:clean</code> will do most of the cleaning up in the
              event of failures.</para>
            </note></para>

          <para></para>

          <para>*** more detail required here.</para>

          <para></para>

          <para>*** check the archetype versions; may need manual tweaking
          beforehand if doesn't bump versions correctly?</para>

          <para></para>
        </sect2>

        <sect2>
          <title>Post-build sanity check</title>

          <para>You should end up with artifacts in your local repo with the
          new version <emphasis>0.x.x-RCn-incubating</emphasis>. As a sanity
          check, use the quickstart archetype to generate the application, and
          make sure that the generated application runs ok.</para>

          <para>If you find problems and the release was performed on trunk
          (rather than a branch) then you may need to revert the changes. The
          release commands make and commit changes to the project's
          <filename>pom.xml</filename> files and they create a tag in SVN;
          you'll need to revert the <filename>pom.xml</filename> files and
          delete the tag from SVN.</para>
        </sect2>
      </sect1>

      <sect1 id="sec.UploadReleaseForVoting">
        <title>Upload Release for Voting</title>

        <para>Once the release has been built locally, it should be uploaded
        for voting. This consists of two things: uploading the source release,
        and deploying the Maven artifacts to a staging directory.</para>

        <sect2>
          <title>Upload Source Zip</title>

          <para>The source ZIP can be found in the <filename>target</filename>
          directory of the parent project (ie at
          <filename>trunk/target</filename>), along with its signature. The
          two files of interest are:</para>

          <itemizedlist>
            <listitem>
              <para><filename>isis-parent-0.x.x-RCn-incubating-incubating-source-release.zip</filename>,
              and</para>
            </listitem>

            <listitem>
              <para><filename>isis-parent-0.x.x-RCn-incubating-incubating-source-release.zip.asc</filename></para>
            </listitem>
          </itemizedlist>

          <para>Upload these to your public_html directory on
          people.apache.org so that they can be referenced in your vote email
          (see <xref linkend="sec.Voting" />).</para>
        </sect2>

        <sect2>
          <title>Deploying Binaries to Staging Repository (<classname>mvn
          release:perform</classname>)</title>

          <para>The Apache staging repository lives on the Nexus repository
          hosted at <ulink
          url="https://repository.apache.org">https://repository.apache.org</ulink>.
          The process of uploading will create a staging repository that is
          associated with the host (IP address) performing the release. Once
          the repository is staged, the newly created staging repository is
          "closed" in order to make it available to others.</para>

          <sect3>
            <title>Perform the Release</title>

            <para>The command to stage the release is:</para>

            <programlisting>mvn release:perform -Papache-release</programlisting>

            <para></para>

            <para>*** further details required here.</para>

            <para></para>
          </sect3>

          <sect3>
            <title>Check the Repository</title>

            <para>This will put release artifacts into a newly created staging
            repository . You will need to log into repository.apache.org to
            see it.</para>

            <para>If nothing appears in a staging repo you should stop here
            and work out why.</para>

            <para>Assuming that the repo has been populated, make a note of
            its repo id; this is needed for the voting thread (see <xref
            linkend="sec.VotingThread" />).</para>

            <para></para>

            <para>*** confirm the procedure described here.</para>

            <para></para>
          </sect3>

          <sect3>
            <title>Close the Repository</title>

            <para>After checking that the staging repository contains the
            artifacts that you expect you should close the staging repository.
            This will make it available so that people can check the
            release.</para>

            <para></para>

            <para>*** further details required here.</para>

            <para></para>
          </sect3>
        </sect2>
      </sect1>

      <sect1 id="sec.Voting">
        <title>Voting</title>

        <para>Once the artifacts have been uploaded, you can call a vote.
        Votes last for 72 hours and require a +3 vote from members. While
        incubating, this vote should be performed on the
        isis-dev@incubator.apache.org mailing list, and then repeated on the
        incubator@apache.org mailing list.</para>

        <sect2 id="sec.VotingThread">
          <title>Start voting thread on isis-dev@incubator.a.o</title>

          <para>You can use the following boilerplate for the vote on
          isis-dev.</para>

          <para>Use the following subject:</para>

          <programlisting>[VOTE] Apache Isis release candidate 0.x.x-RCn-incubating</programlisting>

          <para>And use the following body:</para>

          <programlisting>I've staged a release candidate for Apache Isis, namely 0.x.x-RCn-incubating.

The signed source ZIP can be downloaded from my home directory on people.apache.org:
* http://people.apache.org/~uuuuuuuu/isis-parent-0.x.x-RCn-incubating-source-release.zip (zip file), and
* http://people.apache.org/~uuuuuuuu/isis-parent-0.x.x-RCn-incubating-source-release.zip.asc (signature)

The code has been tagged as tags/0.x.x-RCn-incubating.

In addition, the Maven artifacts have been staged to staging repository on repository.apache.org:
* https://repository.apache.org/content/repositories/orgapacheisis-zzz/

The RAT checks have passed (see contributors guide for files that are considered as being excluded).

Please verify the release and cast your vote.  The vote will be open for 72 hours.

[ ] +1
[ ]  0
[ ] -1</programlisting>

          <para>where:</para>

          <itemizedlist>
            <listitem>
              <para><emphasis>uuuuuuuu</emphasis> is your Apache LDAP
              username</para>
            </listitem>

            <listitem>
              <para><emphasis>zzz</emphasis> is the newly created staging
              repository, from above.</para>
            </listitem>
          </itemizedlist>
        </sect2>

        <sect2>
          <title>Other contributors cast their vote</title>

          <para>It is the responsibility of other contributors (or any ASF
          member) to cast their vote on the release. This section provides
          some guidance on this process.</para>

          <sect3>
            <title>Verifying the source release artifacts</title>

            <para>Download both the ZIP and .ASC files from the location
            specified in the voting email. To verify that the signature is
            correct, use:</para>

            <programlisting>gpg --verify isis-parent-x.x.x-RCn-incubating.zip.asc isis-parent-x.x.x-RCn-incubating.zip</programlisting>

            <para>The ZIP file should then be unpacked.</para>

            <para>Once unpacked, it is recommended that voters at a minimum
            sanity check the contents, as per <xref
            linkend="sec.SanityCheck" />. </para>

            <para>In particular, when building locally, confirm that the
            versions in your local repository
            (<filename>~/.m2/repository/org/apache/isis</filename>) are
            correct.</para>
          </sect3>

          <sect3>
            <title>Verifying the binary release artifacts</title>

            <para>Optionally, voters can verify the binary releases (in the
            Maven staging repository).</para>

            <para></para>

            <para>*** more detail required here.</para>

            <para></para>
          </sect3>

          <sect3>
            <title>Casting a Vote</title>

            <para>When the above checks have been made (and any other checks
            that the voter thinks is relevant), they should cast a vote by
            replying to the email thread above.</para>
          </sect3>
        </sect2>

        <sect2>
          <title>After the vote</title>

          <para>If the vote has been unsuccessful, then address the problems
          and go again, incrementing the -RCn suffix.</para>

          <para>If the vote has been successful, then cut a new release, with
          no -RCn suffix, and move onto the next step.</para>

          <para><note>
              <para>care should be taken to ensure that the new release is
              based on the same version as the approved release candidate. One
              way to do this is to ensure that the local copy from which the
              release is taken is obtained specifying the correct SVN
              revision.</para>
            </note></para>
        </sect2>

        <sect2>
          <title>Start voting thread on incubator@a.o</title>

          <para>Once the vote has been approved on isis-dev and a new non-RCn
          release has been created, then the release process should be
          performed again on incubator@apache.org.</para>
        </sect2>
      </sect1>

      <sect1 id="sec.PromotingReleaseToDistribution">
        <title>Promoting Release to Distribution</title>

        <sect2>
          <title>Release Source Zip</title>

          <para>Releasing the source ZIP is a matter of copying the ZIP into
          the dist directory on people.apache.org.</para>

          <note>
            <para>There is an alternative and newer approach, namely to check
            in the release to subversion. At some stage these procedures will
            be updated to reflcet this newer approach.</para>
          </note>

          <para>Therefore, log onto people.apache.org, and copy the files
          over:</para>

          <programlisting>mkdir /www/www.apache.org/incubator/isis/
cp ~/public_html/isis-parent-x.x.x-incubating-source-release.* /www/www.apache.org/incubator/isis/.</programlisting>
        </sect2>

        <sect2>
          <title>Release Binaries to Maven Central Repo</title>

          <para>From the <ulink
          url="https://repository.apache.org/index.html#stagingRepositories">Nexus
          pages</ulink>, select the staging repository and select 'release'
          from the top menu.</para>

          <para>This moves the release artifacts into an Apache releases
          repository, from there they will be automatically moved to the Maven
          repository.</para>
        </sect2>
      </sect1>

      <sect1 id="sec.ManuallyDeployReleaseSite">
        <title>Manually Deploy the Release Website</title>

        <para>The mechanics of deploying the release site is the same as
        deploying a snapshot site, however there is the complication of
        deploying from the relevant <filename>tags/x.x.x-incubating</filename>
        tag (rather than <filename>trunk</filename>) as well as ensuring that
        the released binaries are correctly referenced on the downloads
        page.</para>
      </sect1>
    </chapter>
  </part>
</book>
