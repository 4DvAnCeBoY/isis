<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
-->
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"file:./src/docbkx/dtd-4.5/docbookx.dtd">
<book>
  <bookinfo>
    <title><?eval ${docbkxGuideTitle}?></title>

    <subtitle><?eval ${docbkxGuideSubTitle}?></subtitle>

    <releaseinfo><?eval ${project.version}?></releaseinfo>

    <authorgroup>
      <author>
        <firstname>Dan</firstname>

        <surname>Haywood</surname>
      </author>
    </authorgroup>

    <legalnotice>
      <para>Permission is granted to make and distribute verbatim copies of
      this manual provided that the copyright notice and this permission
      notice are preserved on all copies.</para>
    </legalnotice>
  </bookinfo>

  <!-- front matter -->

  <toc></toc>

  <preface id="preface">
    <title>Preface</title>

    <para><emphasis>Apache Isis</emphasis> is designed to allow programmers
    rapidly develop domain-driven applications following the <ulink
    url="http://en.wikipedia.org/wiki/Naked_Objects">Naked Objects</ulink>
    pattern. It is made up of a core framework plus a number of alternate
    implementations, and supports various viewers and object stores. Apache
    Isis is hosted at the <ulink url="http://incubator.apache.org/isis">Apache
    Foundation</ulink>, and is licensed under <ulink
    url="http://www.apache.org/licenses/LICENSE-2.0.html">Apache Software
    License v2</ulink>.</para>

    <para>This guide breaks into two parts:</para>

    <itemizedlist>
      <listitem>
        <para>the first part is for those just wanting to build either
        <emphasis>Apache Isis</emphasis> or its site+documentation from
        source, without necessarily contributing any changes back to the
        projects;</para>
      </listitem>

      <listitem>
        <para>the second part is for those who are intending to contribute
        changes back. It deals with such matters as setting up the standard
        development environment, writing documentation and site
        documentation;</para>
      </listitem>
    </itemizedlist>

    <para>Note that some of this material also appears, in different form, on
    the Apache Isis wiki:</para>

    <itemizedlist>
      <listitem>
        <para><ulink
        url="https://cwiki.apache.org/confluence/display/ISIS/SettingUpDevelopmentEnvironment">setting
        up the development environment</ulink></para>
      </listitem>

      <listitem>
        <para><ulink
        url="https://cwiki.apache.org/confluence/display/ISIS/BuildProcess">build
        process</ulink></para>
      </listitem>

      <listitem>
        <para><ulink
        url="https://cwiki.apache.org/confluence/display/ISIS/SmokeTest">smoke
        test</ulink></para>
      </listitem>
    </itemizedlist>

    <para>The intent is for this guide to be definitive, but you may find that
    the wiki may have slightly more up-to-date (or indeed less-out-of-date)
    information. At any rate, it's worth checking the wiki out too...</para>
  </preface>

  <!-- main content -->

  <part id="prt.Building">
    <title>Building</title>

    <partintro>
      <para>This part of the contributors guide describes how to build
      <emphasis>Apache Isis</emphasis> from source, for example, just to get a
      better understanding of how the project works, or because your
      organization requires any open source projects to be re-built
      in-house.</para>

      <para>This part of the guide also covers how to build
      <emphasis>Isis</emphasis>' site and documentation (along with
      prerequisite software that needs to be installed prior to doing
      this).</para>

      <para>If you are looking to contribute to <emphasis>Apache
      Isis</emphasis> itself, the information in this part of the guide does
      still apply, but see also <xref linkend="prt.Contributing" /> for much
      more information.</para>
    </partintro>

    <chapter id="chp.PrerequisiteSoftware">
      <title>Prerequisite Software</title>

      <abstract>
        <para>The software needed to build <emphasis>Apache
        Isis</emphasis>.</para>
      </abstract>

      <para>This chapter describes the prerequisite software needed to build
      <emphasis>Apache Isis</emphasis> modules, and its site and
      documentation.</para>

      <sect1>
        <title>Command Line Software</title>

        <para>Install the following software (you may well already have these
        installed):</para>

        <itemizedlist>
          <listitem>
            <para>a <ulink
            url="http://subversion.tigris.org">Subversion</ulink> <ulink
            url="http://subversion.tigris.org/">client</ulink> (the
            <filename>svn</filename> executable)</para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://www.oracle.com/technetwork/java/javase/downloads/index.html">Java
            6</ulink></para>

            <para>and setup the <varname>JAVA_HOME</varname> environment
            variable;</para>
          </listitem>

          <listitem>
            <para><ulink url="http://maven.apache.org">Maven
            2.2.1</ulink>,</para>

            <para>and setup the <varname>MAVEN_HOME</varname> environment
            variable.</para>

            <para>Highly recommended is to also setup the
            <classname>MAVEN_OPTS</classname> environment variable, to:</para>

            <programlisting>-Xms512m -Xmx2048m -XX:PermSize=256m -XX:MaxPermSize=512m</programlisting>

            <para><note>
                <para>At the time of writing, Maven 3.0 was not currently
                supported; see <ulink
                url="https://issues.apache.org/jira/browse/ISIS-11">ISIS-11</ulink>.</para>
              </note></para>
          </listitem>
        </itemizedlist>

        <para>Finally, add Subversion's <filename>svn</filename> executable
        and Maven's <filename>mvn</filename> executable to your
        <varname>PATH</varname> environment variable.</para>
      </sect1>

      <sect1 id="sec.SettingUpIde">
        <title>IDE</title>

        <para>Apache Isis is built using Maven, so it isn't strictly necessary
        to use an IDE. However, we do strongly recommend it.</para>

        <para>All of the main IDEs provide Maven support: NetBeans and
        IntelliJ "natively", while Eclipse provides support through both the
        m2eclipse or the q4e plugins.</para>

        <para>Install each of these from their respective update sites.</para>

        <sect2>
          <title>Setting up Eclipse IDE</title>

          <sect3>
            <title>Base Install</title>

            <para>Install a recent version of <ulink
            url="http://eclipse.org">Eclipse</ulink> (eg 3.5 or 3.6). The
            standard Java edition is sufficient, but you can install the JEE
            enterprise edition if you wish.</para>

            <para>As a minimum, Eclipse requires the
            <emphasis>subclipse</emphasis> and <emphasis>m2eclipse</emphasis>
            plugins. These should be installed next.</para>
          </sect3>

          <sect3>
            <title>Subclipse</title>

            <para>The <ulink
            url="http://subclipse.tigris.org">subclipse</ulink> plugin
            provides <emphasis>Subversion</emphasis> support, and can be
            installed from its <ulink
            url="http://subclipse.tigris.org/update_1.6.x">update
            site</ulink>.</para>
          </sect3>

          <sect3>
            <title>m2eclipse</title>

            <para>Normally Eclipse uses its own <filename>.project</filename>
            and <filename>.classpath</filename> files to (respectively) define
            the layout of the project and the classpath for a project. With
            Maven however this same information is available in the
            <filename>pom.xml</filename>.</para>

            <para>What the <ulink
            url="http://m2eclipse.codehaus.org">m2eclipse</ulink> plugin does
            is generate the <filename>.project</filename> and
            <filename>.classpath</filename> files on-the-fly, and uses
            Eclipse's own "Classpath Container" to reference
            <emphasis>Maven</emphasis> modules in the local repository.
            <emphasis>m2eclipse</emphasis> will also download any referenced
            modules from remote repositories into the local repository.</para>

            <para><emphasis>m2eclipse</emphasis> can be installed from its
            <ulink url="http://m2eclipse.sonatype.org/sites/m2e">update
            site</ulink>.</para>

            <para>Once installed, we recommend that you point m2eclipse back
            to your local Maven installation, using Windows &gt; Preferences
            &gt; Maven &gt; Installations:</para>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/dev-env/m2eclipse-preferences-maven-installation.png"
                           scale="50" />
              </imageobject>
            </mediaobject>
          </sect3>

          <sect3>
            <title>Other Plugins</title>

            <para>There are many other plugins that you can install with
            Eclipse. You might want to check out:</para>

            <itemizedlist>
              <listitem>
                <para><ulink url="???">EasyShell</ulink>, to provide easy
                integration with the operating system shell and command
                line.</para>
              </listitem>

              <listitem>
                <para><ulink
                url="http://www.soyatec.com/euml2/">Soyatec</ulink>, for a
                free (or commercial) <acronym>UML</acronym>/code live
                synchronization (a la the venerable <ulink
                url="http://www.borland.com/us/products/together/index.html">TogetherJ</ulink>).</para>

                <para>To install the free edition, it is necessary to install
                the <acronym>GMF</acronym> at the same time (see this <ulink
                url="http://www.soyatec.com/forum/viewtopic.php?t=898&amp;sid=1a1388b502a12114e6b8f28d7bbdee2a">forum
                posting</ulink>). Note also that at the time of writing
                Soyatec only supported up to Eclipse 3.5.</para>
              </listitem>
            </itemizedlist>

            <para>The following diagram shows the context menu that
            <emphasis>EasyShell</emphasis> adds within package
            explorer:</para>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/dev-env/easyshell-integration.png"
                           scale="50" />
              </imageobject>
            </mediaobject>

            <para>Key bindings for the <emphasis>EasyShell</emphasis> commands
            can be set up using Windows &gt; Preferences &gt; General &gt;
            Keys:</para>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/dev-env/easyshell-keys.png"
                           scale="45" />
              </imageobject>
            </mediaobject>

            <para></para>

            <para>In addition, if you are also a contributor to
            <emphasis>Isis</emphasis>, then there are some additional plugins
            (FindBugs, CheckStyle, PMD) that should be installed for enforcing
            coding standards; see <xref linkend="chp.CodingQuality" />.</para>
          </sect3>

          <sect3>
            <title>Templates</title>

            <para>Apache Isis provides a number of code templates which will
            reduce the typing when applying standard patterns.</para>

            <table>
              <title>Isis Code Templates</title>

              <tgroup cols="3">
                <colspec colwidth="100" />

                <colspec colwidth="60" />

                <colspec />

                <thead>
                  <row>
                    <entry align="center">Template</entry>

                    <entry align="center">Prefix</entry>

                    <entry align="center">Description</entry>
                  </row>
                </thead>

                <tbody>
                  <row>
                    <entry><ulink
                    url="http://incubator.apache.org/isis/ide/eclipse/templates/isis-templates.xml">isis-templates.xml</ulink></entry>

                    <entry><literal>is</literal></entry>

                    <entry>for writing <emphasis>Isis</emphasis> domain
                    objects, eg properties, collections, actions etc.</entry>
                  </row>

                  <row>
                    <entry><ulink
                    url="http://incubator.apache.org/isis/ide/eclipse/templates/junit4-templates.xml">junit4-templates.xml</ulink></entry>

                    <entry><literal>ju</literal></entry>

                    <entry>for writing <ulink url="http://junit.org">JUnit
                    4</ulink> tests, eg <classname>@Test</classname> methods,
                    <classname>@Before</classname> methods etc.</entry>
                  </row>

                  <row>
                    <entry><ulink
                    url="http://incubator.apache.org/isis/ide/eclipse/templates/junit4-templates.xml">jmock2-templates.xml</ulink></entry>

                    <entry><literal>jm</literal></entry>

                    <entry>for writing unit tests that use <ulink
                    url="http://jmock.org">JMock2</ulink>, eg mockery, context
                    etc</entry>
                  </row>
                </tbody>
              </tgroup>
            </table>

            <para>These can be downloaded from the <ulink
            url="http://incubator.apache.org/isis/ide/eclipse/templates/">Isis
            website</ulink>, and installed using Windows &gt; Preferences &gt;
            Java &gt; Editor &gt; Templates:</para>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/dev-env/windows-preferences-java-editor-templates-junit.png"
                           scale="60" />
              </imageobject>
            </mediaobject>
          </sect3>
        </sect2>

        <sect2>
          <title>Other IDEs</title>

          <para>All of the committers for <emphasis>Isis</emphasis> use the
          Eclipse IDE with the m2eclipse plugin, so the instructions provided
          in this guide reflect our own experience. However, if you use one of
          the other IDEs, please feel free to contribute patches to this
          documentation to explain the setup, and we'll add in your words of
          wisdom here.</para>
        </sect2>
      </sect1>
    </chapter>

    <chapter id="chp.SetUpDevelopmentEnvironment">
      <title>Obtaining Isis Source Code</title>

      <abstract>
        <para>Where to actually download the Isis source code from.</para>
      </abstract>

      <para>The <emphasis>Isis</emphasis> source code resides in a publicly
      accessible Subversion repository, hosted by the Apache Software
      Foundation. Anyone can check out the source code anonymously. In common
      with all Apache projects, commit (write) access is restricted to those
      who have been voted by the <emphasis>Isis</emphasis> community in as
      committers.</para>

      <sect1>
        <title>Anonymous (read-only) download</title>

        <para>If you do not have commit writes, then you can still check out
        the Isis source code for read-only using:</para>

        <programlisting>svn co http://svn.apache.org/repos/asf/incubator/isis/trunk .</programlisting>

        <para>hecking out the code Anonymous read-only access: * Committer
        read-write access: * svn co
        https://svn.apache.org/repos/asf/incubator/isis/trunk .</para>
      </sect1>

      <sect1>
        <title>Committer (read-write) download</title>

        <para>If you have commit writes, then you can check out the Isis
        source code for read/write using:</para>

        <programlisting>svn co https://svn.apache.org/repos/asf/incubator/isis/trunk .</programlisting>

        <para>Note that this uses the 'https' scheme rather than the 'http'
        scheme.</para>
      </sect1>
    </chapter>

    <chapter id="chp.BuildingIsisFromSource">
      <title>Building Isis from Source</title>

      <abstract>
        <para>How to build <emphasis>Isis</emphasis>' code modules (not site
        and docs) from source.</para>
      </abstract>

      <para><emphasis>Isis</emphasis> is built using
      <emphasis>Maven</emphasis>, so you should then be able to get going
      using a simple <code>mvn clean install</code>. However, there is a
      little more to it than that, because we do have a number of profiles
      which allow the build to be tailored in various ways.</para>

      <sect1>
        <title>Maven Profiles</title>

        <para>The Maven profiles that customize the build are activated by
        setting properties, where the property name determines the means by
        which the build is customized. They are:</para>

        <itemizedlist>
          <listitem>
            <para><code>-D modules=</code></para>

            <itemizedlist>
              <listitem>
                <para><code>standard</code></para>

                <para>This is the default, so can be omitted if no other -D
                properties are specified.</para>

                <para>Using <code>-D modules=standard</code> will build the
                <filename>applib</filename>, <filename>core</filename>,
                <filename>defaults</filename>,
                <filename>alternatives</filename> and
                <filename>viewer</filename> modules</para>
              </listitem>

              <listitem>
                <para><code>all</code></para>

                <para>Using <code>-D modules=all</code> will build the
                <filename>applib</filename>, <filename>core</filename>,
                <filename>defaults</filename>,
                <filename>alternatives</filename>,
                <filename>viewer</filename>, <filename>support</filename>,
                <filename>release</filename>, examples and
                <filename>site-skin</filename> modules</para>
              </listitem>

              <listitem>
                <para><code>skin</code> or <code>applib</code> or
                <code>core</code> or <code>defaults</code> or
                <code>alternatives</code> or <code>viewer</code> or
                <code>support</code> or <code>release</code> or
                <code>examples</code></para>

                <para>Using <code>-D modules=...</code> for any of the above
                will build just the corresponding module</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para><code>-D build=</code><itemizedlist>
                <listitem>
                  <para><code>standard</code></para>

                  <para>This is the default, so can be omitted if no other -D
                  properties are specified.</para>

                  <para>Using <code>-D build=standard</code> when run under
                  <code>mvn clean install</code> will perform the standard
                  plugins for the Maven 'default' lifecycle, and will also run
                  the <filename>enforcer</filename>,
                  <filename>eclipse</filename>, <filename>source</filename>,
                  <filename>jar</filename> and <filename>pdf</filename>
                  plugins. See <literal>/project/build/plugins</literal> in
                  the parent <filename>pom.xml </filename>for an up-to-date
                  list.</para>
                </listitem>

                <listitem>
                  <para><code>full</code></para>

                  <para>This will perform a full build, which basically means
                  to also run a number of additional plugins.</para>

                  <para>Using -<code>D build=full</code> runs all the plugins
                  for standard, along with the <classname>javadoc</classname>
                  plugin (is 'jar' goal). See
                  <literal>/project/profiles/profile[id='build-full']/build/plugins</literal>
                  in the parent <filename>pom.xml</filename> for an up-to-date
                  list.</para>
                </listitem>
              </itemizedlist></para>
          </listitem>
        </itemizedlist>

        <para>The <code>-D modules=xxx</code> and <code>-D build=yyy</code>
        profiles are pretty much orthogonal; any set of modules can be built
        with either build profile. The one exception minor exception is that
        the <filename>release</filename> module (and hence any profile that
        references it) cannot be built using <code>-D
        build=full</code>.</para>
      </sect1>

      <sect1>
        <title>Typical Use Cases</title>

        <para>Although the above set of profiles might seem complex, most of
        the time you'll find yourself running just one of a small number of
        commands. This section lists the typical use cases.</para>

        <warning>
          <para>The first time you run these, you'll need to omit the -o
          (offline) flag in order to download plugins and dependencies.
          Thereafter though the -o flag is strongly recommended!</para>
        </warning>

        <para>The most typical use cases are</para>

        <itemizedlist>
          <listitem>
            <para>Quick build</para>

            <programlisting>mvn clean install -o</programlisting>
          </listitem>

          <listitem>
            <para>Build 'release' module (prereq for the examples)</para>

            <programlisting>mvn clean install -D modules=release -o</programlisting>
          </listitem>

          <listitem>
            <para>Build everything</para>

            <programlisting>mvn clean install -D modules=all -o</programlisting>
          </listitem>

          <listitem>
            <para>Build in readiness for a release</para>

            <programlisting>mvn clean install -D modules=standard -D build=full -o</programlisting>
          </listitem>
        </itemizedlist>
      </sect1>

      <sect1>
        <title>Smoke Test</title>

        <para>Once you've build the source code, you might want to run a smoke
        test.</para>

        <para>Because the details of this are likely to change over time, for
        now please see the SmokeTest page on the Isis wiki. This has
        reasonably full explanation of how to get going using the application
        in trunk/support/prototype.</para>

        <note>
          <para>The intention though is to replace this smoke test with a
          pre-canned archetype that will build more-or-less application as
          support/prototype.</para>
        </note>
      </sect1>
    </chapter>

    <chapter id="chp.BuildingSiteAndDocs">
      <title>Building Site and Documentation</title>

      <abstract>
        <para>How to build <emphasis>Isis</emphasis>' site and documentation
        from source.</para>
      </abstract>

      <para>In the same way that Isis code modules are built using <code>mvn
      clean install</code> (see <xref
      linkend="chp.BuildingIsisFromSource" />), so too can its site and
      documentation be built using <code>mvn site-deploy</code>. Again though,
      there is a little more to it than that, because we do have a number of
      profiles which allow the build to be tailored in various ways. There is
      also some prerequisite software that must be installed.</para>

      <sect1>
        <title>Prerequisites (JIMI Jar File)</title>

        <para>Generally speaking all Maven artifacts are automatically
        downloads from the Maven <ulink
        url="http://repo1.maven.org/maven2/">central repo</ulink>. However,
        some artifacts must be manually installed or built, either because
        they haven't been formally released or because there are licensing
        restrictions preventing them from being hosted in the repository.
        These must therefore be downloaded and manually installed into your
        local repository (<filename>~/.m2/repository</filename>) .</para>

        <para><emphasis>Apache Isis</emphasis> currently use the
        <acronym>JIMI</acronym> jar to generate documentation.
        Therefore:</para>

        <itemizedlist>
          <listitem>
            <para>From the <ulink
            url="http://java.sun.com/products/jimi/">Jimi page</ulink>,
            download the <filename>jimi1_0.zip</filename> file, and
            unzip.</para>
          </listitem>

          <listitem>
            <para>Within the unzipped files, you'll find the
            <filename>JimiProClasses.zip</filename> file. This is the
            <acronym>JAR</acronym> that needs to be installed. Make a note of
            its location.</para>
          </listitem>

          <listitem>
            <para>Install into your local Maven repository using:</para>

            <screen>mvn install:install-file       \
    -D groupId=com.java        \
    -D artifactId=jimi         \
    -D version=1.0             \
    -D packaging=jar           \
    -D file=/path/to/JimiProClasses.zip</screen>
          </listitem>
        </itemizedlist>
      </sect1>

      <sect1>
        <title>Maven Profiles</title>

        <para>The Maven profiles customize the build are activated by setting
        properties, where the property name determines the means by which the
        build is customized.</para>

        <para>They are:</para>

        <itemizedlist>
          <listitem>
            <para><code>-D modules=</code></para>

            <itemizedlist>
              <listitem>
                <para><code>standard</code></para>

                <para>This is the default, so can be omitted if no other -D
                properties are specified.</para>

                <para>Using <code>-D modules=standard</code> will build the
                <filename>applib</filename>, <filename>core</filename>,
                <filename>defaults</filename>,
                <filename>alternatives</filename> and
                <filename>viewer</filename> modules</para>
              </listitem>

              <listitem>
                <para><code>all</code></para>

                <para>Using <code>-D modules=all</code> will build the
                <filename>applib</filename>, <filename>core</filename>,
                <filename>defaults</filename>,
                <filename>alternatives</filename>,
                <filename>viewer</filename>, <filename>support</filename>,
                <filename>release</filename>, examples and
                <filename>site-skin</filename> modules</para>
              </listitem>

              <listitem>
                <para><code>skin</code> or <code>applib</code> or
                <code>core</code> or <code>defaults</code> or
                <code>alternatives</code> or <code>viewer</code> or
                <code>support</code> or <code>release</code> or
                <code>examples</code></para>

                <para>Using <code>-D modules=...</code> for any of the above
                will build just the corresponding module</para>
              </listitem>

              <listitem>
                <para><code>skin</code></para>

                <para>Using <code>-D modules=skin</code> will build just the
                skin module</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para><code>-D site=</code><itemizedlist>
                <listitem>
                  <para><code>standard</code></para>

                  <para>Using <code>-D site=standard</code> when run under
                  <code>mvn site-deploy</code> will perform the standard
                  plugins for the Maven 'site' lifecycle, and will also run
                  the <filename>docbkx</filename> plugin (where relevant) in
                  order to build the DocBook documentation. See
                  <literal>/project/build/plugins</literal> in the parent
                  <filename>pom.xml</filename>for an up-to-date list (note the
                  binding to the 'site' phase).</para>
                </listitem>

                <listitem>
                  <para><code>full</code></para>

                  <para>This will perform a full build, which basically means
                  to also run a number of additional reporting plugins.</para>

                  <para>Using -<code>D site=full</code> in addition runs all
                  the reporting plugins runs all the plugins for standard,
                  along with the <filename>surefire-report</filename>,
                  <filename>project-info-reports</filename>,
                  <filename>cobertura</filename>,
                  <filename>checkstyle</filename>, <filename>pmd</filename>,
                  <filename>findbugs</filename>,
                  <filename>javancss</filename>, <filename>jdepend</filename>,
                  <filename>jxr</filename>, <filename>taglist</filename>,
                  <filename>javadoc</filename>.</para>

                  <para>See
                  <literal>/project/profiles/profile[id='site-full']/reporting/plugins</literal>
                  in the parent <filename>pom.xml</filename> for an up-to-date
                  list.</para>
                </listitem>
              </itemizedlist></para>
          </listitem>

          <listitem>
            <para><code>-D deploy=</code></para>

            <itemizedlist>
              <listitem>
                <para><code>local</code></para>

                <para>Using <code>-D deploy=local</code> will deploy the site
                to <filename>/tmp/m2-sites/isis</filename>, where you can
                check it</para>
              </listitem>
            </itemizedlist>

            <para>At the time of writing the profile for remote deployment to
            Apache's staging server (<code>-D deploy=remote</code>) had not
            been finalized.</para>
          </listitem>
        </itemizedlist>

        <para>The <code>-D modules=xxx</code> and <code>-D site=yyy</code>
        profiles are pretty much orthogonal; any set of modules can be built
        with either build profile. The one exception minor exception is that
        the <filename>release</filename> module (and hence any profile that
        references it) cannot be built using <code>-D site=full</code>.</para>
      </sect1>

      <sect1>
        <title>Typical Use Cases</title>

        <para>Most of the time you'll find yourself running just one of a
        small number of commands. This section lists the typical use
        cases.</para>

        <warning>
          <para>The first time you run these, you'll need to omit the -o
          (offline) flag in order to download plugins and dependencies.
          Thereafter though the -os flag is strongly recommended!</para>
        </warning>

        <para>The most typical use cases are</para>

        <itemizedlist>
          <listitem>
            <para>Quick build of site and documentation</para>

            <programlisting>mvn site-deploy -D modules=standard -D deploy=local -o</programlisting>
          </listitem>

          <listitem>
            <para>Full build of site and documentation</para>

            <programlisting>mvn site-deploy -D modules=standard -D site=full -D deploy=local -o</programlisting>
          </listitem>

          <listitem>
            <para>Quick build all code and documentation</para>

            <programlisting>mvn clean install site-deploy -D modules=standard -D deploy=local -o</programlisting>
          </listitem>

          <listitem>
            <para>Full build of all code and documentation</para>

            <programlisting>mvn clean install site-deploy -D modules=standard -D build=full -D site=full -D deploy=local -o</programlisting>
          </listitem>
        </itemizedlist>
      </sect1>
    </chapter>
  </part>

  <part id="prt.Contributing">
    <title>Contributing</title>

    <partintro>
      <para>If you are looking to contribute to <emphasis>Apache
      Isis</emphasis>, then this part of the guide offers guidance on how to
      contribute changes. It builds on the first part, <xref
      linkend="prt.Building" />, and assumes that you have installed any
      prerequisite software.</para>

      <para>Note that in order to gain commit writes to Apache Software
      Foundation projects, you must be voted in as a committer by the existing
      community. In order for that to happen, you will need to have shown
      demonstrated an ongoing and active interest. The easiest way to do this
      is to participate in discussions on the mailing list, to file or comment
      on JIRA tickets (bugs/defects), and to provide patches to bugs/defects
      by way of attaching to the relevant JIRA tickets.</para>
    </partintro>

    <chapter id="chp.CodingStandardsPrinciples">
      <title>Coding Standards Principles</title>

      <abstract>
        <para>This chapter describes the principles of the main coding
        standards adopted within the <emphasis>Isis</emphasis> codebase. The
        enforcement of these coding standards is through plugins to both the
        IDE and Maven,</para>
      </abstract>

      <para>This chapter describes the principles of the main coding standards
      adopted within the <emphasis>Isis</emphasis> codebase. The enforcement
      of these coding standards is through plugins to both the IDE and Maven,
      see <xref linkend="chp.CodingStandardsEnforcement" />.</para>

      <warning>
        <para>The style of framework code has developed over the lifetime of
        the project, so you won't find that all code satisfies the principles
        laid out here. We expect to address this piecemeal, incrementally
        moving towards these principles over time. The use of tools and
        plugins should help.</para>
      </warning>

      <sect1>
        <title>Code Formatting</title>

        <para>A code formatting conventions adopted are those in use within a
        number of other Apache projects. Some of the more important standards
        are:</para>

        <itemizedlist>
          <listitem>
            <para>Indentation is achieved using spaces, not tabs; there should
            be no tabs, except where needed in quoted strings</para>
          </listitem>

          <listitem>
            <para>Each level of indentation is 4 characters</para>
          </listitem>

          <listitem>
            <para>Code lines are wrapped at 120 characters, with a 4 space
            indentation for wrapped lines</para>
          </listitem>

          <listitem>
            <para>Statements should only be wrapped when too long for the
            line</para>
          </listitem>

          <listitem>
            <para>Braces ({}) start on the same line as their controlling
            statement and end, indented to the same level as the starting
            line, on a new line</para>
          </listitem>

          <listitem>
            <para>One blank line between package statement and imports</para>
          </listitem>

          <listitem>
            <para>One blank lines between imports and class/interface
            declaration</para>
          </listitem>

          <listitem>
            <para>One blank line between each method declaration, and blocks
            of field etc</para>
          </listitem>
        </itemizedlist>

        <para>See <xref linkend="chp.CodingStandardsEnforcement" /> for
        details on configuring the Eclipse code formatter for these
        standards.</para>
      </sect1>

      <sect1>
        <title>Naming</title>

        <sect2>
          <title>General Principles</title>

          <itemizedlist>
            <listitem>
              <para>All names appearing in code should be written in English
              and be full words.</para>
            </listitem>

            <listitem>
              <para>Abbreviations should be avoided unless they are well known
              and unambiguous.</para>
            </listitem>

            <listitem>
              <para>Complementary names should be used for complementary
              concepts, showing that they are related.</para>

              <para>For example: start/stop; next/previous; begin/end,
              open/close, show/hide.</para>
            </listitem>
          </itemizedlist>
        </sect2>

        <sect2>
          <title>Maven GroupId and ArtifactIds</title>

          <itemizedlist>
            <listitem>
              <para>all package names should be in lower case</para>
            </listitem>

            <listitem>
              <para>where an artifact is acting as an aggregator
              module:</para>

              <itemizedlist>
                <listitem>
                  <para>its groupId should be "one up" from the group it
                  manages</para>
                </listitem>

                <listitem>
                  <para>its artifactId should be plural and be the same as the
                  last element of the groupId it is aggregating for</para>
                </listitem>
              </itemizedlist>

              <para>For example, using the groupId:artifactId notation:</para>

              <itemizedlist>
                <listitem>
                  <para><code>org.apache.isis.alternatives:objectstores</code>
                  is the aggregator for the "objectstores" group.</para>
                </listitem>

                <listitem>
                  <para>Child modules within this group would include
                  <code>org.apache.isis.alternatives.objectstores:sql</code>
                  and
                  <code>org.apache.isis.alternatives.objectstores:xml</code>.</para>
                </listitem>
              </itemizedlist>
            </listitem>
          </itemizedlist>
        </sect2>

        <sect2>
          <title>Package Naming</title>

          <itemizedlist>
            <listitem>
              <para>the package name should be the concatenation of the group
              Id and the artifact Id</para>

              <para>For example, all packages in the
              <code>org.apache.isis.alternatives.objectstores:xml</code>
              module should reside in the
              <package>org.apache.isis.alternatives.objectstores.xml</package>
              package.</para>
            </listitem>

            <listitem>
              <para>all package names should be lower case</para>
            </listitem>
          </itemizedlist>
        </sect2>

        <sect2>
          <title>Type Names</title>

          <itemizedlist>
            <listitem>
              <para>All class names should be nouns and written in camel case;
              eg <classname>ObjectAdapter</classname>,
              <classname>Configuration</classname>.</para>
            </listitem>

            <listitem>
              <para>Interfaces should <emphasis role="strong">not</emphasis>
              have an 'I' placed in front of it.</para>
            </listitem>

            <listitem>
              <para>Implemenations should not have an "Impl" suffix. Instead
              identify the implementation technology; eg
              <classname>AuthenticationManagerLdap</classname>.</para>

              <para>If there really is no good suffix, use "Default" rather
              than "Impl"; eg
              <classname>ProgrammingModelDefault</classname>.</para>
            </listitem>
          </itemizedlist>
        </sect2>

        <sect2>
          <title>Method Naming</title>

          <para><itemizedlist>
              <listitem>
                <para>Method names should be verbs and written in mixed case
                starting with lower case; eg
                <methodname>isActionStatic()</methodname>,
                <methodname>prepare()</methodname>.</para>
              </listitem>

              <listitem>
                <para>Accessor and mutator method names should be prefixed
                with <emphasis>get</emphasis> and <emphasis>set</emphasis>; eg
                <methodname>getActionName()</methodname>,
                <methodname>setDelay(...)</methodname>.</para>
              </listitem>

              <listitem>
                <para>Boolean variable and accessor method names should be
                prefixed with <emphasis>is</emphasis>,
                <emphasis>can</emphasis>, <emphasis>has</emphasis> or
                <emphasis>should</emphasis>; eg
                <methodname>isDirty()</methodname>,
                <methodname>canSave(...)</methodname>.</para>
              </listitem>
            </itemizedlist></para>
        </sect2>

        <sect2>
          <title>Variable and Parameter Naming</title>

          <itemizedlist>
            <listitem>
              <para>Variable names must be in mixed case starting with lower
              case (never an underscore). Variables should have full sensible
              name, reflecting their purpose; eg <varname>count</varname>,
              <varname>target</varname>,
              <varname>previousOid</varname>.</para>
            </listitem>

            <listitem>
              <para>Short variable names should only be used within small
              blocks of codes or short method.</para>
            </listitem>

            <listitem>
              <para>Short variable names should never be used for parameter
              names</para>
            </listitem>
          </itemizedlist>
        </sect2>

        <sect2>
          <title>Constant Naming</title>

          <para>Constants' names should be all uppercase with an underscore
          between words.</para>
        </sect2>
      </sect1>

      <sect1>
        <title>Code Style</title>

        <sect2>
          <title>General Remarks</title>

          <itemizedlist>
            <listitem>
              <para>Use <code>final</code> variables where possible</para>
            </listitem>

            <listitem>
              <para>All <code>final</code> parameters always</para>
            </listitem>

            <listitem>
              <para><emphasis>DO NOT</emphasis> check in commented-out
              code</para>

              <para>use the repository to revert to previous versions</para>
            </listitem>

            <listitem>
              <para>Go for "Clean Code" (see Robert Martin's book):</para>

              <itemizedlist>
                <listitem>
                  <para>Methods should typically be no more than 10 lines
                  long</para>
                </listitem>

                <listitem>
                  <para>Try to ensure methods are either commands or queries
                  (no side-effects)</para>
                </listitem>

                <listitem>
                  <para>Think and aim for immutability if possible</para>
                </listitem>
              </itemizedlist>
            </listitem>

            <listitem>
              <para>Unless there is a clash of class names, fully qualified
              names should not be used in the code</para>
            </listitem>

            <listitem>
              <para>Add TODO, REVIEW, FIXME tasks to code wherever work is to
              be done on the code that you are not going to do now</para>
            </listitem>
          </itemizedlist>
        </sect2>

        <sect2>
          <title>Commenting</title>

          <itemizedlist>
            <listitem>
              <para>Do not overuse comments - they go out-of-sync with the
              code, causing confusion.</para>
            </listitem>

            <listitem>
              <para>Comments <emphasis>should</emphasis> be used explaining
              the WHY</para>
            </listitem>

            <listitem>
              <para>Comments should <emphasis>not</emphasis> be used for
              explaining the WHAT - that should be reflected in the method
              name</para>
            </listitem>

            <listitem>
              <para>Comments should <emphasis>not</emphasis> be used for
              explaining the HOW - read the body of the method instead</para>
            </listitem>

            <listitem>
              <para>Comments should not be used for explaining the WHO or the
              WHEN - that's what Subversion is for</para>
            </listitem>

            <listitem>
              <para>Don't introduce an explanatory comment in the middle of a
              method; instead, extract out the block as a method
              instead</para>
            </listitem>

            <listitem>
              <para>Comments should not contain any JavaDoc tags that are not
              complete.</para>

              <para>For example, remove <emphasis>@param</emphasis> markers if
              they don't add any information over and above the name of the
              parameter.</para>
            </listitem>
          </itemizedlist>
        </sect2>

        <sect2>
          <title>Imports</title>

          <itemizedlist>
            <listitem>
              <para>Imports should be grouped by major type, with a blank line
              between each.</para>

              <para>The order should be: java, javax, com, org,
              org.apache.isis.</para>
            </listitem>

            <listitem>
              <para>Classes, not packages, should be imported; don't use
              '*'</para>
            </listitem>

            <listitem>
              <para>No un-needed imports should be left in the code</para>
            </listitem>
          </itemizedlist>

          <para>Eclipse's Source &gt; Organize Imports can be used to organize
          imports. See <xref linkend="sec.ImportOrder" /> for details on how
          to configure Eclipse to enforce the required order.</para>
        </sect2>

        <sect2>
          <title>Use of Constants</title>

          <itemizedlist>
            <listitem>
              <para>Use constants instead of fixed phrases, except for
              messages, debug information and the like.</para>

              <para>For example:</para>

              <programlisting>if (name.equals(OPENING_TAG)) // Not if (name.equals("&lt;"))</programlisting>
            </listitem>

            <listitem>
              <para>Use constants instead of magic numbers.</para>

              <para>For example:</para>

              <programlisting>if (line &gt; MAXIMUM_LINES) // Not if (line &gt; 5)</programlisting>
            </listitem>

            <listitem>
              <para>Place public constants in a non-instantiable
              <classname>*Constants</classname> class for the package. This
              makes the constants easier to locate.</para>

              <para>For example, a 'remoting' package might have a
              RemotingConstants class:</para>

              <programlisting>public final class RemotingConstants {
    private RemotingConstants(){}

    public final static String HTTP_SCHEME = "http://";
    ...
}</programlisting>
            </listitem>
          </itemizedlist>
        </sect2>

        <sect2>
          <title>Member Order</title>

          <para>Declarations within each class should follow the standard
          order:</para>

          <itemizedlist>
            <listitem>
              <para>Typed (inner classes etc)</para>
            </listitem>

            <listitem>
              <para>Static field</para>
            </listitem>

            <listitem>
              <para>Static initializers</para>
            </listitem>

            <listitem>
              <para>Static methods</para>
            </listitem>

            <listitem>
              <para>Initializers</para>
            </listitem>

            <listitem>
              <para>Fields</para>
            </listitem>

            <listitem>
              <para>Constructors</para>
            </listitem>

            <listitem>
              <para>Methods</para>
            </listitem>
          </itemizedlist>

          <para>This order can be specified in the preferences under
          <emphasis>Java/Appearance/Members Sort Order</emphasis>, and the
          code can be ordered using the <emphasis>Source/Sort
          Members</emphasis> options.</para>
        </sect2>

        <sect2>
          <title>Method Order</title>

          <para>Methods should be grouped by responsibility, with comment
          blocks used to delineate different responsibilities:</para>

          <programlisting>///////////////////////////////////////////////////////////
// Authentication
///////////////////////////////////////////////////////////

... methods pertaining to authentication go here ...</programlisting>

          <para>By convention, methods which access the IsisContext or are
          injected should go at the end:</para>

          <programlisting>///////////////////////////////////////////////////////////
// Dependencies (from context)
///////////////////////////////////////////////////////////

protected IsisConfiguration getConfiguration() {
    return IsisContext.getConfiguration();
}</programlisting>

          <para>These should be non-<code>static</code> and
          <code>protected</code> so that they can be overridden in tests with
          a stub or mock if required.</para>
        </sect2>
      </sect1>

      <sect1>
        <title>License Notices</title>

        <para>In common with all other Apache projects, the standard Apache
        license notice should be present at the top of every code file.</para>
      </sect1>
    </chapter>

    <chapter id="chp.CodingStandardsEnforcement">
      <title>Coding Standards Enforcement</title>

      <abstract>
        <para>How we enforce coding standards (in Eclipse) for
        <emphasis>Apache Isis</emphasis>.</para>
      </abstract>

      <para>The <emphasis>Apache Isis</emphasis> community has standardized on
      using Eclipse as its preferred IDE. This chapter describes the main
      tools that are available to help enforce the coding standard principles
      described in <xref linkend="chp.CodingStandardsPrinciples" />.</para>

      <sect1 id="sec.CodeStyleTemplates">
        <title>Code Style Templates</title>

        <para>All Apache projects are required to have a standard license
        comment at the top of every code file. Eclipse can be configured so
        that these licenses are automatically available in every new
        file.</para>

        <para>Therefore, download the <ulink
        url="http://incubator.apache.org/isis/ide/eclipse/templates/Apache-code-style-template.xml">code
        style template config file</ulink> and import using Windows &gt;
        Preferences &gt; Java &gt; Code style &gt; Code Templates:</para>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/dev-env/windows-preferences-java-code-style-code-templates.png"
                       scale="50" />
          </imageobject>
        </mediaobject>

        <para>Make sure that the "Automatically add comments for new methods
        and types" is selected. Now, when you create a new class using File
        &gt; New &gt; Class, the license comments will already be in
        place.</para>
      </sect1>

      <sect1 id="sec.CodeStyleFormatter">
        <title>Code Style Formatter</title>

        <para><emphasis>Apache Isis</emphasis> has adopted a set of coding
        standards used by several other Apache projects, and compatible with
        our own principles. These projects have previously developed a
        configuration file for Eclipse's Code Style Formatter feature, meaning
        that the formatting can be applied easily.</para>

        <para>Therefore, download the <ulink
        url="http://incubator.apache.org/isis/ide/eclipse/templates/Apache-code-style-formatting.xml">code
        style formatter config file</ulink> and import using Windows &gt;
        Preferences &gt; Java &gt; Code Style &gt; Formatter:</para>

        <screenshot>
          <screeninfo>Eclipse Java Code Style Formatter</screeninfo>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/dev-env/windows-preferences-java-code-style-formatter.png"
                         scale="50" />
            </imageobject>
          </mediaobject>
        </screenshot>

        <para>To run the formatter, use Source &gt; Format. Note that this can
        be done recursively, from a higher level package if required.</para>

        <para>Alternatively, you can use Cleanup, (see <xref
        linkend="sec.CodeStyleCleanup" />), which performs formatting and a
        number of other checks too.</para>

        <para>A final option is to you configure formatting to be run
        automatically as a Save action (see <xref
        linkend="sec.SaveActions" />).</para>
      </sect1>

      <sect1 id="sec.CodeStyleCleanup">
        <title>Code Style Cleanup</title>

        <para><emphasis>Apache Isis</emphasis> provides a configuration file
        for Eclipse's Code Style Cleanup feature. This defines a set of
        operations aimed at removing simple problems with the code, as well as
        running the formatter (see <xref
        linkend="sec.CodeStyleFormatter" />).</para>

        <para>Therefore, download the <ulink
        url="http://incubator.apache.org/isis/ide/eclipse/templates/Apache-Isis-code-style-cleanup.xml">code
        style cleanup config file</ulink> and import using Windows &gt;
        Preferences &gt; Java &gt; Code Style &gt; Cleanup:</para>

        <para><screenshot>
            <screeninfo>Configuring Eclipse's Java Code Style
            Cleanup</screeninfo>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/dev-env/windows-preferences-java-code-style-clean-up.png"
                           scale="50" />
              </imageobject>
            </mediaobject>
          </screenshot></para>

        <para>The cleanup wizard can be run on an adhoc basis using Source
        &gt; Cleanup. Note that this can be done recursively, from a higher
        level package if required. For example:</para>

        <screenshot>
          <screeninfo>Running Source Code Cleanup (1 of 3)</screeninfo>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/doc/Eclipse-cleanup-1.png" scale="50" />
            </imageobject>
          </mediaobject>
        </screenshot>

        <screenshot>
          <screeninfo>Running Source Code Cleanup (2 of 3)</screeninfo>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/doc/Eclipse-cleanup-2.png" scale="50" />
            </imageobject>
          </mediaobject>
        </screenshot>

        <screenshot>
          <screeninfo>Running Source Code Cleanup (3 of 3)</screeninfo>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/doc/Eclipse-cleanup-3.png" scale="50" />
            </imageobject>
          </mediaobject>
        </screenshot>
      </sect1>

      <sect1 id="sec.ImportOrder">
        <title>Import Order</title>

        <para>Our coding standard principles recommend a fixed import order.
        This can be configured using Eclipse's Code Style Organize Imports
        feature.</para>

        <para>Therefore, download the <ulink
        url="http://incubator.apache.org/isis/ide/eclipse/templates/isis.importorder">code
        style organize imports config file</ulink> and import using Windows
        &gt; Preferences &gt; Java &gt; Code Style &gt; Organize
        Imports:</para>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/dev-env/windows-preferences-java-codestyle-organize-imports.png"
                       scale="50" />
          </imageobject>
        </mediaobject>

        <para>The import order can be reorgnaized using Source &gt; Organize
        Imports. Note that this can be done recursively, from a higher level
        package if required. It can also be defined to be run automatically as
        a Save Action, see <xref linkend="sec.SaveActions" />.</para>
      </sect1>

      <sect1 id="sec.SaveActions">
        <title>Save Actions</title>

        <para>While the formatter (<xref linkend="sec.CodeStyleFormatter" />)
        and organize imports (<xref linkend="sec.ImportOrder" />) can be run
        manually, it is also possible to run the formatter whenever code is
        saved.</para>

        <para>To configure this, navigate to Windows &gt; Preferences &gt;
        Save &gt; Actions and enable:</para>

        <screenshot>
          <screeninfo>Eclipse Save Actions</screeninfo>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/dev-env/windows-preferences-java-editor-save-actions.png"
                         scale="50" />
            </imageobject>
          </mediaobject>
        </screenshot>

        <para>From the dialog it is also possible to automatically perform the
        same actions as the cleanup (the Configure button). However, it
        doesn't seem possible (as of Eclipse 3.6) to export/import these
        settings within a config file.</para>

        <para>Our recommendation for now is just to enable the simple
        formatting on save and organize imports, and not waste time manually
        configuring any other actions on save too.</para>

        <warning>
          <para>We make the above recommendation slightly tentatively;
          reformatting all lines clearly could cause a lot of changes.</para>
        </warning>
      </sect1>
    </chapter>

    <chapter id="chp.CodeQuality">
      <title>Code Quality</title>

      <abstract>
        <para>Using plugins such as FindBugs, Checkstyle and PMD to improve
        code quality.</para>
      </abstract>

      <para>As well as using the tools to enforce code standards, there are
      also numerous tools available to improve the overall code quality. As
      many projects do, Apache Isis uses these tools to improve the quality of
      its codebase.</para>

      <para>The tools that we configure are intended to run in both the IDE
      (for immediate visibility to the contributor community) and within Maven
      (for visibility to the user community). There is some overlap between
      them.</para>

      <itemizedlist>
        <listitem>
          <para>the <ulink url="http://www.eclemma.org/">EclEmma
          plugin</ulink> (for Eclipse), and <ulink
          url="http://cobertura.sourceforge.net/">Cobertura</ulink> (for
          Maven) test coverage results</para>
        </listitem>

        <listitem>
          <para>Eclipse's own compiler warnings configuration</para>
        </listitem>

        <listitem>
          <para>the <ulink url="http://eclipse-cs.sourceforge.net">eclipse-cs
          plugin</ulink>, for <ulink
          url="http://checkstyle.sourceforge.net">Checkstyle</ulink>
          support</para>
        </listitem>

        <listitem>
          <para>the <ulink url="http://pmd.sourceforge.net/eclipse">PMD for
          eclipse plugin</ulink>, for <ulink
          url="http://pmd.sourceforge.net">PMD</ulink> support</para>
        </listitem>

        <listitem>
          <para>the <ulink
          url="http://findbugs.sourceforge.net/manual/eclipse.html">findbugs
          plugin</ulink> (for Eclipse), for <ulink
          url="http://findbugs.sourceforge.net/">findbugs</ulink>
          support</para>
        </listitem>
      </itemizedlist>

      <para>This chapter describes the configuration of some of these
      tools.</para>

      <warning>
        <para>This chapter is more of a statement-of-intent for the future,
        rather than reflecting the current status. Right now, if we run these
        tools with the config files that we've located/inherited, we will end
        up with an overwhelming number of issues. There is also some overlap
        between these config files, which still needs to be eliminated.</para>

        <para>So, the plan is to pare down these config files to a bare
        minimum, and then slowly ratchet up the tests as we aim to improve the
        overall code quality going forward.</para>

        <para>By all means go ahead and configure these plugins, but be aware
        that we have not - yet - fully configured them nor are tracking their
        outputs.</para>
      </warning>

      <sect1>
        <title>Code Coverage (Cobertura and Emma)</title>

        <para>Code coverage of unit testing is provided using
        <emphasis>EclEmma</emphasis> for Eclipse and
        <emphasis>Cobertura</emphasis> for Maven. Although there is an Eclipse
        plugin for <emphasis>Cobertura</emphasis>, it has not been maintained
        and no longer runs on the latest versions of Eclipse. Conversely,
        although there is a Maven plugin for Emma, the
        <emphasis>Cobertura</emphasis> plugin gives reports that are more
        easily understood.</para>

        <note>
          <para>In fact, in the future we may move to <ulink
          url="http://www.eclemma.org/jacoco/">JaCoCo</ulink>, a new code
          coverage tool being developed by the originators of EclEmma. One of
          the benefits of <emphasis>JaCoCo</emphasis> is that the
          instrumentation is performed via a java:agent, ie on-the-fly. This
          would allow code coverage to be captured during integration tests,
          for example, without requiring a specific build.</para>
        </note>

        <sect2>
          <title>Eclipse Plugin (Emma)</title>

          <para>The <ulink url="http://www.eclemma.org/">EclEmma</ulink>
          Eclipse plugin offers transparent code coverage directly within the
          Eclipse IDE. Rather than run the tests using Run &gt; Run As &gt;
          JUnit Test, instead use Coverage &gt; Coverage As &gt; JUnit Test.
          This will instrument the code and then provide a coverage view and
          highlights in the editor to show which code has been
          exercised.</para>

          <para>The coverage view looks like:</para>

          <screenshot>
            <screeninfo>EclEmma's Coverage view</screeninfo>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/dev-env/eclemma-coverage-view.png"
                           scale="50" />
              </imageobject>
            </mediaobject>
          </screenshot>

          <para>The highlighted editor looks like:</para>

          <screenshot>
            <screeninfo>EclEmma's highlights for the editord</screeninfo>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/dev-env/eclemma-editor.png"
                           scale="50" />
              </imageobject>
            </mediaobject>
          </screenshot>

          <para>Use the menu item on the Coverage View to select between
          manage the history of coverage runs (selecting none / deleting all
          removes the highlights on the editor).</para>

          <para>To change what code is instrumented, use Run &gt; Coverage
          ...</para>
        </sect2>

        <sect2>
          <title>Maven Plugin (Cobertura)</title>

          <para>The isis-parent <acronym>POM</acronym> automatically includes
          the Maven <ulink
          url="http://mojo.codehaus.org/cobertura-maven-plugin">Cobertura
          plugin</ulink>:</para>

          <para><screen>&lt;plugin&gt;
    &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
    &lt;artifactId&gt;cobertura-maven-plugin&lt;/artifactId&gt;
    &lt;version&gt;2.4&lt;/version&gt;
    &lt;inherited&gt;true&lt;/inherited&gt;          
&lt;/plugin&gt;</screen></para>

          <para>This plugin is not bound to any Maven lifecycle phase, and is
          not intended to be run other than as a report within <classname>mvn
          site</classname>. For more immediate feedback, use the Emma Eclipse
          plugin, above.</para>
        </sect2>
      </sect1>

      <sect1>
        <title>Compiler Warnings</title>

        <para>Eclipse can be configured so that Java compiler warnings can be
        elevated to being fatal errors, or conversely moved down to
        ignored.</para>

        <para>At the current time we do not configuration file for Eclipse,
        but we do intend to do this in the future. The plan will be to start
        with a relatively lax set of warnings (ie most set to ignore) in order
        that we can get 0 warnings in the build. Then we'll slowly start to
        elevate back up to warning, and use that as a way to improve the
        codebase piecemeal.</para>
      </sect1>

      <sect1 id="sec.FindBugs">
        <title>FindBugs</title>

        <para>FindBugs is the first of three powerful tool (the others being
        CheckStyle, see <xref linkend="sec.Checkstyle" />, and PMD, see <xref
        linkend="sec.PMD" />) for enforcing coding standards and detecting
        certain classes of likely errors.</para>

        <para>FindBugs does not (seem to) have a configuration file; it is
        just run against a codebase and reports all errors.</para>

        <para>FindBugs integrates with both Maven and with Eclipse.</para>

        <sect2>
          <title>Eclipse Plugin</title>

          <para>The <ulink
          url="http://findbugs.cs.umd.edu/eclipse/">findbugs</ulink> plugin
          allows FindBugs to be run against a single Eclipse project at a
          time, eg from the context menu:</para>

          <screenshot>
            <screeninfo>Running FindBugs</screeninfo>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/dev-env/findbugs-context-menu.png"
                           scale="45" />
              </imageobject>
            </mediaobject>
          </screenshot>

          <para>If this finds any errors, then <screenshot>
              <screeninfo>Bugs Found!</screeninfo>

              <mediaobject>
                <imageobject>
                  <imagedata fileref="images/dev-env/findbugs-bugs-found-message.png"
                             scale="50" />
                </imageobject>
              </mediaobject>
            </screenshot></para>

          <para>You can then switch to the findbugs perspective to review and
          fix the potential bugs:</para>

          <screenshot>
            <screeninfo>yViewing CheckStyle violations in the Problems
            view</screeninfo>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/dev-env/findbugs-perspective.png"
                           scale="40" />
              </imageobject>
            </mediaobject>
          </screenshot>

          <para>If you want to suppress, rather than fix, the bug, you can
          annotate using the
          <classname>@edu.umd.cs.findbugs.annotations.SuppressWarnings</classname>
          annotion. For example:</para>

          <screenshot>
            <screeninfo>Suppressing warnings from findbugs</screeninfo>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/dev-env/findbugs-suppress-warnings.png"
                           scale="60" />
              </imageobject>
            </mediaobject>
          </screenshot>
        </sect2>

        <sect2>
          <title>Maven Plugin</title>

          <para>The isis-parent <acronym>POM</acronym> automatically includes
          the <ulink
          url="http://mojo.codehaus.org/findbugs-maven-plugin/">Maven findbugs
          plugin</ulink>:</para>

          <para><screen>&lt;plugin&gt;
    &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
    &lt;artifactId&gt;findbugs-maven-plugin&lt;/artifactId&gt;
    &lt;version&gt;2.3.1&lt;/version&gt;
    &lt;inherited&gt;true&lt;/inherited&gt;
&lt;/plugin&gt;</screen>This plugin is not bound to any Maven lifecycle phase,
          and is not intended to be run other than as a report within
          <classname>mvn site</classname>. For more immediate feedback, use
          the Eclipse plugin, above.</para>
        </sect2>
      </sect1>

      <sect1 id="sec.Checkstyle">
        <title>Checkstyle</title>

        <para>Like FindBugs and PMD, <ulink
        url="checkstyle.sourceforge.net">Checkstyle</ulink> is a powerful tool
        for enforcing coding standards and detecting certain classes of likely
        errors. The <ulink
        url="http://incubator.apache.org/isis/codequality/checkstyle.xml">checkstyle
        definition config file</ulink> for <emphasis>Apache Isis</emphasis> is
        derived from Sun's standards, with a number of modifications.</para>

        <para>Checkstyle integrates with both Maven and with Eclipse.</para>

        <sect2>
          <title>Eclipse Plugin</title>

          <para>The <ulink
          url="http://eclipse-cs.sourceforge.net">eclipse-cs</ulink> plugin
          allows Checkstyle violations to be flagged as warnings or errors
          within the Problems view of the Eclipse IDE. To associate
          <emphasis>eclipse-cs</emphasis> with the Checkstyle config file, use
          Windows &gt; Preferences, and specify the config file as <ulink
          url="???">http://incubator.apache.org/isis/codequality/checkstyle.xml</ulink>.
          Alternatively, the file is available locally in
          <filename>trunk/src/site/resources/codequality/checkstyle.xml</filename>.</para>

          <para><remark>TODO: the screenshot is out of date</remark></para>

          <screenshot>
            <screeninfo>Configuring Eclipse-CS</screeninfo>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/dev-env/windows-preferences-eclipse-cs.png"
                           scale="45" />
              </imageobject>
            </mediaobject>
          </screenshot>

          <para><warning>
              <para>According to eclipse-cs' documentation, it is meant to
              integrate with m2eclipse and transparently pick up any Maven
              configuration of mvn-checkstyle-plugin. This doesn't seem to
              work for me, though.</para>
            </warning></para>

          <para>You may then need to enable CheckStyle for each project as
          required, using the context menu in Package Explorer. CheckStyle
          violations show up in the Problems view:</para>

          <screenshot>
            <screeninfo>Viewing CheckStyle violations in the Problems
            view</screeninfo>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/dev-env/problems-view-checkstyle.png"
                           scale="50" />
              </imageobject>
            </mediaobject>
          </screenshot>

          <para>These violations are dynamic updated, so fixing any problem
          should automatically remove the violation from the problems view. A
          quick fix short cut (ctrl+1) is available for some of these.</para>
        </sect2>

        <sect2>
          <title>Maven Plugin</title>

          <para>The isis-parent <acronym>POM</acronym> automatically includes
          the <ulink
          url="http://maven.apache.org/plugins/maven-checkstyle-plugin/">Maven
          checkstyle plugin</ulink>:</para>

          <para><screen>&lt;properties&gt;
    &lt;checkstyle.configLocation&gt;
        ${trunkBaseDir}/src/site/resources/codequality/checkstyle.xml
    &lt;/checkstyle.configLocation&gt;
&lt;/properties&gt;
&lt;reporting&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
            &lt;artifactId&gt;maven-checkstyle-plugin&lt;/artifactId&gt;
            &lt;version&gt;2.6&lt;/version&gt;
            &lt;configuration&gt;
                &lt;configLocation&gt;${checkstyle.configLocation}&lt;/configLocation&gt;
            &lt;/configuration&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/reporting&gt;</screen>This plugin is not bound to any Maven lifecycle
          phase, and is not intended to be run other than as a report within
          <classname>mvn site</classname>. In particular, note that the
          configuration is only defined in the
          <sgmltag>&lt;reporting&gt;</sgmltag> section, so it isn't possible
          to run using <classname>mvn checkstyle:checkstyle</classname>. For
          more immediate feedback, use the Eclipse plugin, above.</para>
        </sect2>
      </sect1>

      <sect1 id="sec.PMD">
        <title>PMD</title>

        <para>Like FindBugs and Checkstyle, <ulink
        url="http://pmd.sourceforge.net">PMD</ulink> is another static
        analysis tool that checks for problematic code (possible bugs, dead
        code, suboptimal code and so on). As for Checkstyle, <emphasis>Apache
        Isis</emphasis> defines a <ulink
        url="http://incubator.apache.org/isis/codequality/pmd.xml">PMD config
        file</ulink>, this one adapted from other projects within
        Apache.</para>

        <para>PMD integrates with both Maven and with Eclipse.</para>

        <sect2>
          <title>Eclipse Plugin</title>

          <para>The <ulink url="http://pmd.sourceforge.net/eclipse">PMD for
          eclipse</ulink> plugin allows PMD violations to be flagged as
          warnings or errors within the Problems view of the Eclipse IDE. The
          plugin also provides a custom "PMD" perspective which also lists all
          violations. To associate <emphasis>PMD for Eclipse</emphasis> with
          the PMD config file, use Windows &gt; Preferences:</para>

          <screenshot>
            <screeninfo>Configuring PMD</screeninfo>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/dev-env/windows-preferences-pmd.png"
                           scale="45" />
              </imageobject>
            </mediaobject>
          </screenshot>

          <para>First, use "Clear All" to remove the default rule set. Then,
          use "Import rule set" and specify the pmd.xml file. Unlike the
          Checkstyle plugin, this must be a local file so must be referenced
          locally, from
          <filename>trunk/src/site/resources/codequality/pmd.xml</filename>.</para>

          <para>Also unlike the Checkstyle plugin, PMD violations are not
          continually updated against the code (it is not implemented as an
          Eclipse builder). To perform a check, you must use the context menu
          in Package Explorer and then use PMD &gt; Check Code with PMD. This
          will switch into the PMD perspective; the Violations view will
          indicate any code that needs attention:</para>

          <screenshot>
            <screeninfo>Viewing PMD violations in the Violations
            view</screeninfo>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/dev-env/pmd-violations-view.png"
                           scale="50" />
              </imageobject>
            </mediaobject>
          </screenshot>

          <para>Alternatively, you can switch back to the Java view; any PMD
          violations show up in the Problems view:</para>

          <screenshot>
            <screeninfo>Viewing PMD violations in the Problems
            view</screeninfo>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/dev-env/problems-viewpmd.png"
                           scale="50" />
              </imageobject>
            </mediaobject>
          </screenshot>

          <para>Once violations are fixed, the Check must be performed again
          to refresh both of these views.</para>

          <para>Note, to prevent PMD from switching to its own perspective,
          use Windows &gt; Preferences &gt; PMD and then disable "Show PMD
          Perspective when checking code".</para>
        </sect2>

        <sect2>
          <title>Maven Plugin</title>

          <para>The isis-parent <acronym>POM</acronym> automatically includes
          the Maven <ulink
          url="http://maven.apache.org/plugins/maven-pmd-plugin/">PMD
          plugin</ulink>:</para>

          <para><screen>&lt;properties&gt;
    &lt;pmd.ruleset&gt;
        ${trunkBaseDir}/src/site/resources/codequality/pmd.xml
    &lt;/pmd.ruleset&gt;
&lt;/properties&gt;
&lt;reporting&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
            &lt;artifactId&gt;maven-pmd-plugin&lt;/artifactId&gt;
            &lt;version&gt;2.5&lt;/version&gt;
            &lt;configuration&gt;
                &lt;sourceEncoding&gt;${project.build.sourceEncoding}&lt;/sourceEncoding&gt;
                &lt;minimumTokens&gt;100&lt;/minimumTokens&gt;
                &lt;linkXref&gt;true&lt;/linkXref&gt;
                &lt;targetJdk&gt;${compileTarget}&lt;/targetJdk&gt;
                &lt;rulesets&gt;
                    &lt;ruleset&gt;${pmd.ruleset}&lt;/ruleset&gt;
                &lt;/rulesets&gt;
                &lt;excludeRoots&gt;
                    &lt;excludeRoot&gt;
                        ${project.build.directory}/generated-sources/modello
                    &lt;/excludeRoot&gt;
                    &lt;excludeRoot&gt;
                        ${project.build.directory}/generated-sources/plugin
                    &lt;/excludeRoot&gt;
                &lt;/excludeRoots&gt;
            &lt;/configuration&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/reporting&gt;</screen></para>

          <para>As for Checkstyle, this plugin is not bound to any Maven
          lifecycle phase, and is not intended to be run other than as a
          report within <classname>mvn site</classname>. In particular, note
          that the configuration is only defined in the
          <sgmltag>&lt;reporting&gt;</sgmltag> section, so it isn't possible
          to run using <classname>mvn pmd:pmd</classname>. For more immediate
          feedback, use the Eclipse plugin, above.</para>
        </sect2>
      </sect1>
    </chapter>

    <chapter id="chp.WritingDocumentation">
      <title>Writing Documentation</title>

      <abstract>
        <para>This chapter provides some guidance on writing both DocBook and
        site (APT) documentation.</para>
      </abstract>

      <para>This chapter provides some guidance on writing both DocBook and
      site (APT) documentation, explaining what sort of content should go into
      each of these types, as well as the mechanics of actually writing these
      types of documents.</para>

      <para>See <xref linkend="chp.BuildingSiteAndDocs" /> for details on how
      to build the site documentation.</para>

      <para>See <xref linkend="chp.AptQuickStart" /> and <xref
      linkend="chp.DocBookQuickStart" /> for details on how to write APT or
      DocBook documentation.</para>

      <sect1>
        <title>Overview</title>

        <para>Maven provides the ability to automatically create a website
        holding various reports, such as Checkstyle, <acronym>PMD</acronym>,
        test results and code coverage. At least as far as <emphasis>Apache
        Isis</emphasis> is concerned, the site created reflects the module
        hierarchy, with at least one single index.html page to introduce each
        module. The main site (corresponding to isis-parent) has rather more
        content, eg discussing the naked objects pattern.</para>

        <para>This additional site content can be written in a number of
        formats, but the most straightforward is to use Maven's own APT
        format. APT here stands for "almost plain text"; it's basically a
        wiki-like syntax. The index.html for each file would typically
        correspond to <filename>index.apt</filename> file; the site content
        lives under <filename>src/site</filename> (relative to each module's
        <filename>pom.xml</filename>).</para>

        <para>In addition, a number of the modules have formal documentation
        in the form of (all-in-one) user/programmer/developer guides. These
        are written in DocBook 4.5, so that they can be processed by the
        <filename>docbkx-maven-plugin</filename> and converted to either
        <acronym>PDF</acronym> or <acronym>HTML</acronym>. These guides can be
        found under <filename>src/docbkx</filename> (relative to the module's
        <filename>pom.xml</filename>).</para>
      </sect1>

      <sect1>
        <title>Maven Modules</title>

        <para>The following tables indicates which modules have DocBook
        guides, and which do not:</para>

        <table>
          <title>Isis Modules (1 of 2)</title>

          <tgroup cols="6">
            <colspec colname="_1" colwidth="20" />

            <colspec colname="_2" colwidth="20" />

            <colspec colname="_3" colwidth="20" />

            <colspec colname="_4" colwidth="60" />

            <colspec align="center" colwidth="50" />

            <colspec />

            <thead>
              <row>
                <entry align="center" nameend="_4"
                namest="_1">Directory</entry>

                <entry align="center">DocBk?</entry>

                <entry align="center">Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry nameend="_4" namest="_1">./</entry>

                <entry>Y</entry>

                <entry>Parent</entry>
              </row>

              <row>
                <entry></entry>

                <entry nameend="_4" namest="_2">applib</entry>

                <entry>Y</entry>

                <entry>Applib for default programming model</entry>
              </row>

              <row>
                <entry></entry>

                <entry nameend="_4" namest="_2">core</entry>

                <entry>Y</entry>

                <entry>Parent for core framework</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3">testsupport</entry>

                <entry></entry>

                <entry>Unit testing support</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3">common</entry>

                <entry></entry>

                <entry>Common utilities</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3">metamodel</entry>

                <entry></entry>

                <entry>Meta-model</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3">progmodel</entry>

                <entry></entry>

                <entry>Reusable programming model facets</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3">runtime</entry>

                <entry></entry>

                <entry>Runtime &amp; cmdline bootstrapping</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3">webapp</entry>

                <entry></entry>

                <entry>Common filters etc. for web-based viewers</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3">webserver</entry>

                <entry></entry>

                <entry>Web server bootstrapping</entry>
              </row>

              <row>
                <entry></entry>

                <entry nameend="_4" namest="_2">defaults</entry>

                <entry>Y</entry>

                <entry>Parent for default implementations</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3">bytecode</entry>

                <entry></entry>

                <entry>Default (cglib) bytecode enhancement</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3">progmodel</entry>

                <entry></entry>

                <entry>Default (Java5) programming model</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3">objectstore</entry>

                <entry></entry>

                <entry>Default (in-memory) object store</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3">profilestore</entry>

                <entry></entry>

                <entry>Default (in-memory) profile store</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3">security</entry>

                <entry></entry>

                <entry>Default (no-op) security mechanism</entry>
              </row>

              <row>
                <entry></entry>

                <entry nameend="_4" namest="_2">viewer</entry>

                <entry></entry>

                <entry>Parent for viewers</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3">bdd</entry>

                <entry>Y</entry>

                <entry>BDD (Concordion) viewer</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3">dnd</entry>

                <entry>Y</entry>

                <entry>DnD viewer</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3">html</entry>

                <entry>Y</entry>

                <entry>HTML viewer</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3">junit</entry>

                <entry>Y</entry>

                <entry>JUnit viewer</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3">restful</entry>

                <entry>Y</entry>

                <entry>Restful viewer</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3">scimpi</entry>

                <entry>Y</entry>

                <entry>Scimpi (customizable web UI) viewer</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3">wicket</entry>

                <entry>Y</entry>

                <entry><ulink url="http://wicket.apache.org">Apache
                Wicket</ulink>-based viewer</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <table>
          <title>Isis Modules (2 of 2)</title>

          <tgroup cols="6">
            <colspec colname="_1" colwidth="20" />

            <colspec colname="_2" colwidth="20" />

            <colspec colname="_3" colwidth="20" />

            <colspec colname="_4" colwidth="60" />

            <colspec align="center" colwidth="50" />

            <colspec />

            <thead>
              <row>
                <entry align="center" nameend="_4"
                namest="_1">Directory</entry>

                <entry align="center">DocBk?</entry>

                <entry align="center">Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry></entry>

                <entry nameend="_4" namest="_2">alternatives</entry>

                <entry></entry>

                <entry>Default for alternative implementations</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3">bytecode</entry>

                <entry>Y</entry>

                <entry>Parent for alternative bytecode impl's</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry></entry>

                <entry>javassist</entry>

                <entry></entry>

                <entry>Javasisst bytecode enhancement</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry></entry>

                <entry>basic</entry>

                <entry></entry>

                <entry>Basic (no-op) bytecode enhancement</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3">progmodel</entry>

                <entry></entry>

                <entry>Parent for alternative programming models</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry></entry>

                <entry>wrapper</entry>

                <entry>Y</entry>

                <entry>Wrapper progmodel</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry></entry>

                <entry>groovy</entry>

                <entry>Y</entry>

                <entry>Groovy progmodel</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3">objectstore</entry>

                <entry></entry>

                <entry>Parent for alternative objectstores</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry></entry>

                <entry>nosql</entry>

                <entry>Y</entry>

                <entry>NOSQL object store</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry></entry>

                <entry>sql</entry>

                <entry>Y</entry>

                <entry>SQL object store</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry></entry>

                <entry>xml</entry>

                <entry>Y</entry>

                <entry>XML object store</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry></entry>

                <entry>jpa</entry>

                <entry>Y</entry>

                <entry>JPA object store</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3">profilestore</entry>

                <entry></entry>

                <entry>Parent for alternative profile stores</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry></entry>

                <entry>xml</entry>

                <entry>Y</entry>

                <entry>XML profile store</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3">security</entry>

                <entry></entry>

                <entry>Parent for alternative security mechanisms</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry></entry>

                <entry>file</entry>

                <entry>Y</entry>

                <entry>File-based security</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry></entry>

                <entry>ldap</entry>

                <entry>Y</entry>

                <entry>LDAP-based security</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3">embedded</entry>

                <entry>Y</entry>

                <entry>Embedded metamodel support</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3">remoting</entry>

                <entry>Y</entry>

                <entry>Remoting support</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry></entry>

                <entry>common</entry>

                <entry></entry>

                <entry>Common remoting libraries</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry></entry>

                <entry>transport- sockets</entry>

                <entry></entry>

                <entry>Sockets transport</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry></entry>

                <entry>transport- http</entry>

                <entry></entry>

                <entry>HTTP transport</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry></entry>

                <entry>marshalling- encode</entry>

                <entry></entry>

                <entry>Encode marshalling</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry></entry>

                <entry>marshalling- serialize</entry>

                <entry></entry>

                <entry>Serialize marshalling</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry></entry>

                <entry>marshalling- xstream</entry>

                <entry></entry>

                <entry>XStream marshalling</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para>In general, the principle is for the DocBook guide to be
        reasonably complete. The docbkx-maven-plugin is capable of
        transforming the guide into fully hyperlinked HTML, and the
        configuration within the pom.xml is such that this is published as
        part of the site. In addition (as already mentioned) the DocBook is
        also converted into <acronym>PDF</acronym> for those that prefer that
        form (eg to download and print out).</para>

        <para>The APT site documentation therefore should be used to provide
        just enough of an overview so that a prospective user can understand
        what the particular module is for, and to provide signposting to the
        more detailed docbook guide where needed. Much of this signposting is
        taken care of already, being configured in the site menu.</para>
      </sect1>
    </chapter>

    <chapter id="chp.WritingSiteDocs">
      <title>APT Quick Start</title>

      <abstract>
        <para>Common use cases for writingy site documentation using
        APT.</para>
      </abstract>

      <para>As discussed in <xref linkend="chp.WritingDocumentation" />,
      <emphasis>Apache Isis</emphasis> uses Maven's <acronym>APT</acronym>
      (almost plain text) syntax for most of its site documentation. This
      chapter is a quick-start on using APT.</para>

      <sect1 id="sec.additional-site-content">
        <title>File Formats and Locations</title>

        <para>When writing additional site content</para>

        <itemizedlist>
          <listitem>
            <para>documents go in <filename>src/site/xxx</filename>, where
            <filename>xxx</filename> is the file format.</para>

            <para>For example <acronym>APT</acronym> documents live under
            <filename>src/site/apt</filename>.</para>
          </listitem>

          <listitem>
            <para>images and other resources go in src/site/resources and are
            referenced relative to this directory.</para>

            <para>For example images typically live under
            <filename>src/site/resources/images</filename>.</para>
          </listitem>
        </itemizedlist>

        <para>For example, <filename>src/site/apt/index.apt</filename> will
        correspond to index.html for the module.</para>

        <para>Maven sites can include documentation in any of a number of file
        formats:</para>

        <table>
          <title>File formats supported by Maven site</title>

          <tgroup cols="4">
            <thead>
              <row>
                <entry align="center">Format</entry>

                <entry align="center">Type</entry>

                <entry align="center">Location</entry>

                <entry align="center">Reference</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>APT</entry>

                <entry>Wiki-like format</entry>

                <entry>src/site/apt/xxx.apt</entry>

                <entry><ulink
                url="http://maven.apache.org/doxia/references/apt-format.html">Maven
                Doxia site (APT reference)</ulink></entry>
              </row>

              <row>
                <entry>DocBook</entry>

                <entry>Full power of DocBook</entry>

                <entry>src/site/docbook/xxx.xml</entry>

                <entry><ulink
                url="http://docbook.org/tdg/en/html/quickref.html">DocBook
                site (quick ref)</ulink></entry>
              </row>

              <row>
                <entry>FML</entry>

                <entry>FAQ Markup Language</entry>

                <entry>src/site/fml/xxx.xml</entry>

                <entry><ulink
                url="http://maven.apache.org/doxia/references/fml-format.html">Maven
                Doxia site (FML reference)</ulink></entry>
              </row>

              <row>
                <entry>XDoc</entry>

                <entry>Simplified DocBook, used in Maven 1.</entry>

                <entry>src/site/xdoc/xxx.xml</entry>

                <entry><ulink
                url="http://maven.apache.org/doxia/references/xdoc-format.html">Maven
                Doxia site (XDoc reference)</ulink></entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para>Of these, <acronym>APT</acronym> is the lowest entry, and is the
        generally recommended format. APT reference is available online at
        <ulink
        url="http://maven.apache.org/doxia/references/apt-format.html">http://maven.apache.org/doxia/references/apt-format.html</ulink>,
        but the following are some of the main formatting tips.</para>
      </sect1>

      <sect1>
        <title>Sections and Sub-sections</title>

        <para>Sections are not indented, paragraphs are.</para>

        <screen>My section title (not indented).

  My paragraph first line (indented by 2 spaces).  There is no need for remaining 
sentences in the paragraph to be indented.  A blank line terminates the paragraph.</screen>

        <para>Subsections can be defined using leading asterisks
        (<varname>*</varname>) to indicate the subsection level
        indents:</para>

        <screen>Section title

* Sub-section title

** Sub-sub-section title

*** Sub-sub-sub-section title</screen>
      </sect1>

      <sect1>
        <title>Fonts</title>

        <para>In addition to regular font, we can specify italics, bold or
        monospaced:</para>

        <screen>  &lt;italicised text&gt;
  &lt;&lt;bold text&gt;&gt;
  &lt;&lt;&lt;monospaced text&gt;&gt;&gt;</screen>
      </sect1>

      <sect1>
        <title>Lists</title>

        <para>List items are indented, and begin with an asterisk
        (<varname>*</varname>)</para>

        <screen>  * List item 1.

  * List item 2.

    Paragraph contained in list item 2.

    * Sub-list item 1.

    * Sub-list item 2.

  * List item 3.</screen>

        <para>To force the end of a list, use the <varname>[]</varname>
        pseudo-element:</para>

        <screen>  * List item 3.
 
  []

  This text is not in the list</screen>
      </sect1>

      <sect1>
        <title>Links and Figures</title>

        <para>To create an external link, use:</para>

        <screen>  Link to {{http://www.pixware.fr}}.
  or 
  Link to {{{http://www.pixware.fr}Pixware home page}}.</screen>

        <para>To create an internal link (to a page relative to this one),
        use:</para>

        <screen>  Link to {{{./docbkx/guide/isis-applib.pdf}AppLib Guide (PDF)}}</screen>

        <warning>
          <para>the "./" is required for internal links.</para>
        </warning>

        <para>To create an anchor, use:</para>

        <screen>  {Anchor}. This text is anchored.
  and then
  Link to {{anchor}}.
  or
  Link to {{{anchor}showing alternate text}}</screen>

        <para>Figures are specified by</para>

        <screen>  [images/foo/bar.png] Figure caption</screen>
      </sect1>

      <sect1>
        <title>Code Blocks (verbatim text)</title>

        <para>To quote a code block, use 3 dashes (<varname>---</varname>)
        before and after:</para>

        <screen>----------------------------------------
public class FooBar {
  ...
}
----------------------------------------</screen>

        <para>To put into a box, use a plus symbol
        (<varname>+--</varname>)</para>
      </sect1>

      <sect1>
        <title>Other Code Elements</title>

        <para>In addition to the above, <acronym>APT</acronym> supports
        tables, horizontal rules (===), page breaks, comments and special
        characters. See the <ulink
        url="http://maven.apache.org/doxia/references/apt-format.html">Maven
        Doxia</ulink> site for further details.</para>
      </sect1>
    </chapter>

    <chapter id="chp.WritingDocBookDocs">
      <title>DocBook Quick Start</title>

      <abstract>
        <para>Common use cases for writing formal documentation using
        DocBook.</para>
      </abstract>

      <para>As discussed in <xref linkend="chp.WritingDocumentation" />,
      <emphasis>Apache Isis</emphasis> uses DocBook as its primary
      documentation format, each significant module providing its own guide
      which is then converted into both PDF and HTML forms.</para>

      <para>DocBook is just XML, so you could edit the text with any text
      editor. However, you may find it easier to use an editor; and the we
      recommend here is from <ulink
      url="http://www.xmlmind.com/xmleditor">XMLMind</ulink>. The personal
      edition is free for use on open source projects.</para>

      <para>Below is a quick notes on using XmlMind.</para>

      <sect1>
        <title>Writing DocBook Guides (using XMLMind)</title>

        <para>DocBook guides can be found in src/docbkx (relative to the
        module's <filename>pom.xml</filename>).</para>
      </sect1>

      <sect1>
        <title>Creating a Document</title>

        <para>Use <emphasis>File &gt; New Document</emphasis> to create an
        <emphasis>DocBook </emphasis>document. This will create a v4.5
        docbook:</para>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/doc/DocBook-new-document.png"
                       scale="50" />
          </imageobject>
        </mediaobject>

        <para>The file should be saved under
        <filename>src/docbkx/guide</filename>.</para>

        <para>Once the file has been created, change the
        <literal>DOCTYPE</literal> entry to reference <acronym>DTD</acronym>s
        stored locally. We use the <literal>svn:externals</literal> property
        to "symbolically link" 3 directories under
        <filename>trunk/src/docbkx/guide</filename>
        (<filename>dtd-4.5</filename>, <filename>images</filename> and
        <filename>style</filename>); these can therefore be referenced
        locally.</para>

        <para>In addition, the standard Apache license comment is
        required.</para>

        <para>Here's the boilerplate to copy-n-paste in:</para>

        <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!--
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
--&gt;
&lt;!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"file:./src/docbkx/dtd-4.5/docbookx.dtd"&gt;

&lt;book&gt;
    ...
&lt;/book&gt;</programlisting>

        <para>Note the <acronym>DTD</acronym> location, as
        <filename>file:./src/test/resources/dtd</filename>.</para>
      </sect1>

      <sect1>
        <title>Loading a Document</title>

        <para>To load an existing document, simply use
        <emphasis>File&gt;Open</emphasis>. This will display the DocBook
        styled using the CSS. DocBook does allow the CSS to be customized; at
        the time of writing we have not done this for DocBook.</para>
      </sect1>

      <sect1>
        <title>Navigating the Document</title>

        <para>To navigate around, use up arrow, down arrow, pg up, pg down to
        move around.</para>

        <para>It is also possible to navigate by opening up an alternative
        view, using <emphasis>View &gt; Add</emphasis> to bring up a
        dialog:</para>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/doc/DocBook-add-view.png" scale="40" />
          </imageobject>
        </mediaobject>

        <para>For example, this is a view of the raw XML:</para>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/doc/DocBook-view-left.png" scale="40" />
          </imageobject>
        </mediaobject>

        <para>Alternatively it could be styled as a document structure:</para>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/doc/DocBook-document-structure-view.png"
                       scale="40" />
          </imageobject>
        </mediaobject>

        <para>This can then be used to navigate, collapsing sections if
        needed.</para>
      </sect1>

      <sect1>
        <title>Knowing where you are</title>

        <para>The position within the document is shown as a XPath like
        expression. If the unstyled view is open, then the current position is
        highlighted (even if the section is collapsed). In the styled view the
        current cursor position is shown just as in a regular word
        processor.</para>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/doc/DocBook-navigate-xpath.png"
                       scale="35" />
          </imageobject>
        </mediaobject>
      </sect1>

      <sect1>
        <title>Selecting Content (eg to delete/move, or prior to adding new
        content)s</title>

        <para>The XMLMind editor understands the structure of DocBook
        documents, and will only let you enter content where it is valid to do
        so. What you can do (in terms of edits) therefore depends on where you
        are in the document.</para>

        <para>Use <emphasis>Select &gt; Select Parent</emphasis>
        (<command>ctrl+up</command>) to successively select larger segments of
        the document; and <emphasis>Select &gt; Select Child</emphasis>
        (<command>ctrl+down</command>) to selects smaller segments.</para>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/doc/DocBook-selectingcontent-1.png"
                       scale="40" />
          </imageobject>
        </mediaobject>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/doc/DocBook-selectingcontent-2.png"
                       scale="40" />
          </imageobject>
        </mediaobject>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/doc/DocBook-selectingcontent-3.png"
                       scale="40" />
          </imageobject>
        </mediaobject>
      </sect1>

      <sect1>
        <title>Writing Content</title>

        <sect2>
          <title>Adding New Paragraphs</title>

          <para>To modify the content in a paragraph, just start writing!
          Hitting enter will start a new paragraph; delete will join two
          paragraphs together. Behind the scenes the &lt;para&gt; elements are
          added.</para>
        </sect2>

        <sect2>
          <title>Formatting Existing Paragraphs</title>

          <para>Using <emphasis>Edit &gt; Insert</emphasis>
          (<command>ctrl+I</command>) within a paragraph will only bring up
          elements that are valid within that paragraph, such as
          <literal>emphasis</literal>:</para>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/doc/DocBook-insert-within.png"
                         scale="40" />
            </imageobject>
          </mediaobject>

          <para>That said, for adding tags within a paragraph (such as
          emboldening or emphasis), it is generally easier to write the words
          and then use <emphasis>Edit &gt; Convert (wrap)</emphasis>. First,
          highlight the words by holding shift and then navigating as usual
          (eg <command>shift+left</command>, <command>shift+right</command>).
          Then, use <emphasis>Edit&gt;Convert(wrap)</emphasis> to add the
          emphasis.</para>
        </sect2>

        <sect2>
          <title>Adding a new heading (sect1, sect2) etc</title>

          <para>In general, use <emphasis>Edit &gt; Insert After</emphasis>
          (<command>ctrl+J</command>) after to add new content after the
          current location, and <emphasis>Edit &gt; Insert Before</emphasis>
          (<command>ctrl+H</command>) to insert before. This will bring up a
          list of valid elements in the top right:</para>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/doc/DocBook-inserting-sections.png"
                         scale="40" />
            </imageobject>
          </mediaobject>

          <para>Note that it isn't possible to add a new subsection in the
          middle of existing paragraphs; as the screenshot below shows,
          attempting to add a section "sect3" under <emphasis>this</emphasis>
          paragraph would not be allowed, for example:</para>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/doc/DocBook-cant-add-section-in-middle.png"
                         scale="70" />
            </imageobject>
          </mediaobject>

          <para>Instead, go to last paragraph (eg like this one) and add the
          subsection there. Then cut-and-paste the content around as
          required.</para>
        </sect2>

        <sect2>
          <title>Adding lists</title>

          <para>Adding lists are added as for any element: use
          <command>ctrl+J</command> and then select
          <literal>itemizedlist</literal> (unordered list) or
          <literal>&lt;orderedlist&gt;</literal>. You’ll get the first
          <literal>listitem</literal> for free. Create new list items by
          selecting the current list item (<command>ctrl+up</command> as far
          as required) then use <command>ctrl+J</command>.</para>

          <para>If you want to terminate the list, then select the current
          list (<command>ctrl+up</command>), then <command>ctrl+J</command>
          and select <literal>para</literal> for next paragraph.</para>
        </sect2>

        <sect2>
          <title>Adding Images</title>

          <para>Images should be saved as <filename>.png</filename> files,
          under the <filename>images</filename> subdirectory (relative the
          directory holding <filename>xxx-guide.xml</filename>).</para>

          <para>Images should be embedded into the documentation using either
          a <sgmltag>mediaobject/imageobject/imagedata</sgmltag> tag or a
          <sgmltag>screenshot/mediaobject/imageobject/imagedata</sgmltag> tag.
          In XMLMind, use Edit&gt;Insert and select screenshot:</para>

          <screenshot>
            <screeninfo>Image</screeninfo>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/doc/embedded-imagedata.png"
                           scale="50" />
              </imageobject>
            </mediaobject>
          </screenshot>

          <para>The outer <sgmltag>imagedata</sgmltag> tag should have an
          appropriate <varname>scale</varname> attribute; a value of 50 (note:
          <emphasis>not</emphasis> 50%) works reasonably well:</para>

          <screenshot>
            <screeninfo>ImageData Attributes</screeninfo>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/doc/embedded-image-attributes.png"
                           scale="50" />
              </imageobject>
            </mediaobject>
          </screenshot>
        </sect2>

        <sect2>
          <title>Adding and Altering Tables</title>

          <para>Use <emphasis>Edit &gt; Insert After</emphasis> (or
          <emphasis>Edit &gt; Insert Before</emphasis>), and then select one
          of the table elements:</para>

          <itemizedlist>
            <listitem>
              <para><literal>table</literal></para>
            </listitem>

            <listitem>
              <para><literal>table (head_column)</literal></para>

              <para>to include a header column (on the left hand side)</para>
            </listitem>

            <listitem>
              <para><literal>table (head_row)</literal></para>

              <para>to include a header row</para>
            </listitem>

            <listitem>
              <para><literal>table (head_row_column)</literal></para>

              <para>to include a header row and column</para>
            </listitem>
          </itemizedlist>

          <para>This will create a 2x2 table body with a header row and/or
          column if requested. Then use DocBook &gt; Column &gt; Insert or
          DocBook &gt; Row &gt; Insert to adjust the number of columns and
          rows as required.</para>

          <para>To adjust the width of columns, select the first row and then
          use Edit&gt;Insert before to insert &lt;colspec&gt; elements.</para>

          <para>It's also possible to merge cells using
          DocBook&gt;Cell&gt;Increment ... Span</para>
        </sect2>
      </sect1>

      <sect1>
        <title>Deleting Content</title>

        <para>To delete content, select the content first
        (<command>ctrl+up</command> / <command>ctrl+down</command>), then
        <emphasis>Edit &gt; Delete</emphasis>
        (<command>ctrl+K</command>).</para>

        <para>In general you shouldn’t need to use the <emphasis>Edit &gt;
        Force Deletion</emphasis>; instead try adjusting the range being
        selected if <emphasis>Edit &gt; Delete</emphasis> isn’t
        enabled.</para>
      </sect1>

      <sect1>
        <title>Moving Content</title>

        <para>Select the content you want using <command>ctrl+up</command>. If
        necessary extend the selection using <emphasis>Select &gt; Extend
        Selection to Following Sibling</emphasis> or <emphasis>Select &gt;
        Extend Selection to Preceding Sibling</emphasis>.</para>

        <para>Use <emphasis>Edit &gt; Cut</emphasis> to cut, and then
        <emphasis>Edit &gt; Paste After</emphasis> or <emphasis>Edit &gt;
        Paste Before</emphasis> to paste wherever. If these are greyed out,
        bear in mind that XmlMind won’t let you paste in content where it
        would be invalid. If necessary, adjust the selection until they become
        enabled.</para>
      </sect1>
    </chapter>
  </part>
</book>
