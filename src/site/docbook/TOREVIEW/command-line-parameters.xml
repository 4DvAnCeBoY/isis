<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
-->
<!DOCTYPE article PUBLIC "-//OASIS//DTD Simplified DocBook XML V1.1//EN"
"http://www.oasis-open.org/docbook/xml/simple/1.1/sdocbook.dtd">
<article>
  <articleinfo>
    <title>Command line parameters</title>

    <author>
      <firstname></firstname>

      <surname></surname>

      <affiliation>
        <orgname></orgname>
      </affiliation>
    </author>

    <pubdate></pubdate>
  </articleinfo>

  <section>
    <title id="command-line-parameters">Command line parameters</title>

    <para>A bootstrapper takes care of loading up the [[NAME]] framework
    and application, initialising it, and running it. When it starts up it
    reads in a list of components and attempts to load in each one. Any
    component that can be loaded is then available to be used and can then be
    specified on the command line if required. Requesting a component that
    cannot be loaded will result in an error. To resolve such an error simply
    ensure that the component's Jar file is available on the class path. All
    the components supplied with the framework are listed in the file
    <filename class="directory"
    moreinfo="none">installer-registry.properties</filename> which is part of
    the <filename class="directory" moreinfo="none">runtime-4.0.jar</filename>
    file.</para>

    <para>During start-up [[NAME]] loads in a number of configuration
    files. The main file, <filename class="directory"
    moreinfo="none">isis.properties</filename>, is always loaded and
    must be present for the framework to start up. For each of the various
    types of persistor and viewer, there is a separate configuration file. For
    example, for the following command line parameters</para>

    <literallayout>-v dnd -r xml</literallayout>

    <para>specifies that the viewer is to be the drag and drop (<literal
    moreinfo="none">dnd</literal>) interface, and the persistor is to be the
    'xml object store'. As well as loading those components, the framework
    will look for configuration files named <filename
    moreinfo="none">viewer.properties</filename>, <filename class="directory"
    moreinfo="none">viewer_dnd.properties</filename>, <filename
    moreinfo="none">persistor.xml</filename> and <filename class="directory"
    moreinfo="none">persistor_xml.properties</filename> and will load them if
    found.</para>

    <section>
      <title>Options</title>

      <para>The bootstrapper is the class
      <literal>org.apache.isis.runtime.Isis</literal> and takes the
      following options on the command line. (Note that in each case there is
      an abbreviated, and a full, version of the option).</para>

      <para>There is also an alternative bootstrapper,
      org.apache.isis.webserver.WebServer.</para>

      <section>
        <title>Configuration</title>

        <literallayout>-c &lt;config file&gt;
--config &lt;config file&gt;</literallayout>

        <para>Loads in the specified configuration file, in addition to
        <filename class="directory"
        moreinfo="none">isis.properties</filename> and the properties
        files relating to the installed component.</para>
      </section>

      <section>
        <title>Disable splash</title>

        <literallayout>-s
--nosplash</literallayout>

        <para>Prevents the splash screen from being displayed during start
        up.</para>
      </section>

      <section>
        <title>Help</title>

        <literallayout>-h
--help</literallayout>

        <para>Prints out the options that are available. This is dynamic so
        that only the components that can be used are listed.</para>
      </section>

      <section>
        <title>Logging</title>

        <para>The amount of logging detail can be controlled from the command
        line. If no flag is specified only warnings and errors are output. All
        logging level relate to the Log4J levels, which is the logging
        mechanism used by [[NAME]].</para>

        <literallayout>-quiet</literallayout>

        <para>Quiet reduces logging to show errors only.</para>

        <literallayout>-verbose</literallayout>

        <para>Increases logging to show information about the system as it
        runs.</para>

        <literallayout>-debug</literallayout>

        <para>Increases logging to show all logged entries. At this level so
        much is logged that it will likely slow down the system if used when
        outputting log details to the console or other slow devices.</para>
      </section>

      <section>
        <title>Deployment Type (or Mode)</title>

        <literallayout>-t &lt;mode&gt;
--type &lt;mode&gt;</literallayout>

        <para>The framework is started up in one of several different
        deployment modes, as listed below:</para>

        <para><emphasis>exploration</emphasis> - Exploration mode is for
        developers to explore and test their code. The framework always uses
        an in-memory persistor and runs the fixtures at startup to ensure a
        known state every time the system is started. The user is not prompted
        to log in, but is automatically logged in as user 'exploration'. The
        logged in user can be changed on the fly using an option with the user
        interface; this simply changes the user and does not require an
        explicit login action. Also, exploration methods defined in the DOM
        are also available to the user to do things that a user would not
        normally be allowed to do. These are used expressly for testing the
        system. Please note it is an error to specify a persistor type in
        exploration mode.</para>

        <para><emphasis>prototype</emphasis> - Prototype mode is for
        demonstrating the system in realistic fashion. The user is always
        prompted to log in at start up, and can log out and log in again
        without losing the state of the objects. This allows a user to
        demonstrate exactly how a system would work.</para>

        <para><emphasis>single-user</emphasis> - Single user mode runs the
        system for a single user with object persistence.</para>

        <para><emphasis>client</emphasis> - Client mode provides multiple
        users access to a server. With this mode selected the
        <emphasis>connection</emphasis> option must also be specified.</para>

        <para><emphasis>server-exploration</emphasis> - Server mode, but all
        clients will automatically be logged in as the 'exploration' user (or
        as <literal>LoginFixture</literal> is present).</para>

        <para><emphasis>server-prototype</emphasis> - Server mode, but if a
        <literal>LoginFixture</literal> is present then all clients will
        automatically be logged in as this user.</para>

        <para><emphasis>server</emphasis> - Server mode runs [[NAME]] as
        a server for multiple clients. With this mode selected the
        <emphasis>connection</emphasis> option must also be specified.</para>

        <para>If no mode is specified, the framework will start up in
        <emphasis>prototype</emphasis> mode.</para>
      </section>

      <section>
        <title>Overridden properties</title>

        <literallayout>-D property=value</literallayout>

        <para>Using this flag we can pass in properties from the command line
        that would otherwise need to specified in a configuration file. This
        is normally used to override a property, or to temporarily specify
        one.</para>
      </section>

      <section>
        <title>Password</title>

        <literallayout>-p &lt;password&gt;
--password &lt;password&gt;</literallayout>

        <para>Ignored if type is prototype or not used with the user option
        below.</para>

        <para>Uses the specified password when logging the user in with the
        username specified with <literal>--user</literal>.</para>
      </section>

      <section>
        <title>Persistor</title>

        <literallayout>-r &lt;persistor&gt;
--persistor &lt;persistor&gt;</literallayout>

        <para>Ignored if type is client.</para>

        <para>The persistor option allows you to choose how the objects
        created by the system will be persisted so they are still available
        the next time you run the system. The following options are available
        with the current distribution, and if none is specified then the
        in-memory persistor will be used for exploration mode and xml
        persistor will be used for other non-client modes by default.</para>

        <para><emphasis>in-memory</emphasis> - A simple non-persisting
        mechanism that will only hold the persisted object while the virtual
        machine is running. This is used for testing and demonstrating.</para>

        <para><emphasis>xml</emphasis> - A simple file based mechanism that
        encodes each object's data in an XML file. Alongside the data files
        for the objects are instance lists listing all the files for each type
        of object.<emphasis></emphasis></para>

        <para><emphasis>&lt;class name&gt;</emphasis> - By specifying a class
        name the boot loader will load up that class as the persistor.</para>
      </section>

      <section>
        <title>Remote connector</title>

        <literallayout>-x &lt;connector&gt;
--connector &lt;connector&gt;</literallayout>

        <para>Ignored if mode is not a client. If the type is a client then a
        connection mechanism can be specified. Connector mechanisms available
        are:-</para>

        <para><emphasis>encoding-sockets</emphasis> - Uses the encoding
        mechanism (of value types) to serialize/deserialize objects, over
        TCP/IP sockets.</para>

        <para><emphasis>encoding-http</emphasis> - Uses the encoding mechanism
        (of value types) to serialize/deserialize objects, over HTTP.</para>

        <para><emphasis>serializing-sockets</emphasis> - Uses Java
        serialization (of value types) to serialize/deserialize objects, over
        TCP/IP sockets.</para>

        <para><emphasis>xstream-sockets</emphasis> - Uses the Xstream library
        to serialize/deserialize objects to/from XML for simple stream
        communications, over TCP/IP sockets.</para>
      </section>

      <section>
        <title>User</title>

        <literallayout>-u &lt;user name&gt;
--user &lt;user name&gt;</literallayout>

        <para>Ignored if type is prototype.</para>

        <para>Uses the specified name when logging the user in. If the
        password is also specified (see above) then an attempt to log in using
        the supplied user name and password is made; authentication failure at
        this point will exit the program.</para>
      </section>

      <section>
        <title>Viewer</title>

        <literallayout>-v &lt;viewer&gt;
--viewer &lt;viewer&gt;</literallayout>

        <para>The viewer option allows you to choose the user interface that
        is used to access your [[NAME]] application. The following
        options are available with the current distribution, and if none is
        specified then the drag and drop view will be used by default.</para>

        <para><emphasis>dnd</emphasis> - Drag and Drop viewer</para>

        <para><emphasis>html</emphasis> - Web browser viewer - accessed via
        standard web browser such as FireFox, Internet Explorer or
        Opera</para>

        <para><emphasis>encoding-sockets</emphasis> - Uses the encoding
        mechanism (of value types) to serialize/deserialize objects, over
        TCP/IP sockets.</para>

        <para><emphasis>encoding-http</emphasis> - Uses the encoding mechanism
        (of value types) to serialize/deserialize objects, over HTTP.</para>

        <para><emphasis>serializing-sockets</emphasis> - Uses Java
        serialization (of value types) to serialize/deserialize objects, over
        TCP/IP sockets.</para>

        <para><emphasis>xstream-sockets</emphasis> - Uses the Xstream library
        to serialize/deserialize objects to/from XML for simple stream
        communications, over TCP/IP sockets.</para>

        <para><emphasis>&lt;class name&gt;</emphasis> - By specifying a class
        name the boot loader will load up that class as the viewer</para>
      </section>
    </section>
  </section>
</article>
