<!--
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
-->

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD Simplified DocBook XML V1.1//EN"
"http://www.oasis-open.org/docbook/xml/simple/1.1/sdocbook.dtd">
<article>
  <articleinfo>
    <title></title>

    <author>
      <firstname></firstname>

      <surname></surname>

      <affiliation>
        <orgname></orgname>
      </affiliation>
    </author>

    <pubdate></pubdate>
  </articleinfo>

  <section>
    <title>Managing security</title>

    <para>[[NAME]] supports authenticationÂ  and role-based authorization.
    Within the framework the user is represented by a
    <literal>Session</literal> object. From the session object you can get the
    name of the user and their roles.</para>

    <para>The session is used within the distribution mechanism and the
    security manager. The security manager uses the session to determine if a
    user can access or manipulate an object member. The distribution mechanism
    passes the session to the server so the server knows which user is
    accessing it.</para>

    <section>
      <title>Authentication</title>

      <para>An <literal>Authoriser</literal> processes an
      <literal>AuthorizationRequest</literal> and if granted generates a
      <literal>Session</literal> object to represent the user.</para>

      <section>
        <title>Authentication through a passwords file</title>

        <para>To explicitly use file-based authentication set the following
        property. (Note, however, that if this property is absent, the
        framework will anyway assume file-based authentication as the
        default).</para>

        <programlisting format="linespecific">isis.authentication=file</programlisting>

        <para>The location and name of the passwords file may be specified
        explicitly - if not it defaults to the <filename class="directory"
        moreinfo="none">passwords</filename> file, assumed to be in the
        <filename class="directory" moreinfo="none">config</filename>
        directory (or under WEB-INF if running as a web application).</para>

        <programlisting format="linespecific">isis.authentication.file.location= passwords  </programlisting>

        <para>The <filename class="directory"
        moreinfo="none">passwords</filename> file contains users, passwords
        and any roles, as follows.</para>

        <programlisting format="linespecific">&lt;user&gt;:&lt;password&gt;:&lt;role&gt;|&lt;role&gt;|...</programlisting>

        <para>For example, user 'sven', with password 'pass' and roles 'role1'
        and 'role2' would be</para>

        <programlisting format="linespecific">sven:pass:role1|role2 </programlisting>
      </section>

      <section>
        <title>Authentication through an LDAP server</title>

        <para>To authenticate through LDAP set</para>

        <programlisting format="linespecific">isis.authentication=ldap</programlisting>

        <para>LDAP needs a URL for the server and a 'dn' of the root of the
        users on the server. For example,</para>

        <programlisting format="linespecific">isis.authentication.ldap.dn= dc=isis, dc=org </programlisting>

        <programlisting format="linespecific">isis.authentication.ldap.server=ldap://localhost:10389</programlisting>

        <para>The logon password check will be on uid='username', &lt;dn&gt; -
        For example, attempting to logon with user 'sven' with the above
        settings will check against the server on localhost, port = 10389,
        uid=sven, dc=isis, dc=org, using the password in the standard
        <literal moreinfo="none">userpassword</literal> attribute in that
        entry. Once logged in, roles will be picked up from cn='rolename'
        where objectclass =organizationalRole in child entries of the user
        entry.</para>
      </section>

      <section>
        <title>Authentication through a database</title>

        <para>To authenticate through a database set</para>

        <programlisting format="linespecific">isis.authentication=database</programlisting>

        <para>Database authentication is dependent upon Hibernate.
        Authentication tables should exist in the database configured in the
        <filename class="directory"
        moreinfo="none">hibernate.cfg.xml</filename> settings. By default this
        will check against a set of user and role database tables described as
        follows.</para>

        <programlisting format="linespecific">CREATE TABLE user (id INTEGER  NOT NULL , username VARCHAR(255) NOT NULL,password VARCHAR(255) NOT NULL, PRIMARY KEY (id));
CREATE TABLE role (id INTEGER  NOT NULL , rolename VARCHAR(255) NOT NULL, PRIMARY KEY (id)) ;
CREATE TABLE user_role (id INTEGER  NOT NULL , user INTEGER  NOT NULL,role INTEGER  NOT NULL, PRIMARY KEY (id));</programlisting>

        <para>The password should be encrypted using the 'MD5' algorithm.
        (Example code from <ulink
        url="http://developers.sun.com/learning/javaoneonline/2007/pdf/TS-6676.pdf">sun</ulink>
        ).</para>

        <programlisting format="linespecific">private String generateHash(String key) {
   MessageDigest md = MessageDigest.getInstance("MD5");
   md.reset();
   md.update(key.getBytes());
   byte[] bytes = md.digest();
   // buffer to write the md5 hash to
   StringBuffer buff = new StringBuffer();
   for (int l=0;l&lt; bytes.length;l++) {
      String hx = Integer.toHexString(0xFF &amp; bytes[l]);
      // make sure the hex string is correct if 1 character
      if(hx.length() == 1) buff.append("0");
      buff.append(hx);
   }
return buff.toString();}</programlisting>
      </section>
    </section>

    <section>
      <title id="authorization">Authorization</title>

      <para>As with authentication, authorization may be executed via a file,
      LDAP, or database. If no authorization mechanism is specified, all
      domain calls, methods and properties will be available to all
      users.</para>

      <section>
        <title>Authorization through 'allow' and 'disallow' files</title>

        <para>To enable authorization by file including the facet and
        specifying the authorization implementation in the settings</para>

        <programlisting format="linespecific">isis.reflector.facets.include=\
    org.apache.isis.runtime.authorization.standard.AuthorizationFacetFactoryImpl
isis.authorization=file</programlisting>

        <para>With file authorization the current user's role will be
        authorised against a white and (optionally) a black list for each
        method possibly available to them. The files are identified by
        properties, e.g.</para>

        <programlisting format="linespecific">isis.authorization.file.whitelist=allow
isis.authorization.file.blacklist=disallow  </programlisting>

        <para>The white list file is mandatory, if there is no property it
        defaults to 'allow' (picked up from the config directory or from
        WEB-INF if running as a webapp). The black list file is optional. The
        presence of the property indicates it is being used. If the white list
        file default is being used then 'disallow' is suggested as a setting
        for the black list.</para>

        <para>Each file contains a signature to match against and a list of
        roles. A match in the white list file permits the method and match in
        the black list forbids it. The black list overrides the white list.
        Matching occurs at three levels class, method (or property) and
        parameters. Property matches are to the bean property name e.g.
        'phone' for getPhone and setPhone.</para>

        <para>Formatted as follows:</para>

        <para>If only class is to be matched: &lt;fully qualified class&gt;
        :role1|role2|..</para>

        <para>Class and method: &lt;fully qualified
        class&gt;#&lt;method&gt;:role1|role2|..</para>

        <para>Class and property: &lt;fully qualified
        class&gt;#&lt;property&gt;:role1|role2|..</para>

        <para>Parameters where method takes no parameters: &lt;fully qualified
        class&gt;#&lt;method&gt;():role1|role2|...</para>

        <para>Parameters where method takes one parameter: &lt;fully qualified
        class&gt;#&lt;method&gt;(fully qualified parameter
        class):role1|role2|...</para>

        <para>Parameters where method takes two or more:</para>

        <para>&lt;fully qualified class&gt;#&lt;method&gt;(fully qualified
        parameter class1, fully qualified parameter class2,
        ...):role1|role2|...</para>

        <para>Each line in the file is a separate match.</para>

        <para>So, for example, in the white list file</para>

        <programlisting format="linespecific">com.isisgroup.expenses.services.hibernate.ClaimRepositoryHibernate:role1 </programlisting>

        <para>will permit all actions/properties on <literal
        moreinfo="none">com.isisgroup.expenses.services.hibernate.ClaimRepositoryHibernate</literal>
        for role1</para>

        <programlisting format="linespecific">com.isisgroup.expenses.services.hibernate.
    ClaimantRepositoryHibernate#findClaimantByName:role1|role2</programlisting>

        <para>will permit all overloaded methods named <literal
        moreinfo="none">findClaimantByName</literal> on <literal
        moreinfo="none">com.isisgroup.expenses.services.hibernate.ClaimantRepositoryHibernate</literal>
        for role1 and role2 and</para>

        <programlisting format="linespecific">com.isisgroup.expenses.services.hibernate.ClaimantRepositoryHibernate#findClaimantByIdentifier(java.lang.String):role3</programlisting>

        <para>will permit <literal
        moreinfo="none">findClaimantByIdentifier</literal> with parameter
        <literal moreinfo="none">java.lang.String</literal> on <literal
        moreinfo="none">com.isisgroup.expenses.services.hibernate.ClaimantRepositoryHibernate</literal>
        for role3. In each case an identical entry in the black list file will
        instead make the action or property unavailable. The combination of
        white and black list allows some economy in the settings. For example,
        if all but one method of a large class is to be allowed, that could be
        configured with one entry per method in the white list file or,
        better, a single entry for the class in the white list and a single
        entry for the unavailable method in the black list.</para>
      </section>

      <section>
        <title>Authorization through LDAP server</title>

        <para>To enable authorization by LDAP server include facet for
        authorization and specifying the <literal
        moreinfo="none">ldap</literal> implementation for
        authorization.</para>

        <programlisting format="linespecific">isis.reflector.facets.include=\
    org.apache.isis.runtime.authorization.standard.AuthorizationFacetFactoryImpl
isis.authorization=ldap</programlisting>

        <para>With LDAP authorization the current user's role will be
        authorised against an entry in the LDAP server for each method
        possibly available to them. The URL of the server is obtained from the
        same property as for authentication.</para>

        <para>The authorization entries should exist under a DN configured in
        the property file. For example.</para>

        <programlisting format="linespecific">isis.authorization.ldap.application.dn= cn=expenses, dc=apps, dc=isis, dc=org </programlisting>

        <para>This will be checked anonymously.</para>

        <para>Entries to be matched against should exist under this dn.
        Expected configuration is a hierarchy of class, method and parameters.
        The cn of each entry is expected to be the fully qualified class name,
        method or parameter list ('()' for an empty parameter list). If an
        entry has a 'uniquemember' attribute equal to 'role' then that entry
        and all sub-entries are authorised.</para>

        <para>For example</para>

        <para>DN:
        cn=com.isisgroup.expenses.services.hibernate.ClaimRepositoryHibernate,
        cn=expenses, dc=apps, dc=isis, dc=org</para>

        <para>with uniquemember = role1 will authorise all members of <literal
        moreinfo="none">com.isisgroup.expenses.services.hibernate.ClaimRepositoryHibernate</literal>
        for users with role1.</para>

        <para>DN: cn=(com.isisgroup.expenses.claimant.Claimant,
        java.lang.String),</para>

        <para>cn=createNewClaim,
        cn=com.isisgroup.expenses.services.hibernate.ClaimRepositoryHibernate,
        cn=expenses, dc=apps, dc=isis, dc=org</para>

        <para>with uniquemember = role1 will authorise the <literal
        moreinfo="none">createNewClaim(com.isisgroup.expenses.claimant.Claimant,
        String)</literal> member of <literal
        moreinfo="none">com.isisgroup.expenses.services.hibernate.ClaimRepositoryHibernate</literal>
        for users with role1.</para>
      </section>

      <section>
        <title>Authorization through database</title>

        <para>To enable authorization through a database table specify:</para>

        <programlisting format="linespecific">isis.reflector.facets.include=\
    org.apache.isis.runtime.authorization.standard.AuthorizationFacetFactoryImpl
isis.authorization=database</programlisting>

        <para>In the same way as database authentication, database
        authorization is dependent upon hibernate. The authorization table
        should exist in the database configured in the hibernate.cfg.xml
        settings. By default this will check against a permissions table
        described as follows.</para>

        <programlisting format="linespecific">CREATE TABLE permissions (id INTEGER  NOT NULL, role INTEGER  NOT NULL,permission VARCHAR(255) NOT NULL, flags INTEGER, PRIMARY KEY (id));</programlisting>

        <para>The functionality is the same as for white list file matching
        described above, where the permission field in the table contains the
        signature to match.</para>
      </section>

      <section>
        <title>Separate visibility and usability authorization</title>

        <para>There is an optional capability to authorise the visibility and
        usability of fields independently. Thus a field may be visible to
        certain roles but not editable. In order to configure this against a
        authorization a flag must be added as follows.</para>

        <section>
          <title>File authorization</title>

          <para>Add a "-rw" suffix to any role in the allow or disallow files.
          "-rw" will match (and hence allow in the allow file, disallow in the
          disallow file) edit authorization requests.</para>
        </section>

        <section>
          <title>Database authorization</title>

          <para>Populate the flags column in the permissions table with the
          value 0 (for read/write) or 1 (for read only).</para>
        </section>

        <section>
          <title>Ldap authorization</title>

          <para>Add a flags attribute to the entry with the role. If it's set
          to 'rw' editing will be allowed, any other value (typically 'ro')
          will disallow editing.</para>

          <para>In each case absence of the flag will mean that visibility and
          usability and are always the same.</para>
        </section>
      </section>

      <section>
        <title>Capturing authorization requirements automatically</title>

        <para>As a tool for helping to configure the initial security settings
        there is a 'learn' property.</para>

        <programlisting format="linespecific">isis.authorization.learn=true</programlisting>

        <para>When this is present and set, all methods will be authorised for
        all roles. However as each method is accessed through the user
        interface authorization will be configured for that method and the
        current role. Configuration will be saved in either the file (saved on
        shutdown), database table or LDAP security settings depending upon the
        reflector setup.</para>

        <para>The settings can then be modified to conform to the required
        security settings.</para>
      </section>
    </section>
  </section>
</article>
