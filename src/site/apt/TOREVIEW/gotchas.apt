~~  Licensed to the Apache Software Foundation (ASF) under one
~~  or more contributor license agreements.  See the NOTICE file
~~  distributed with this work for additional information
~~  regarding copyright ownership.  The ASF licenses this file
~~  to you under the Apache License, Version 2.0 (the
~~  "License"); you may not use this file except in compliance
~~  with the License.  You may obtain a copy of the License at
~~
~~        http://www.apache.org/licenses/LICENSE-2.0
~~
~~  Unless required by applicable law or agreed to in writing,
~~  software distributed under the License is distributed on an
~~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~~  KIND, either express or implied.  See the License for the
~~  specific language governing permissions and limitations
~~  under the License.


Using switchUser in a Fixture


  Beware of when you call <<<switchUser()>>> in a <<<Fixture>>> as it 
  causes the current transaction to be ended and a new one started (for the 
  new user). If you share a reference between the two you will get an 
  exception like this.


  The fixture code shared the <<<Participant>>> object between the two transactions when coded like this:

+----------
        Account account = accounts.createAccount("ACME", "Peter Planner", "pplanner@acme.com");
        Participant peterPlanner = account.getAdmin();
        
        switchUser("pplanner@acme.com", new String[0]);

        Work work = plan1.createWork();
        BcpPlan plan = (BcpPlan) work.getTarget();
        plan.getOwner().modifyLeader(peterPlanner);
+----------

  To resolve the problem you will need to retrieve the object again so it is 
  part of the second transaction. In this example we can change to code to this:

+----------
        accounts.createAccount("ACME", "Peter Planner", "pplanner@acme.com");
        
        switchUser("pplanner@acme.com", new String[0]);

        Account account = uniqueMatch(Account.class, "0 ACME");
        Participant peterPlanner = account.getAdmin();

        Work work = plan1.createWork();
        BcpPlan plan = (BcpPlan) work.getTarget();
        plan.getOwner().modifyLeader(peterPlanner);

+----------

  An alternative is to force this separation by putting the switch call into a separate fixture, as you now have no choice but to look it up.



* Deployment limitations of using switch user

  Switch user will only work in exploration and prototype mode.  To make it 
  run on the server (ie using Tomcat) I changed the deployment type by adding 
  the following to the isis.properties file:

--------
isis.deploymentType=prototype
---------


