<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"file:./resources/docbook-xml-4.5/docbookx.dtd">
<!--
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
-->
<book>
  <bookinfo>
    <title><?eval ${docbkxGuideTitle}?></title>

    <subtitle><?eval ${docbkxGuideSubTitle}?></subtitle>

    <releaseinfo><?eval ${project.version}?></releaseinfo>

    <authorgroup>
      <author>
        <firstname>Dan</firstname>

        <surname>Haywood</surname>
      </author>

      <author>
        <firstname>Robert</firstname>

        <surname>Matthews</surname>
      </author>
    </authorgroup>

    <legalnotice>
      <para>Permission is granted to make and distribute verbatim copies of
      this manual provided that the copyright notice and this permission
      notice are preserved on all copies.</para>
    </legalnotice>
  </bookinfo>

  <!-- front matter -->

  <toc></toc>

  <preface id="preface">
    <title>Preface</title>

    <para><emphasis>Apache Isis</emphasis> is designed to allow programmers
    rapidly develop domain-driven applications following the <ulink
    url="http://en.wikipedia.org/wiki/Naked_Objects">Naked Objects</ulink>
    pattern. It is made up of a core framework plus a number of alternate
    implementations, and supports various viewers and object stores.
    <emphasis>Apache Isis</emphasis> is hosted at the <ulink
    url="http://incubator.apache.org/isis">Apache Foundation</ulink>, and is
    licensed under <ulink
    url="http://www.apache.org/licenses/LICENSE-2.0.html">Apache Software
    License v2</ulink>.</para>

    <para>This guide is written for programmers looking to use
    <emphasis>Apache Isis</emphasis> to develop domain-driven applications.
    Since Isis is also extensible, it also explains all the
    <acronym>API</acronym>s in the core framework and their default
    implementations, as well as the mechanics of deploying an Isis
    application.</para>
  </preface>

  <!-- main content -->

  <part>
    <title>Programmers Guide</title>

    <chapter id="chp.Intro">
      <title>Introduction</title>

      <abstract>
        <para>*** yada yada</para>
      </abstract>

      <sect1>
        <title>***</title>

        <para><emphasis>*** yada yada</emphasis></para>
      </sect1>
    </chapter>

    <chapter>
      <title>Writing Domain Applications</title>

      <para></para>

      <para></para>

      <note>
        <para>TODO: x-ref to the applib documentation</para>
      </note>

      <para></para>

      <para></para>

      <note>
        <para>TODO: x-ref to the headless viewer</para>
      </note>

      <para></para>

      <note>
        <para>TODO: x-ref to using Groovy or other languages</para>
      </note>

      <para></para>

      <sect1>
        <title>Lazy Loading and Dirty Tracking</title>

        <para></para>

        <para></para>

        <note>
          <para>TODO: xref <filename>core/bytecode/cglib</filename> and
          <filename>core/bytecode/javassist</filename> ...</para>

          <para></para>
        </note>

        <para>***</para>

        <para></para>
      </sect1>
    </chapter>

    <chapter>
      <title>Writing Domain Services</title>

      <para></para>

      <para></para>

      <para></para>

      <note>
        <para>TODO: discuss comments on general style; use of
        primitives;</para>

        <para></para>
      </note>

      <note>
        <para>TODO: discuss fact that different implementations may be
        required if running client/server (it may not even make sense to have
        an implementation that does anything on server, eg preview PDF
        communication in Acrobat Reader)</para>

        <para></para>
      </note>

      <para></para>

      <para></para>
    </chapter>
  </part>

  <part>
    <title>Core APIs and Implementations</title>

    <chapter>
      <title>Bootstrapping APIs</title>

      <para></para>

      <para></para>

      <note>
        <para>TODO: discuss Installer architecture; do indicate that this
        stuff is going to change with JSR-299</para>
      </note>

      <para></para>

      <para></para>
    </chapter>

    <chapter id="chp.ProgrammingModelApi">
      <title>Programming Model APIs</title>

      <para></para>

      <para>***</para>

      <para></para>

      <para></para>

      <note>
        <para>At the moment this API is rather fine-grained. We intend to
        introduce higher level abstractions to make it easier to work with. We
        may also split out member sorting into a separate abstraction.</para>
      </note>

      <para></para>

      <para></para>

      <para></para>

      <note>
        <para>TODO: tidy up the following paras, were just copied/pasted in
        from APT</para>
      </note>

      <para></para>

      <para>Although we generally recommend that you stick to the conventions
      of the programmingmodel as documented in the Application Library (in
      <filename>applib</filename>), it is in fact possible to customize or
      modify these conventions. A typical case might be to make Isis support
      some of your own annotations. You'll find that some of the viewers and
      object stores also define their own extensions to the standard
      programming model.</para>

      <para></para>

      <para></para>

      <para>The metamodel is built up using a collection of
      &lt;&lt;&lt;FacetFactory&gt;&gt;&gt;s. These are used to identify the
      classes and class members, and to decorate these class members with
      semantics. It is easy to write new &lt;&lt;&lt;FacetFactory&gt;&gt;&gt;s
      to support new programming conventions or, indeed, new languages. The
      &lt;&lt;&lt;FacetFactory&gt;&gt;&gt; API is defined in
      {{{../core/metamodel/index.html}metamodel}} module, along with
      implementations to support the Java language. The
      {{{http://groovyobjects.sourceforge.net}Groovy Objects}} sister project
      provides implementations to allow [[NAME]] to support domain objects
      written in {{{http://groovy.codehaus.org}Groovy}}.</para>

      <para></para>

      <sect1>
        <title>FacetFactory</title>

        <para></para>

        <para></para>

        <para></para>
      </sect1>

      <sect1>
        <title>Facets</title>

        <para></para>

        <sect2>
          <title>PropertiesAndCollectionsIdentifyingFacet</title>

          <para></para>
        </sect2>

        <sect2>
          <title>InteractionAdvisors</title>

          <para></para>

          <sect3>
            <title>HidingInteractionAdvisor</title>

            <para></para>
          </sect3>

          <sect3>
            <title>DisablingInteractionAdvisor</title>

            <para></para>
          </sect3>

          <sect3>
            <title>ValidatingInteractionAdvisor</title>

            <para></para>

            <para></para>
          </sect3>
        </sect2>
      </sect1>

      <sect1>
        <title>MetaModel Validator</title>

        <para></para>

        <para></para>
      </sect1>

      <sect1>
        <title>Other Languages</title>

        <para></para>

        <sect2>
          <title>Groovy Language Support</title>

          <para></para>

          <para></para>

          <para></para>

          <note>
            <para>TODO: tidy up the following paras, were just copied/pasted
            in from APT</para>
          </note>

          <para></para>

          <para>[[NAME]] also allows you to develop your domain application in
          Groovy. This support should be considered experimental for the
          moment; although the viewers and fixtures/in-memory object store
          work fine, it has not been fully tested out with other object
          stores. Further details are available in the
          {{{./support/languages/groovy/index.html}groovy}} module.</para>

          <para></para>

          <para></para>
        </sect2>
      </sect1>
    </chapter>

    <chapter id="chp.ObjectStoreApi">
      <title>Object Store API and Default Implementation</title>

      <abstract>
        <para>***</para>
      </abstract>

      <section>
        <title></title>

        <para></para>

        <para></para>

        <note>
          <para>TODO: tidy up the following paras, were just copied/pasted in
          from APT</para>
        </note>

        <para></para>

        <para>The API is defined in {{{../core/runtime/index.html}runtime}}
        module, with just an in-memory object store provided for prototyping
        and testing only. The plugins provide a number of other
        implementations: a simple {{{./xml-persistor/index.html}XML}}
        persistor (for single user apps), a
        {{{./sql-persistor/index.html}SQL}} persistor to persist directly to
        RDBMS (using JDBC), and a
        {{{./berkeley-persistor/index.html}BerkeleyDB}} persistor. In
        addition, the {{{http://jpaobjects.sourceforge.net}JPA Objects}}
        sister projects uses JPA to persist to an RDBMS.</para>

        <para></para>
      </section>
    </chapter>

    <chapter id="chp.SecurityApi">
      <title>Security APIs and Default Implementation</title>

      <abstract>
        <para>This chapter covers the authentication and authorization
        APIs</para>
      </abstract>

      <para></para>

      <para></para>

      <note>
        <para>TODO: tidy up the following paras, were just copied/pasted in
        from APT</para>
      </note>

      <para><emphasis></emphasis></para>

      <para><emphasis>Apache Isis</emphasis> applications support
      authentication ("who are you"?) and authorization ("what can you do?").
      This allows the set of functionality to be restricted based upon the
      user's role, with no security knowledge needing to be embedded within
      the domain objects. The API is defined in
      {{{../core/runtime/index.html}runtime}}, along with two implementations,
      one file-based and one using LDAP.</para>

      <para></para>

      <para></para>

      <para></para>
    </chapter>

    <chapter id="chp.RemotingApi">
      <title>Remoting APIs and Default Implementation</title>

      <para></para>

      <para></para>

      <note>
        <para>TODO: tidy up the following paras, were just copied/pasted in
        from APT</para>
      </note>

      <para></para>

      <para>Client/server deployments require a transport protocol for network
      interactions. The core API and a basic
      <classname>java.net.Socket</classname> based implementation is defined
      in {{{../core/runtime/index.html}runtime}}. An alternative HTTP-based
      implementation is available in
      {{{./http-remoting/index.html}http-remoting}}.</para>

      <para></para>

      <para>In addition to a transport, client/server remoting also requires a
      marshalling mechanism. This is used to "take apart" the domain objects
      and then reassemble them. The core API and standard implementation for
      marshalling is defined in {{{../core/runtime/index.html}runtime}}; an
      alternative Xstream-based implementation is available in
      {{{./xstream-marshalling/index.html}xstream-marshalling}}.</para>

      <para></para>

      <sect1>
        <title>Transport</title>

        <para></para>
      </sect1>

      <sect1>
        <title>Marshalling</title>

        <para></para>

        <para></para>

        <para></para>
      </sect1>
    </chapter>

    <chapter>
      <title>Bytecode Provider APIs</title>

      <para></para>

      <para></para>

      <para></para>

      <note>
        <para>TODO: tidy up the following paras, were just copied/pasted in
        from APT</para>
      </note>

      <para></para>

      <para>[[NAME]] normally performs lazy loading of references and dirty
      tracking by proxying all domain objects. Two implementations are
      provided, using either cglib or javassist. The application archetype
      automatically configures the use of these proxies. However, some object
      stores (notably, the {{{./plugins/jpa-persistor/index.html}JPA object
      store}}) do not require these proxies (because they add their own
      proxies instead); in which case these can be disabled. Alternatively,
      you may not want to use the bytecode support, in which case you can add
      the appropriate calls for lazy loading and dirty tracking. This area is
      covered in the {{{./applib/index.html}applib}}, but there is also
      module-specific documentation in the
      {{{./core/bytecode-cglib/index.html}bytecode-cglib}} and
      {{{./core/bytecode-javassist/index.html}bytecode-javassist}}
      modules.</para>

      <para></para>

      <para></para>

      <para></para>
    </chapter>
  </part>

  <part>
    <title>Deployment Guide</title>

    <chapter id="chp.DeployingIsisApplications">
      <title>Overview</title>

      <para></para>

      <para></para>

      <para></para>

      <note>
        <para>TODO: tidy up the following paras, were just copied/pasted in
        from APT</para>
      </note>

      <para></para>

      <para>All the following describe setting up the default security
      implementations. *** Mention that there are other implementations</para>

      <para></para>

      <para></para>

      <para>For desktop-based viewers the framework provides a
      <classname>ViewerInstaller</classname> <acronym>API</acronym>, defined
      in the <filename>core/runtime</filename> module. This approach is used
      by the <acronym>DnD</acronym> viewer and the <acronym>HTML</acronym>
      viewer, for example.</para>

      <para>Alternatively the viewer can use its own mechanism to get started
      (eg as a webapp) and then simply bootstrap the Isis runtime with a
      couple of lines of code. This is the technique used by the Scimpi webapp
      viewer, by the Wicket viewer and by the Restful viewer.</para>

      <para></para>

      <para></para>
    </chapter>

    <chapter>
      <title>Web App Deployment</title>

      <para></para>

      <para></para>

      <para></para>

      <sect1>
        <title>Setting up Security</title>

        <para></para>

        <para></para>

        <para>x-ref <xref linkend="chp.SecurityApi" />.</para>

        <para></para>
      </sect1>
    </chapter>

    <chapter>
      <title>Client/Server Deployment</title>

      <para></para>

      <para></para>

      <para></para>

      <para></para>

      <sect1>
        <title>Configuring the Server</title>

        <para></para>

        <para></para>

        <sect2>
          <title>Setting up Security</title>

          <para></para>

          <para></para>

          <para>x-ref <xref linkend="chp.SecurityApi" />.</para>

          <para></para>
        </sect2>
      </sect1>

      <sect1>
        <title>Configuring the Client</title>

        <para></para>

        <sect2>
          <title>Setting up Security</title>

          <para></para>

          <para></para>

          <para>x-ref <xref linkend="chp.SecurityApi" />.</para>

          <para></para>
        </sect2>
      </sect1>
    </chapter>

    <chapter>
      <title>Standalone Deployment</title>

      <para></para>

      <para></para>

      <note>
        <para>TODO: discuss sealed/signed JARs to prevent tampering?</para>
      </note>

      <para></para>

      <sect1>
        <title>Setting up Security</title>

        <para></para>

        <para></para>

        <para>x-ref <xref linkend="chp.SecurityApi" />.</para>

        <para></para>
      </sect1>
    </chapter>
  </part>
</book>
