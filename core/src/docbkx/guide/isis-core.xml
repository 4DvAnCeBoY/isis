<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"file:./src/docbkx/dtd-4.5/docbookx.dtd">
<!--
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
-->
<book>
  <bookinfo>
    <title><?eval ${docbkxGuideTitle}?></title>

    <subtitle><?eval ${docbkxGuideSubTitle}?></subtitle>

    <releaseinfo><?eval ${project.version}?></releaseinfo>

    <authorgroup>
      <author>
        <firstname>Dan</firstname>

        <surname>Haywood</surname>
      </author>

      <author>
        <firstname>Robert</firstname>

        <surname>Matthews</surname>
      </author>
    </authorgroup>

    <legalnotice>
      <para>Permission is granted to make and distribute verbatim copies of
      this manual provided that the copyright notice and this permission
      notice are preserved on all copies.</para>
    </legalnotice>
  </bookinfo>

  <!-- front matter -->

  <toc></toc>

  <preface id="preface">
    <title>Preface</title>

    <para><emphasis>Apache Isis</emphasis> is designed to allow programmers
    rapidly develop domain-driven applications following the <ulink
    url="http://en.wikipedia.org/wiki/Naked_Objects">Naked Objects</ulink>
    pattern. It is made up of a core framework plus a number of alternate
    implementations, and supports various viewers and object stores.
    <emphasis>Apache Isis</emphasis> is hosted at the <ulink
    url="http://incubator.apache.org/isis">Apache Foundation</ulink>, and is
    licensed under <ulink
    url="http://www.apache.org/licenses/LICENSE-2.0.html">Apache Software
    License v2</ulink>.</para>

    <para>This guide is written for programmers looking to understand how
    <emphasis>Apache Isis</emphasis> fits together, what
    <acronym>API</acronym>s it defines, what the default implementations are.
    It also explains the principles of deploying an Isis application and
    describes how to do so as a standalone application or as a webapp.</para>

    <para>It is divided into four parts:<itemizedlist>
        <listitem>
          <para>Introduction</para>

          <para>The principles and patterns of the framework, understanding
          how an Isis application works, getting started with the quickapp
          archetype, the process of developing Isis applications, and tips for
          developing with an <acronym>IDE</acronym></para>
        </listitem>

        <listitem>
          <para>Architecture</para>

          <para>The core framework, the default implementation of APIs, and
          alternative implementations. </para>
        </listitem>
      </itemizedlist></para>

    <para></para>
  </preface>

  <!-- main content -->

  <part id="prt.Introduction">
    <title>Introduction</title>

    <partintro>
      <para>*** part intro.</para>

      <para></para>

      <para></para>
    </partintro>

    <chapter id="chp.Intro">
      <title>Overview</title>

      <abstract>
        <para>***</para>
      </abstract>

      <para><emphasis>Apache Isis</emphasis> is a full-stack open source
      application development framework, designed to let you rapidly develop
      enterprise business applications following a domain-driven philosophy.
      Developing an application in Isis is - at least initially - about
      focusing on the bit that matters to the business, the core domain
      logic.</para>

      <sect1>
        <title>What's in this Guide</title>

        <para></para>

        <para></para>
      </sect1>

      <sect1>
        <title>This Guide vs the Core Documentation</title>

        <para>This guide assumes that you have at least the outline of a
        running <emphasis>Apache Isis</emphasis> application, for example
        having run the quickstart archetype. If you haven't done this, then
        please consult the core documentation to learn how.</para>

        <para>You should also note that the core documentation also explains
        the wider landscape of what makes up an <emphasis>Isis</emphasis>
        application, dealing with such matters as running the app with
        different components, eg viewers or object stores.</para>

        <para>Indeed, it is also possible for developers to build their own
        programming model, either as a subset of the default programming model
        described here, and possibly with additional custom elements. See the
        core documentation for details on how to write your own programming
        model.</para>

        <para>However, everything related to the specifics of writing a domain
        object with the <emphasis>default</emphasis> programming model is
        here.</para>
      </sect1>

      <sect1>
        <title>Where Next?</title>

        <para></para>
      </sect1>
    </chapter>

    <chapter>
      <title>Principles &amp; Patterns</title>

      <abstract>
        <para>An overview of the main principles and patterns that underly the
        <emphasis>Apache Isis</emphasis> approach.</para>
      </abstract>

      <para></para>

      <sect1>
        <title>Principles</title>

        <para><emphasis></emphasis></para>

        <para><emphasis></emphasis><note>
            <para>TODO: distill some of the material on the trunk site.</para>

            <para></para>
          </note></para>

        <sect2>
          <title>Ubiquitous Language</title>

          <para></para>

          <para></para>

          <para></para>

          <para></para>
        </sect2>

        <sect2>
          <title>Rapid Application Development</title>

          <para></para>

          <para></para>

          <note>
            <para>TODO: discuss</para>
          </note>

          <para>feedback loop</para>

          <para>requirements traceability</para>

          <para></para>
        </sect2>

        <sect2>
          <title>Problem Solver, not Process Follower</title>

          <para></para>

          <para></para>

          <note>
            <para>TODO: discuss</para>
          </note>

          <para>Sovereign Applications vs Transient Applications</para>

          <para></para>

          <para>for sovereign applications</para>

          <para></para>

          <para>incredible machine</para>

          <para></para>

          <para></para>
        </sect2>

        <sect2>
          <title>Commonly Trodden Paths</title>

          <para></para>

          <para></para>

          <note>
            <para>TODO: discuss</para>
          </note>

          <para>for transient apps</para>

          <para></para>

          <para>Civil engineering analogy.... put in the paths
          afterwards</para>

          <para></para>

          <para>Christopher Alexander - cardboard cutouts of where the windows
          go</para>

          <para></para>

          <para>Database denormalization</para>

          <para></para>

          <para>MVVM</para>

          <para></para>

          <para>Process Object</para>

          <para></para>
        </sect2>

        <sect2>
          <title>Opinionated</title>

          <para></para>

          <para></para>

          <note>
            <para>TODO: discuss</para>
          </note>

          <para></para>

          <para>convention over configuration</para>

          <para></para>

          <para>framework, domain services, dependency injection</para>

          <para></para>

          <para>JSR-299</para>

          <para>don't want too many degrees of freedom. Work out of the box,
          specify alternates later as needed</para>

          <para></para>
        </sect2>
      </sect1>

      <sect1>
        <title>Patterns</title>

        <para>The framework is designed around two patterns:</para>

        <para></para>

        <sect2>
          <title>Naked Objects Pattern</title>

          <para>The first architectural pattern is the naked objects pattern,
          whereby the framework automatically generates an object-oriented
          user interface (OOUI) for your domain objects. If required, this
          OOUI can then be customized.</para>

          <para></para>
        </sect2>

        <sect2>
          <title>Hexagonal Architecture</title>

          <para>The second core pattern implemented by <emphasis>Apache
          Isis</emphasis> is the hexagonal architecture. This means it allows
          the same domain model to be run with different viewers, either as a
          desktop app or as a webapp. Equally, you can choose which object
          store to use in order to persist your domain objects. The diagram
          below shows the hexagonal architecture as it is implemented by
          Apache Isis.</para>

          <para></para>

          <para></para>

          <note>
            <para>TODO: discuss</para>
          </note>

          <para>*** picture of the hexagonal architecture here.</para>

          <para></para>

          <para></para>
        </sect2>

        <sect2>
          <title>Dependency Injection</title>

          <para></para>

          <para></para>

          <para></para>
        </sect2>
      </sect1>

      <sect1>
        <title>Benefits and Consequences</title>

        <para></para>

        <para><note>
            <para>TODO: review stuff below, copied-n-pasted from site
            docs.</para>
          </note></para>

        <para>As you might imagine, not needing to write any GUI code
        substantially speeds up development, and shortens the feedback loop to
        allow you to improve your core domain model without lots of GUI code
        slowing you down.</para>

        <para>The OOUIs generated by Apache Isis are especially suitable to
        "expert" users, typically those internal to your organization who have
        a good understanding of the domain and just want to get their job
        done. But for less expert users (or for a webapp deployed on the
        internet), a more scripted UI may be called for. Isis therefore lets
        you customize the user interface according to your users'
        needs.</para>

        <para>Alternatively, you might want to just use Isis as a design tool.
        The framework goes to a lot of trouble to ensure that the domain
        objects you build have no dependencies on the framework: they are
        basically annotated pojos that follow a number of straightforward
        programming conventions. So, you can use Isis to rapidly evolve your
        domain objects, and then deploy them within some other runtime
        framework if you wish.</para>

        <para></para>

        <para></para>

        <note>
          <para>TODO: include some of the benefits cited for NO pattern, from
          website: faster development cycle, greater agility, empowering style
          of UI, requirements analysis/traceability; play to developer
          strengths</para>
        </note>

        <para></para>

        <sect2>
          <title>Playing to Developer Strengths</title>

          <para></para>

          <para></para>

          <note>
            <para>TODO: discuss</para>
          </note>

          <para>domain programmer/business analyst</para>

          <para></para>

          <para>application integration expert (domain services)</para>

          <para></para>

          <para>customizer (UI expert)</para>

          <para></para>

          <para>architectural integration</para>

          <para></para>
        </sect2>
      </sect1>
    </chapter>

    <chapter>
      <title>Understanding how an Isis application works</title>

      <abstract>
        <para>***</para>
      </abstract>

      <para></para>

      <para>*** using the default programming model conventions.</para>

      <para></para>

      <para>[[NAME]] creates the user interface for an application directly
      from the definitions of the domain model. In this section we will look
      at that relationship in more detail, with reference to the Expenses
      Processing example application supplied as part of the download. As we
      showed in the previous section, any domain model written for [[NAME]]
      may be run with any of the viewers - there is no specific coding
      required, and the domain model has no knowledge of which viewer is being
      used. However, each viewer will have different gestures or mechanisms
      for providing the same functionality. To illustrate this, we will show
      the same objects being accessed through both the DND and the HTML
      viewers, side by side.</para>

      <para>The application code for the Expenses Processing example, like any
      [[NAME]] application, consists of two things: domain objects and
      services. The domain objects form the lion's share of that code, so
      we'll look at how those work first.</para>

      <para>The code for examples we will be looking at can be found in the
      directory <filename>examples/expenses/expenses-dom/src</filename> in the
      downloaded files.</para>

      <sect1>
        <title>Domain objects</title>

        <para>The domain objects are the entities - the nouns - that represent
        the application domain: employee, claim, expense item, project code,
        currency, and so forth. In the course of using the application, a user
        will view and manipulate many instances of these domain objects. To
        understand how [[NAME]] handles domain objects, we'll start by looking
        at an Employee object:</para>

        <screenshot>
          <mediaobject>
            <imageobject>
              <imagedata contentwidth="40%"
                         fileref="images/employee-views.png" format="PNG" />
            </imageobject>
          </mediaobject>
        </screenshot>

        <para>Every object presented in the user interface will have a
        corresponding Java class in the domain model - in this case it is
        <classname>org.apache.isis.example.expenses.employee.Employee</classname>.
        Below we can see the code for the <classname>Employee</classname>
        object, as presented in Eclipse, with the object's list of methods
        presented on the left hand side.</para>

        <screenshot>
          <mediaobject>
            <imageobject>
              <imagedata contentwidth="40%" fileref="images/employee-code.png"
                         format="PNG" />
            </imageobject>
          </mediaobject>
        </screenshot>

        <para>The first thing to note is that the type of the object as shown
        in the user views is derived directly from the class name in Java. The
        framework inserts spaces before capital letters, so that the class
        <classname>TemporaryEmployee</classname> would be presented to the
        user as 'Temporary Employee'. However we will see later that the name
        may be over-ridden where necessary, for example if we want the name to
        include punctuation or other characters not allowed in Java class
        names. (Note that there is a separate mechanism for dealing with
        internationalisation).</para>

        <para>Secondly, we can see that <classname>Employee</classname>
        extends <classname>AbstractDomainObject</classname> - a class provided
        within the [[NAME]] application library. This is not a requirement:
        your domain objects may be Plain Old Java Objects (POJOs) - they do
        not need to extend any class in the framework. However, extending from
        <literal moreinfo="none">AbstractDomainObject</literal> will save us
        having to write a few lines of code in each case, as we'll see
        later.</para>

        <para>Note also that in the body of the object we use 'code folding'
        (the plug-in used here is <ulink
        url="http://www.realjenius.com/platform_support">Coffee Bytes</ulink>)
        to break the object's code into regions, each typically containing one
        or more related methods that together fulfill a high-level
        responsibility of the object. This is just a coding convention, not a
        requirement.</para>
      </sect1>

      <sect1>
        <title>Properties</title>

        <para>In both of the user views of an Employee we can see a field
        called 'Name'. Within the <classname>Employee</classname> class there
        is a <literal moreinfo="none">Name</literal> region of code, expanded
        here:</para>

        <programlisting condition="" format="linespecific">// {{ Name
    private String name;

    @MemberOrder(sequence="1")
    @Disabled
    public String getName() {
        return this.name;
    }
    public void setName(String name) {
        this.name = name;
    }
// }}</programlisting>

        <para>The <literal moreinfo="none">Name</literal> region contains a
        simple property, of type <literal moreinfo="none">String</literal>,
        defined by a <literal moreinfo="none">getName</literal> and a <literal
        moreinfo="none">setName</literal> method. This is sufficient
        information to allow the viewers to display a field containing a
        textual value. Note that if the property is to be persisted, then it
        will need both a <literal moreinfo="none">get</literal> and a <literal
        moreinfo="none">set</literal> method - per the standard JavaBeans
        convention. If you wish to display a field that is derived
        automatically from other information in the object, and do not require
        this to be persisted, then a <literal moreinfo="none">get</literal>
        alone will suffice.</para>

        <para>As with the name of the object, the field name is derived
        automatically from the name of the property - though we'll see later
        that this may be over-ridden if needed.</para>

        <para>The <literal moreinfo="none">getName</literal> has been marked
        up with two Java annotations, both defined in the [[NAME]] application
        library. Annotations allow the programmer to enrich the information
        available to the framework. On properties, any [[NAME]] Objects
        annotations are always associated with the <literal
        moreinfo="none">get</literal> method. However, annotations are not
        mandatory - you can write a simple [[NAME]] application without using
        any annotations at all.</para>

        <para>By default, any property with both a <literal
        moreinfo="none">get</literal> and <literal
        moreinfo="none">set</literal> method will be editable by the user.
        <literal moreinfo="none">@Disabled</literal> tells the framework that
        this particular property may never be altered by the user (though it
        may be altered programmatically). Later we'll see how to make a
        property modifiable on certain conditions.</para>

        <para><literal moreinfo="none">@MemberOrder(sequence="1")
        </literal>tells the framework that this property should be the first
        field displayed in any view of the Employee - irrespective of where it
        is defined within the code. This ordering information has been
        observed by both the viewers.</para>

        <para>The next region of the code contains another <literal
        moreinfo="none">String</literal> property, called <literal
        moreinfo="none">UserName</literal>:</para>

        <programlisting format="linespecific">// {{ UserName field
    private String userName;

    @Hidden
    public String getUserName() {
        return userName;
    }
    public void setUserName(final String variable) {
        this.userName = variable;
    }
// }}</programlisting>

        <para>Note that <literal moreinfo="none">getUserName</literal> has
        been marked up with <literal moreinfo="none">@Hidden</literal>. This
        tells the framework that this property should never be shown in user
        views of the object (check this against the two user views above).
        Later on we'll see how it is possible to hide a property in certain
        circumstances.</para>

        <para>Next we'll look at the <literal
        moreinfo="none">EmailAddress</literal> region:</para>

        <programlisting format="linespecific">// {{ EmailAddress
    private String emailAddress;
    
    @MemberOrder(sequence = "2")
    @Optional
    @RegEx(validation = "(\\w+\\.)*\\w+@(\\w+\\.)+[A-Za-z]+")
    public String getEmailAddress() {
        return this.emailAddress;
    }
    public void setEmailAddress(final String emailAddress) {
        this.emailAddress = emailAddress;
    }
    public void modifyEmailAddress(final String emailAddress) {
        getRecordActionService().recordFieldChange(this, "Email Address", getEmailAddress(), emailAddress);
        setEmailAddress(emailAddress);
    }
    public void clearEmailAddress() {
        getRecordActionService().recordFieldChange(this, "Email Address", getEmailAddress(), "EMPTY");
        setEmailAddress(null);
    }
    public boolean hideEmailAddress() {
        return !employeeIsCurrentUser();
    }
    private boolean employeeIsCurrentUser() {
        return getUserFinder().currentUserAsObject() == this;
    }
// }}</programlisting>

        <para>As well as <literal moreinfo="none">@MemberOrder</literal>, this
        property is marked up with <literal
        moreinfo="none">@Optional</literal> and <literal
        moreinfo="none">@RegEx</literal> annotations. By default, all
        properties are taken to be mandatory - if the user creates or edits an
        object then they will be required to specify the contents of each
        field. <literal moreinfo="none">@Optional</literal> overrides this
        default behaviour - indicating here that the object may be saved
        without an email address.</para>

        <para><literal moreinfo="none">@RegEx</literal> is applicable only to
        <literal moreinfo="none">String</literal> properties. In this case the
        annotation specifies a Regular Expression that will be used to
        validate any value that the user types into the field. In a
        conventional architecture, this functionality would typically be found
        in the user interface code. The [[NAME]] argument is that this
        functionality should apply to any user interface that might want to
        change the property, so its proper place is in the object. <literal
        moreinfo="none">@RegEx</literal> may also be used to reformat a String
        that has been entered by the user.</para>

        <para>The two screens below show how two different viewers make use of
        the functionality in different ways. In both cases the user has typed
        in a value that does not match the RegEx specification (they have
        typed in an email address that contains a space), so the new value has
        not been accepted or saved.</para>

        <screenshot>
          <mediaobject>
            <imageobject>
              <imagedata contentwidth="40%"
                         fileref="images/employee-email-invalid.png"
                         format="PNG" />
            </imageobject>
          </mediaobject>
        </screenshot>

        <para>In addition to <literal
        moreinfo="none">getEmailAddress</literal> and <literal
        moreinfo="none">setEmailAddress</literal>, there are <literal
        moreinfo="none">modifyEmailAddress</literal>, <literal
        moreinfo="none">clearEmailAddress</literal> and <literal
        moreinfo="none">hideEmailAddress</literal> methods. [[NAME]]
        recognises the <literal moreinfo="none">modify</literal>, <literal
        moreinfo="none">clear</literal> and <literal
        moreinfo="none">hide</literal> prefixes (and a few others that we
        shall see later) as specifying additional functionality relating to
        the <literal moreinfo="none">EmailAddress</literal> property.</para>

        <para>If a property has a corresponding <literal
        moreinfo="none">modify&lt;propertyName&gt;</literal> method, then
        whenever the user modifies the field, this will be called rather than
        the <literal moreinfo="none">set</literal>. In this case the <literal
        moreinfo="none">modify</literal> method uses the <literal
        moreinfo="none">RecordActionService</literal> to record the details of
        the change, and then calls <literal
        moreinfo="none">setEmailAddress</literal> to change the value. The
        reason for adopting this pattern, rather than including the
        functionality in the <literal moreinfo="none">set</literal> itself, is
        that the <literal moreinfo="none">set</literal> will be called by the
        object store each time the object is retrieved. So we use a <literal
        moreinfo="none">modify</literal> method where we want to do something
        (such as add to a total) only when the user changes a field.</para>

        <para><literal moreinfo="none">clearEmailAddress</literal> is called,
        in a similar manner, if the user clears the contents of the field.
        Again, it is optional - added where we want to perform some logic only
        when the user clears the property. On the <literal
        moreinfo="none">UserName</literal> field we saw that <literal
        moreinfo="none">@Hidden</literal> hides a property from the user
        permanently. We may, however, want to hide fields under certain
        circumstances. The visibility of all classes, properties and methods
        may be controlled via conventional authorization techniques, based on
        the user's role(s). In rarer cases, we want to control visibility at
        an instance level. In this case, for privacy reasons we do not want
        the email address to be visible, except to that person. This is what
        the <literal moreinfo="none">hideEmailAddress()</literal>method is
        doing. If the method returns true, the field will be hidden from the
        user.</para>

        <para>Next we will look at the <literal
        moreinfo="none">NormalApprover</literal> region:</para>

        <programlisting format="linespecific">// {{ NormalApprover
    private Employee normalApprover;
    
    @MemberOrder(sequence="4")
    public Employee getNormalApprover() {
        return this.normalApprover;
    }
    public void setNormalApprover(final Employee normalAuthoriser) {
        this.normalApprover = normalAuthoriser;
    }
    public void modifyNormalApprover(final Employee normalAuthoriser) {
        getRecordActionService().recordFieldChange(this, "Normal Approver", getNormalApprover(), normalApprover);
        setNormalApprover(normalAuthoriser);
    }
    public void clearNormalApprover() {
        getRecordActionService().recordFieldChange(this, "Normal Approver", getNormalApprover(), "EMPTY");
        setNormalApprover(null);
    }
    public String validateNormalApprover(Employee newApprover) {
        return newApprover == this ? CANT_BE_APPROVER_FOR_OWN_CLAIMS: null;
    }
    public String disableNormalApprover() {
        return employeeIsCurrentUser() ? null: NOT_MODIFIABLE;
    }
    
    public static final String NOT_MODIFIABLE = "Not modifiable by current user";
    public static final String CANT_BE_APPROVER_FOR_OWN_CLAIMS = "Can't be the approver for your own claims";
// }}</programlisting>

        <para>The <literal moreinfo="none">NormalApprover</literal> property
        takes an object of type <literal moreinfo="none">Employee</literal>.
        Assuming that this field is not disabled, the user may specify an
        Employee object for this field. [[NAME]] will prevent the user from
        trying to associate the wrong type of object with this field. This is
        illustrated in the two screens below:</para>

        <screenshot>
          <mediaobject>
            <imageobject>
              <imagedata contentwidth="40%"
                         fileref="images/employee-approver-views.png"
                         format="PNG" />
            </imageobject>
          </mediaobject>
        </screenshot>

        <para>In the left-hand screen (DND) we can see the user dropping an
        Employee object into the empty field, and the field is flashing green
        to indicate that this will succeed. If the user attempted to drop
        another type of object into the empty field, then the field would
        flash red, and the drop would not update the field. A successful drop
        will call the <literal moreinfo="none">set</literal> method, or, if a
        <literal moreinfo="none">modify&lt;propertyName&gt;</literal> method
        is provided (as it is here), it will call that instead. Note that on
        the DND viewer, if a field already contains an object, then this may
        be cleared by right-clicking on that object and selecting 'Clear
        Association'. This will set the property to <literal
        moreinfo="none">null</literal>. If there is a <literal
        moreinfo="none">clear&lt;propertyName&gt;</literal> field (as there is
        in this example) then that will be called rather than the <literal
        moreinfo="none">set</literal> method. Alternatively a new reference
        can be dropped on to the field's label, which combines both the
        clearing and the subsequent setting of the field.</para>

        <para>In the HTML viewer (right-hand screen) drag and drop is not
        possible. In a reference field such as this one, the user will be
        given a drop-down list of objects of the appropriate type (i.e.
        Employees here) that the user has recently viewed. If the required
        Employee object is not in that list then the user may go and find that
        object (e.g. from the Employees tab) and then return to the context -
        this time the newly viewed Employee will have been added to the list
        automatically. (Note: This is a generic capability provided by the
        HTML viewer. In other contexts, the programmer may want to specify an
        explicit list of objects to appear in a drop-down list. This would be
        achieved by means of a <literal
        moreinfo="none">choices&lt;propertyName&gt;</literal> method).</para>

        <para>The <literal moreinfo="none">validateNormalApprover</literal>
        method enforces any rules concerning the specific instances of
        <literal moreinfo="none">Employee</literal> that may be associated
        with this field. In this particular example, it prevents the user from
        specifying an Employee as their own approver. Note that this method
        returns a <literal moreinfo="none">String</literal>. If the specific
        Employee instance being passed into the method is acceptable, the
        method should return <literal moreinfo="none">null</literal>; if
        unacceptable then the method should return a <literal
        moreinfo="none">String</literal> message that will be made available
        to the user to advise them why the action will not succeed. (On the
        DND this appears at the bottom of the screen.)</para>

        <para>The <literal moreinfo="none">disableNormalApprover</literal>
        method prevents the user from modifying the field in certain
        circumstances. In this example the method enforces the rule that only
        the Employee themselves may change this field. Like the <literal
        moreinfo="none">validate</literal> method, it returns a <literal
        moreinfo="none">null</literal> if the user may modify the field
        (subject to the validate rules), or returns a <literal
        moreinfo="none">String</literal> message if they may not. (Note that
        this method, along with hide (seen earlier) allow for 'instance-based
        authorization'. Most applications can manage with 'class-based
        authorization' - in which the classes, properties and actions made
        available to a user are based on their roles. Class-based
        authorization in [[NAME]] is administered externally to the
        application and does not require any coding within the domain
        objects.)</para>
      </sect1>

      <sect1>
        <title>Title</title>

        <para>In the next screen we will look at the <literal
        moreinfo="none">title</literal> region of the Employee object.</para>

        <programlisting format="linespecific">// {{ Title
    public String title() {
        return getName();
    }
// }}</programlisting>

        <para>The <literal moreinfo="none">title</literal> method specifies
        the title for the object - which, on both the DND and HTML viewers
        appears next to the icon. The title is there to help the user identify
        objects. [[NAME]] also provides an easy mechanism to retrieve objects
        from the object store by their title. Other methods of
        finding/searching may require repository methods to be written. If no
        <literal moreinfo="none">title</literal> method is specified, [[NAME]]
        Objects will use the object's <literal
        moreinfo="none">toString</literal> method as a title. Titles are
        usually based on one or more of the persisted properties - in this
        case on the Name. When constructing a title from multiple elements,
        the [[NAME]] application library provides a helper object:
        <classname>TitleBuffer</classname>.</para>
      </sect1>

      <sect1>
        <title>Actions</title>

        <para>The screen below shows the action menu for the Taxi object, as
        rendered by the two different user interfaces:</para>

        <screenshot>
          <mediaobject>
            <imageobject>
              <imagedata contentwidth="40%" fileref="images/taxi-menu.png"
                         format="PNG" />
            </imageobject>
          </mediaobject>
        </screenshot>

        <para>By default, any <literal moreinfo="none">public</literal>
        instance methods on an object, included inherited public methods, will
        be rendered as a user-action. The exceptions to this rule are:</para>

        <itemizedlist>
          <listitem>
            <para>Any methods that are recognised by [[NAME]] as having a
            specific intent. We've seen a number of these already, including
            <literal moreinfo="none">get</literal> and <literal
            moreinfo="none">set</literal> methods, <literal
            moreinfo="none">title</literal>, and the methods prefixed by
            <literal moreinfo="none">modify</literal>, <literal
            moreinfo="none">clear</literal>, <literal
            moreinfo="none">validate</literal>, <literal
            moreinfo="none">disable</literal> and so on. There is a full list
            of recognised methods included in the applib documentation.</para>
          </listitem>

          <listitem>
            <para>Any methods that the programmer has specified should be
            hidden from the user, either statically with <literal
            moreinfo="none">@Hidden</literal>, or dynamically with a <literal
            moreinfo="none">hide&lt;methodName&gt;</literal> method.</para>
          </listitem>
        </itemizedlist>

        <para><literal moreinfo="none">private</literal>, <literal
        moreinfo="none">protected</literal>, and <literal
        moreinfo="none">static</literal> methods are ignored by [[NAME]]
        Objects.</para>

        <para>For example, the action 'Copy From' on the Taxi object, is
        derived from this method on the
        <classname>AbstractExpenseItem</classname> class (from which
        <classname>Taxi</classname> inherits):</para>

        <programlisting format="linespecific">    @MemberOrder(sequence="5")
    public void copyFrom(final ExpenseItem otherItem) {
        if (belongsToSameClaim(otherItem)) {
            if (dateIncurred == null) {
                modifyDateIncurred(otherItem.getDateIncurred());
            }
        } else if (getClass().isInstance(otherItem)) {
            copyAllSameClassFields(otherItem);
        }
    }</programlisting>

        <para>Again, we can see that the method has been marked up with
        <literal moreinfo="none">@MemberOrder</literal>, which will govern the
        relative location of this action on the action menu.</para>

        <para>Because the <literal moreinfo="none">copyFrom</literal> method
        takes a parameter, when the user invokes the corresponding menu action
        they will be presented with a dialog, wherein each of the parameters
        may be specified. This is shown below on the two user
        interfaces:</para>

        <screenshot>
          <mediaobject>
            <imageobject>
              <imagedata contentwidth="40%"
                         fileref="images/taxi-copy-dialog.png" format="PNG" />
            </imageobject>
          </mediaobject>
        </screenshot>

        <para>Editing a dialog is similar to editing an object: though there
        are differences in the way they are rendered (for example a dialog has
        an 'OK' button in both the DND and HTML user interfaces). Parameters
        that take value types (such as <classname>String</classname> or
        <classname>Date</classname>) are rendered as fields that the user can
        type into. Where a parameter is a domain object class or interface, as
        in this case with <classname>ExpenseItem</classname>, then the user
        must specify an object of that type. In the DND user interface, the
        user may drag and drop an object into the parameter field. In the HTML
        user interface, the user is automatically presented with a drop-down
        list of objects of that type that they have recently viewed. If the
        desired object doesn't appear, they may go and find the object (by
        navigating from another object, or using a find method on one of the
        start points) and then return to the dialog, where the
        recently-located object should now appear on the list.</para>

        <para>Adjacent to the <literal moreinfo="none">copyFrom</literal>
        method on <classname>AbstractExpenseItem</classname> we can also find
        the following two methods:</para>

        <programlisting format="linespecific">    public String disableCopyFrom() {
        return disabledIfLocked();
    }

    public String validateCopyFrom(final ExpenseItem otherItem) {
        if (belongsToSameClaim(otherItem) || (getClass().equals(otherItem.getClass()))) {
            return null;
        }
        return COPY_WARN;
    }
    private final static String COPY_WARN = "Cannot copy";</programlisting>

        <para><literal moreinfo="none">disableCopyFrom</literal> and <literal
        moreinfo="none">validateCopyFrom</literal> are other examples of
        recognised methods (fully documented in the applib documentation).
        They work in a similar manner to the <literal
        moreinfo="none">disable&lt;propertyName&gt;</literal> and <literal
        moreinfo="none">validate&lt;propertyName&gt;</literal> methods that we
        have previously seen - in this case disabling the action under certain
        conditions, and validating the parameters of the action. For both the
        user-interfaces shown, disabling the action will result in it being
        greyed-out on the menu. If the entered set of parameters does not pass
        the validity test, this will be brought to the user's attention when
        they attempt to execute the action (e.g. by hitting the OK button),
        along with an explanatory message.</para>

        <para>By default, the user will be required to specify each of the
        parameters within the dialog. The programmer may, however, use the
        <literal moreinfo="none">@Optional </literal>annotation in-line (i.e.
        immediately before any parameter in the method signature) to specify
        that that parameter may be left empty.</para>
      </sect1>

      <sect1>
        <title>Defining Services</title>

        <para>As stated previously all the application code consists either of
        domain objects or services, with the former typically representing the
        lions share of the code. Now we'll look at the services.</para>

        <para>Services perform two roles in a [[NAME]] application. First,
        they provide a place to put functionality that cannot be placed on an
        instance of a domain object, of which the two most obvious examples
        are:</para>

        <itemizedlist>
          <listitem>
            <para>Finding one or more domain objects where you don't have an
            associated object to navigate from e.g. finding a Customer object
            by their name or customer number.</para>
          </listitem>

          <listitem>
            <para>Creating a new instance of a domain object class, where you
            don't have an existing object to create it from. Thus, although
            you might decide that it makes sense to create a new Order object
            by means of an action on Customer, you will probably want to be
            able to create a new Customer object without necessarily having
            any Order.</para>
          </listitem>
        </itemizedlist>

        <para>To fulfill these requirements we could create two separate
        services, called, say, CustomerFinder and CustomerFactory. Or we could
        create a single service called, say, Customers, which has methods to
        cover both requirements. There's no hard-and-fast rule about how
        services should be partitioned.</para>

        <para>The second role that services perform within a [[NAME]]
        application is to bridge domains. The following are examples of what
        we mean by bridging domains:</para>

        <itemizedlist>
          <listitem>
            <para>Linking to functionality that already exists, or has to
            exist, outside of the [[NAME]] application, such as pre-existing
            services, or functionality within legacy systems.</para>
          </listitem>

          <listitem>
            <para>Bridging between technical domains, such as between the
            object domain and the relational database domain, or the email
            domain.</para>
          </listitem>

          <listitem>
            <para>(Less commonly) Bridging between isolated modelling domains.
            The [[NAME]] philosophy is to aim, where possible, for a single
            coherent enterprise object model running within the same
            application space. Where this is not possible (e.g. for technical
            or for political reasons), then services may be used to
            communicate between the domains without requiring common object
            definitions and/or identities.</para>
          </listitem>
        </itemizedlist>

        <para>In this section we'll look at how services are defined, and in
        the next section at how they are used.</para>

        <para>Services are implemented as Java classes, as are domain objects,
        but they are handled differently by the framework.</para>

        <para>It is good practice to define services as Java interfaces. That
        way it is possible for the implementation of the service to change
        over time, without affecting any of the objects that use the service.
        During development it is often useful to develop a simple 'mock'
        implementation of a service that can be used either for prototyping or
        testing purposes; this can then be replaced with a proper
        implementation as development progresses towards deployment. For
        example, within the Expenses Processing application, the following
        Java interface defines a service for sending an email:</para>

        <programlisting format="linespecific">    package org.apache.isis.example.expenses.services;

    public interface EmailSender {

        void sendTextEmail(final String toEmailAddress, final String text);
    }</programlisting>

        <para>This service definition has just one method, but it could easily
        have more, such as methods that take a <literal
        moreinfo="none">List</literal> of recipient addresses, or that can
        accommodate file attachments. <literal
        moreinfo="none">JavaMailSender</literal> is an implementation of that
        service:</para>

        <programlisting format="linespecific">public class JavaMailSender extends AbstractService implements EmailSender {

    private static final String SMTP_HOST_NAME = "localhost";
    private static final String SMTP_AUTH_USER = "expenses@donotreply.org";
    private static final String SMTP_AUTH_PWD = "";
    private static final boolean authenticate = false;

    private class SMTPAuthenticator extends javax.mail.Authenticator {
        public PasswordAuthentication getPasswordAuthentication() {
            final String username = SMTP_AUTH_USER;
            final String password = SMTP_AUTH_PWD;
            return new PasswordAuthentication(username, password);
        }
    }

    public void sendTextEmail(final String toEmailAddress, final String text) {
        try {
            final Properties properties = new Properties();
            properties.put("mail.smtp.host", SMTP_HOST_NAME);
            properties.put("mail.smtp.auth", authenticate ? "true" : "false");
            final Authenticator authenticator = authenticate ? new SMTPAuthenticator() : null;
            final Session session = Session.getDefaultInstance(properties, authenticator);
            final Message message = new MimeMessage(session);
            final InternetAddress fromAddress = new InternetAddress(SMTP_AUTH_USER);
            final InternetAddress toAddress = new InternetAddress(toEmailAddress);
            message.setFrom(fromAddress);
            message.setRecipient(Message.RecipientType.TO, toAddress);
            message.setSubject("Expenses notification");
            message.setContent(text, "text/plain");
            Transport.send(message);
        } catch (AddressException e) {
            throw new ApplicationException("Invalid email address", e);
        } catch (MessagingException e) {
            throw new ApplicationException("Problem sending email", e);
        }
    }
}</programlisting>

        <para>We can see that this service performs a technical bridging role:
        it bridges between the object domain and an external SMTP
        server.</para>

        <para>Since there could be multiple implementations of any one service
        within our code base, [[NAME]] needs to be informed of which services
        it is to reference when running an application. This is done within
        the properties files. For example, the <filename class="directory"
        moreinfo="none">isis.properties</filename> file, which may be found
        within the <literal
        moreinfo="none">expenses.app.client\config</literal> directory,
        contains the property specification:</para>

        <programlisting format="linespecific">isis.services.prefix=org.apache.isis.example.expenses
isis.services=services.JavaMailSender</programlisting>

        <para>This specifies that the class JavaMailSender is to be referenced
        as a service within the application. You will find a list of other
        services being referenced there also. Many of those services are
        'repositories', and though there is no technical difference between a
        repository and any other kind of service, repositories play such an
        important role in [[NAME]] applications, that they are worth exploring
        in more detail.</para>

        <sect2>
          <title>Repositories</title>

          <para>[[NAME]] handles the basic object lifecycle (create, read,
          update, delete) automatically - there is no need to define your own
          methods for saving or updating objects, or for retrieving an object
          that you have a reference to. These mechanisms work the same way
          irrespective of what technology you are using to persist the objects
          - such as via Hibernate, natively to a relational database, or via
          the 'XML Object Store'.</para>

          <para>[[NAME]] even provides some simple mechanisms for searching
          for persisted objects - that also operate the same way, irrespective
          of the object store. However, a business application will also need
          more complex search queries that, for reasons of efficiency, will
          need to be written specifically for the type of object store you are
          working with.</para>

          <para>Best practice in application design suggests that such queries
          should be implemented on 'Repository' classes, rather than within
          the domain classes directly. That way if you change the persistent
          object store, you can just create a new implementation of the
          affected Repositories, without having to change any domain classes.
          [[NAME]] supports this concept. Within the Expenses application you
          will find the following three repository definitions:</para>

          <programlisting format="linespecific">org.apache.isis.example.expenses.claims.ClaimRepository
org.apache.isis.example.expenses.employee.EmployeeRepository;
org.apache.isis.example.expenses.recordedAction.impl.RecordedActionRepository;</programlisting>

          <para>In each case the repository is defined as a Java interface,
          anticipating the possibility of different implementations. We'll
          look at the <classname>ClaimRepository</classname>
          definition:</para>

          <programlisting format="linespecific">public interface ClaimRepository {
    final static int MAX_CLAIMS = 20;
    final static int MAX_ITEMS = 10;

    List&lt;Claim&gt; findClaims(final Employee employee, final ClaimStatus status, final String description);

    List&lt;Claim&gt; findRecentClaims(final Employee employee);

    boolean descriptionIsUniqueForClaimant(final Employee employee, final String initialDescription);

    List&lt;ExpenseItem&gt; findExpenseItemsLike(final ExpenseItem item);

    List&lt;Claim&gt; findClaimsAwaitingApprovalBy(Employee approver);
    
    ClaimStatus findClaimStatus(String title);

    ExpenseItemStatus findExpenseItemStatus(String title);
}</programlisting>

          <para>This interface defines some seven method signatures for
          retrieving <classname>Claim</classname>s and
          <classname>ExpenseItem</classname>s. Note that there is no hard rule
          about the scope of a single Repository - we could have decided to
          separate this into a <classname>ClaimRepository</classname> and an
          <literal moreinfo="none">ExpenseItemRepository</literal> if that
          offered us some advantage.</para>

          <para>The example application contains two concrete implementations
          of <classname>ClaimRepository</classname>:</para>

          <programlisting format="linespecific">org.apache.isis.example.expenses.services.inmemory.ClaimRepositoryInMemory
org.apache.isis.example.expenses.services.hibernate.ClaimRepositoryHibernate</programlisting>

          <para>The first of these is intended for use with a standalone
          prototype - with a relatively small number of object instances, all
          held in memory. So the finder methods can be written 'naively' - to
          enumerate through all the objects in a class and find the match(es).
          The following is its implementation of the
          <methodname>findClaimsAwaitingApprovalBy</methodname> method:</para>

          <programlisting format="linespecific">    public List&lt;Claim&gt; findClaimsAwaitingApprovalBy( final Employee approver ) {
        return allMatches(
            Claim.class, 
            new Filter() {
                public boolean accept(final Object obj) {
                    Claim claim = (Claim) obj;
                    return claim.getStatus().isSubmitted() &amp;&amp; claim.getApprover() == approver;
                }
            });
    }</programlisting>

          <para>This delegates to an <methodname>allMatches</methodname>
          method, inherited from
          <classname>AbstractFactoryAndRepository</classname>, and use a
          <classname>Filter</classname> object (created in-line) to compare to
          each instance of <classname>Claim</classname> held in memory. Such
          methods are very simple to write and debug (because they can invoke
          methods on the objects being searched, such as
          <methodname>isSubmitted</methodname> here), but they would not
          operate efficiently for large numbers of objects.</para>

          <para><classname>ClaimRepositoryHibernate</classname> is written to
          work with the Hibernate Object Store and can work efficiently at
          large scale. Here is its the
          <methodname>findClaimsAwaitingApprovalBy</methodname> method:</para>

          <programlisting format="linespecific">public List&lt;Claim&gt; findClaimsAwaitingApprovalBy( final Employee approver ) {
    final Criteria criteria = hibernateHelper.createCriteria(Claim.class);
    criteria.
        add(Restrictions.eq("approver", approver)).
        createCriteria("status").
        add(Restrictions.eq("titleString", ClaimStatus.SUBMITTED));
    return hibernateHelper.findByCriteria(criteria, Claim.class);
}</programlisting>

          <para>This implementation uses a <classname>Criteria</classname>
          object, a class provided by the <ulink
          url="www.hibernate.org">Hibernate</ulink> framework.</para>

          <para>Both <classname>ClaimRepositoryInMemory</classname> and
          <classname>ClaimRepositoryHibernate</classname> inherit from
          <classname>ClaimRepositoryAbstract</classname>, which inherits from
          <classname>AbstractFactoryAndRepository</classname> and also
          implements the <classname>ClaimRepository</classname> interface.
          This pattern is not a requirement - the implementations do not need
          to inherit from any framework class, they can just implement the
          required Repository interface natively. However the advantage of
          this pattern is that some simple query methods can be written
          generically, as shown in these two examples:</para>

          <programlisting format="linespecific">public List&lt;ExpenseItem&gt; findExpenseItemsOfType(final Employee employee, final ExpenseType type) {
    final List&lt;Claim&gt; claims = findClaims(employee, null, null);
    final List&lt;ExpenseItem&gt; items = new ArrayList&lt;ExpenseItem&gt;();
    for (final Claim claim : claims) {
        ExpenseItem pattern = (ExpenseItem) newTransientInstance((Class) type.correspondingClass());
        pattern.setClaim(claim);
        List list = (List) uniqueMatch((Class) type.correspondingClass(), pattern, EXCLUDING_SUBCLASSES);
        items.addAll(list);
    }
    return items;
}

public ClaimStatus findClaimStatus(String title) {
    return uniqueMatch(ClaimStatus.class, title, EXCLUDING_SUBCLASSES);
}</programlisting>

          <para>These two query methods both delegate to
          <methodname>uniqueMatch</methodname>, inherited from
          <classname>AbstractFactoryAndRepository</classname>, but different,
          overloaded, versions of that method.
          <methodname>findExpenseItemsOfType</methodname> invokes
          <methodname>uniqueMatch</methodname> with a pattern - an instance of
          <classname>ExpenseItem</classname> that has been set up with the
          fields where a match is required.
          <methodname>findClaimStatus</methodname> invokes
          <methodname>uniqueMatch</methodname> with a
          <classname>String</classname> representing the title of the object
          required. The implementation of both of these forms of query is
          delegated to the object store, in a manner that is transparent to
          the application programmer. So, if the nature of the query can be
          represented in the form of a find by title, or a find by pattern,
          then it is advantageous to use these methods on
          <classname>AbstractFactoryAndRepository</classname>. Otherwise you
          can write specialised methods on the respective repository
          implementations.</para>

          <para>As with all services, we need to inform the framework of the
          existence and intent of these implementations, via the properties
          files. Within <filename class="directory"
          moreinfo="none">isis.properties</filename> you will find:</para>

          <programlisting format="linespecific">isis.services=services.inmemory.ClaimRepositoryInMemory</programlisting>

          <para>and within <filename class="directory"
          moreinfo="none">persistor_hibernate.properties</filename> you will
          find:</para>

          <programlisting format="linespecific">isis.services = services.hibernate.ClaimRepositoryHibernate</programlisting>

          <para><filename class="directory"
          moreinfo="none">persistor_hibernate.properties</filename> is only
          referenced if the application is run with the Hibernate Object
          Store, in which case the framework will recognise that
          <classname>ClaimRepositoryHibernate</classname> is intended to
          replace <classname>ClaimRepositoryInMemory</classname> as the
          implementation to use.</para>
        </sect2>

        <sect2>
          <title>Factories</title>

          <para>A Factory is just the name we give to a kind of service that
          specialises in the creation of new objects, of one or more kinds. It
          is not necessary to use a Factory in order to create objects within
          [[NAME]]: we may invoke the methods
          <methodname>newTransientInstance</methodname> from within a method
          on a domain object or within any service.</para>

          <para>However, if there is a need to create a type of object from
          several different places in the application, and there are common
          steps involved, then it is good practice to delegate this to a
          Factory. Within [[NAME]] a Factory is just another service, it
          doesn't have any special status. For example, within the Expenses
          application, new <classname>Claim</classname>s and new
          <classname>ExpenseItem</classname>s are created via the
          <classname>ClaimFactory</classname>. However, new
          <classname>RecordedAction</classname>s are created in the
          <classname>RecordedActionService</classname>. Note that
          <classname>ClaimFactory</classname> is specified as a class rather
          than an interface, because we have no particular reason to
          anticipate different implementations of the factory.</para>
        </sect2>
      </sect1>

      <sect1>
        <title>Using services</title>

        <para>Services are used within [[NAME]] in three ways:</para>

        <itemizedlist>
          <listitem>
            <para>Injected into domain objects</para>
          </listitem>

          <listitem>
            <para>Directly accessible to the user</para>
          </listitem>

          <listitem>
            <para>To contribute actions to domain objects</para>
          </listitem>
        </itemizedlist>

        <para>We'll look at these three in turn.</para>

        <sect2>
          <title>Injecting Services into domain objects</title>

          <para>Objects may need access to services, such as repositories for
          finding related objects, or for calling functionality from outside
          the domain model. [[NAME]] uses the 'dependency injection' model.
          Each object merely needs to provide a <literal
          moreinfo="none">set</literal> method for each type of service that
          it requires. For example, within the Employee object there is a code
          region labelled <literal moreinfo="none">Injected
          Services</literal>:</para>

          <programlisting format="linespecific">// {{ Injected Services
    // {{ Injected: RecordActionService
    private RecordActionService recordActionService;

    protected RecordActionService getRecordActionService() {
        return this.recordActionService;
    }

    public void setRecordActionService(final RecordActionService recordActionService) {
        this.recordActionService = recordActionService;
    }
    // }}

    // {{ Injected: UserFinder
    private UserFinder userFinder;

    protected UserFinder getUserFinder() {
        return this.userFinder;
    }

    public void setUserFinder(final UserFinder userFinder) {
        this.userFinder = userFinder;
    }
    // }}
// }}</programlisting>

          <para>In this case, the Employee object has specified that it
          requires two services to be injected: a <literal
          moreinfo="none">RecordActionService</literal> and a <literal
          moreinfo="none">UserFinder</literal>. Whenever an instance of
          Employee is created, or retrieved from the object store, [[NAME]]
          Objects will inject the implementation that it knows about (as
          specified in properties) for each type of service required. Note
          that, unlike the other properties we have looked at, <literal
          moreinfo="none">get</literal> methods may be <literal
          moreinfo="none">protected</literal>, because the property is not
          displayed. (Strictly speaking a <literal
          moreinfo="none">get</literal> is often not needed here - as the
          injected service may be accessed via the variable - but it is
          considered to be good practice.)</para>

          <para>From within the object we can then call any of the methods
          defined for those types of service. For example, we can see that the
          <methodname>hideEmailAddress</methodname> method makes a call (via
          <methodname>employeeIsCurrentUser</methodname>) to the
          <classname>UserFinder</classname> service:</para>

          <programlisting format="linespecific">public boolean hideEmailAddress() {
    return !employeeIsCurrentUser();
}

private boolean employeeIsCurrentUser() {
    return getUserFinder().currentUserAsObject() == this;
}</programlisting>
        </sect2>

        <sect2>
          <title>Making services directly accessible to the user</title>

          <para>Services may be made available directly to the user. On the
          DND user interface these appear as the large icons on the desktop;
          on the HTML user interface (that is, as styled by the default CSS)
          these appear as the tabs across the top of the screen. Which
          services are made available to a particular user are defined in
          'perspectives' within a user profile. Within the Fixture project the
          class <classname>ExplorationUserProfileFixture</classname> defines
          the perspectives for various defined prototype users:</para>

          <programlisting format="linespecific">public class ExplorationUserProfileFixture extends UserProfileFixture {

    @Override
    protected void installProfiles() {
        ...
        Profile svenProfile = newUserProfile();
        Perspective claimsPerspective = svenProfile.newPerspective("Claims");
        claimsPerspective.addToServices(Claims.class);
        claimsPerspective.addToServices(Employees.class);
        saveForUser("sven", svenProfile);
        ...

    }
}</programlisting>

          <para>The above example specifies that the user 'sven' is to be
          given a perspective called 'Claims', which gives him direct access
          to two services: <classname>ClaimStartPoints</classname> and
          <classname>EmployeeStartPoints</classname>. If we look at the second
          of those, we can see that it defines two actions:
          <methodname>findEmployeeByName</methodname> and
          <methodname>me</methodname>:</para>

          <programlisting format="linespecific">  @Named("Employees")
  public class EmployeeStartPoints extends AbstractService {
      // {{ Title &amp; ID

      // {{ Injected Services

      @MemberOrder(sequence = "2")
      public List&lt;Employee&gt; findEmployeeByName(@Named("Name (or start of Name)")
      final String name) {
          List&lt;Employee&gt; results = employeeRepository.findEmployeeByName(name);
          if (results.isEmpty()) {
              warnUser("No employees found matching name: " + name);
              return null;
          }
          return results;
      }

      @Executed(Executed.Where.LOCALLY)
      public Employee me() {
          Employee me = employeeRepository.me();
          if (me == null) {
              warnUser("No Employee representing current user");
          }
          return me;
      }
  }</programlisting>

          <para>Both of these methods delegate to methods on the
          <classname>EmployeeRepository</classname>, which has been injected
          (services may be injected into other services, just as into domain
          objects). Note that it is not necessary to define specific services
          to be provided directly to the user - we could provide the user with
          direct access to the Repositories, Factories or other services
          specified within the application. Creating dedicated user-oriented
          service definitions just helps us to separate the concerns. Calling
          them 'Start Points' is also just a convention.</para>
        </sect2>

        <sect2>
          <title>Using services to contribute actions to domain
          objects</title>

          <para>The screens below show the action menu on the Claim object, as
          rendered by the two different user interfaces:</para>

          <screenshot>
            <mediaobject>
              <imageobject>
                <imagedata align="center" contentwidth="40%"
                           fileref="images/claim-contributed-actions.png"
                           format="PNG" />
              </imageobject>
            </mediaobject>
          </screenshot>

          <para>This menu has a sub-menu, entitled 'Recorded Actions',
          containing, in this case, a single method 'All Recorded Actions'.
          Sub-menus in [[NAME]] are 'contributed' by services; the actions in
          the sub-menus are described as 'contributed actions'. In this case
          the actions are contributed the service
          <classname>RecordedActionContributedActions</classname>:</para>

          <programlisting format="linespecific">  @Named("Recorded Actions")
  public class RecordedActionContributedActions extends AbstractService {

      // {{ Injected Services
 
      public List&lt;RecordedAction&gt; allRecordedActions(RecordedActionContext context) {
          return recordedActionRepository.allRecordedActions(context);
      }
  }</programlisting>

          <para>The method <methodname>allRecordedActions</methodname> takes a
          <classname>RecordedActionContext</classname> as a parameter, and
          will return all the <classname>RecordedAction</classname>s
          associated with that object. Note that
          <classname>RecordedActionContext</classname> is an interface that
          defines no methods - it is purely a type definition:</para>

          <programlisting format="linespecific">public interface RecordedActionContext {
}</programlisting>

          <para>However, this interface is implemented by two classes:
          <classname>Employee</classname> and <classname>Claim</classname>.
          The net result of this is that the action 'All Recorded Actions'
          will be contributed to each instance of
          <classname>Employee</classname> and of <classname>Claim</classname>.
          By default, this would appear in a sub-menu named after the service
          on which the method was defined (i.e. 'Recorded Action Contributed
          Actions'), but in this case we have used the <literal
          moreinfo="none">@Named</literal> annotation to override this and
          render the service name, and hence the sub-menu name, simply as
          'Recorded Actions'.</para>

          <para>We can also see that this method delegates its execution to
          the <classname>RecordedActionRepository</classname>, which has been
          injected as a service. You are not required to follow this pattern,
          or this naming convention. In fact, if the
          <methodname>allRecordedActions</methodname> method on
          <classname>RecordedActionRepository</classname> was not
          <classname>@Hidden</classname>, then it would have been contributed
          automatically - without the need for defining
          <classname>RecordedActionContributedActions</classname>. We have
          defined the latter purely to help convey intent and manage our code
          base.</para>

          <para>The rule is that any method defined on any service that the
          user is authorised to access (see <xref
          linkend="chp.SecurityApi" />) and is not hidden, will be contributed
          to any object of a type that features as any of the parameters to
          that method.</para>

          <para>This is a very powerful feature of [[NAME]], but it is one
          that takes a bit of getting used to. In some respects it is a little
          bit like Aspect Oriented Programming (AOP), in that it allows an
          object effectively to inherit capabilities from several different
          sources. However, this all takes place at run-time, not at compile
          time.</para>

          <para>In a more complex application, it might well be that a domain
          object might have several contributed sub-menus, each containing
          several methods. Designing an application this way allows us to keep
          the model well partitioned. In this very simple example, it has
          allowed us to keep the part of the model concerned with recording
          actions very separate from the other parts of the model.</para>
        </sect2>
      </sect1>

      <sect1>
        <title>Fixtures</title>

        <para>Fixtures are used to set up objects within the code based,
        principally for use within prototyping and or testing. [[NAME]]
        provides specific support for using fixtures. The following code shows
        a fixture class that sets up one claim:</para>

        <programlisting format="linespecific">public class SvenClaim1NewStatus extends AbstractClaimFixture {
    
    public static Employee SVEN;
    public static Employee DICK;
    public static Claim SVEN_CLAIM_1;

    @Override
    public void install() {
        SVEN = EmployeeFixture.SVEN;
        DICK = EmployeeFixture.DICK;

        SVEN_CLAIM_1 =createNewClaim(SVEN, DICK, "28th Mar - Sales call, London", ProjectCodeFixture.CODE1, new Date(2007,4,3));
        Date mar28th = new Date(2007,3,28);
        addTaxi(SVEN_CLAIM_1, mar28th, null, 8.50, "Euston", "Mayfair", false);
        addMeal(SVEN_CLAIM_1, mar28th, "Lunch with client", 31.90);
        addTaxi(SVEN_CLAIM_1, mar28th, null, 11.00, "Mayfair", "City", false);
    } 
}</programlisting>

        <para>This inherits from <classname>AbstractClaimFixture</classname>,
        which provides the helper methods such as
        <methodname>createNewClaim</methodname>, and which inherits in turn
        from <classname>AbstractFixture</classname>, a class in the [[NAME]]
        Objects application library. However, there is no need to follow this
        pattern: a fixture may be any class that has an
        <methodname>install</methodname> method.</para>

        <para>Fixtures may be composite, as we can see in this example:</para>

        <programlisting format="linespecific">public class SvenClaims_All extends AbstractClaimFixture {
    
    public SvenClaims_All() {
        addFixture(new SvenClaim1NewStatus());
        addFixture(new SvenClaim2Submitted());
        addFixture(new SvenClaim5New());
        addFixture(new SvenClaim3Returned());
        addFixture(new SvenClaim4Approved());
    }  
    
    public void install() {}
}</programlisting>

        <para>This fixture has had five other fixtures added to it. The
        <methodname>install</methodname> method is empty: [[NAME]] will
        automatically call <methodname>install</methodname> on each of the
        fixtures that has been added to this composite fixture. This pattern
        makes it easy to manage large fixtures, and multiple sets of
        (potentially overlapping) fixtures, both for prototyping and for
        testing.</para>

        <para>As with services, [[NAME]] needs to be instructed which fixtures
        it should use when running an application. This may be done in the
        properties files, for example:</para>

        <programlisting format="linespecific">isis.fixtures.prefix=org.apache.isis.example.expenses.fixtures
isis.fixtures=ExplorationPerspectiveFixture, RefdataFixture, EmployeeFixture,  SvenClaims_All</programlisting>

        <para>Note that this also specifies the
        <classname>ExplorationPerspectiveFixture</classname>, which we looked
        at earlier.</para>

        <para>Fixtures may also be specified as a command line parameter (see
        <xref linkend="sec.RuntimeLauncher" />) when launching the application
        from the command line; composite fixtures are especially handy in this
        circumstance.</para>
      </sect1>
    </chapter>

    <chapter>
      <title>Running the QuickApp Archetype</title>

      <para>*** talk through using the "quickapp" archetype, which generates a
      read-to-run app.</para>

      <para></para>

      <para></para>

      <sect1>
        <title>Run Archetype</title>

        <para></para>

        <para></para>

        <para></para>

        <para>Using Maven archetype plugin we can generate a new [[NAME]]
        application very quickly. These are multi-moduled projects with
        separate sections for the domain code, fixtures, web interfaces and so
        on.</para>

        <para>One option is to create the archetype from the commandline. Note
        that if you are using Eclipse and have installed the m2eclipse plugin
        then it provides a dialog to create the project from an archetype;
        this is discussed below.</para>

        <remark>TODO: update the listing below, it is out of date. The
        archetype to use is called
        'org.apache.isis.support.archetype:quickstart</remark>

        <screen>[rcm@localhost ~]$ <emphasis role="bold">mvn archetype:generate -DarchetypeCatalog=http://isis.apache.org</emphasis>
[INFO] Scanning for projects...
[INFO] Searching repository for plugin with prefix: 'archetype'.
[INFO] ------------------------------------------------------------------------
[INFO] Building Maven Default Project
[INFO]    task-segment: [archetype:generate] (aggregator-style)
[INFO] ------------------------------------------------------------------------
[INFO] Preparing archetype:generate
[INFO] No goals needed for project - skipping
[INFO] Setting property: classpath.resource.loader.class =&gt; 'org.codehaus.plexus.velocity.ContextClassLoaderResourceLoader'.
[INFO] Setting property: velocimacro.messages.on =&gt; 'false'.
[INFO] Setting property: resource.loader =&gt; 'classpath'.
[INFO] Setting property: resource.manager.logwhenfound =&gt; 'false'.
[INFO] [archetype:generate]
[INFO] Generating project in Interactive mode
[INFO] No archetype defined. Using maven-archetype-quickstart (org.apache.maven.archetypes:maven-archetype-quickstart:1.0)
Choose archetype:
1: local -&gt; isis-application ([[NAME]] Application (Archetype))
2: local -&gt; isis-icons ([[NAME]] Icons (Archetype))
3: local -&gt; htmlviewer-war ([[NAME]] WAR (Archetype))
4: local -&gt; hibernate-support (Hibernate Support (Archetype))
5: local -&gt; remoting-support ([[NAME]] Remoting Support (Archetype))
Choose a number:  (1/2/3/4/5): <emphasis role="bold">1</emphasis></screen>

        <para>To create a project from an archetype you must specify a
        <emphasis>groupId</emphasis> and <emphasis>artifactId</emphasis>, a
        <emphasis>version</emphasis> and a <emphasis>Java
        package</emphasis>.</para>

        <para>After choosing the archetype number and pressing enter you are
        prompted for the project's details. The <emphasis>groupId</emphasis>
        is an identifier representing your company/group; ours would typically
        be "org.apache.isis" for the domain followed by a name for the group
        of products. The <emphasis>artifactId</emphasis> identifies the
        projects that we are creating. The <emphasis>version</emphasis>
        indicates how mature the project is, and should be left as the
        default, e.g. 1.0-SNAPSHOT. Finally, the <emphasis>package</emphasis>
        is the base package name used for all Java files. After these have
        been entered you are prompted to confirm by entering Y, as shown
        below.</para>

        <para>Be wary of using invalid names. The <emphasis>groupId</emphasis>
        should be alphanumeric with dots to separate the words. The
        <emphasis>artifactId</emphasis> should also be alphanumeric, with '-'
        (hyphens) to separate the words. The <emphasis>package</emphasis> name
        should be a valid Java package name, i.e. should have no spaces or
        dashes. Maven does little to check these things.</para>

        <screen>Define value for groupId: : <emphasis role="bold">org.example</emphasis>
Define value for artifactId: : <emphasis role="bold">expenses</emphasis>
Define value for version:  1.0-SNAPSHOT: : 
Define value for package: : <emphasis role="bold">org.example.expenses</emphasis>
Confirm properties configuration:
groupId: org.example
artifactId: expenses
version: 1.0-SNAPSHOT
package: org.example.expenses
 Y: : <emphasis role="bold">y</emphasis>
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 1 minute 13 seconds
[INFO] Finished at: Thu Oct 02 20:42:50 BST 2008
[INFO] Final Memory: 13M/247M
[INFO] ------------------------------------------------------------------------
</screen>

        <para>This will create a new directory with the name of the
        <emphasis>artifactId</emphasis>. So in this example this is
        <filename>expenses</filename> as shown below.<screen>expenses
|-- pom.xml
|-- dom
|   |-- pom.xml
|   `-- src
|-- commandline
|   |-- config
|   |-- ide
|   |-- pom.xml
|   `-- src
|-- fixture
|   |-- pom.xml
|   `-- src
|-- service
|   |-- pom.xml
|   `-- src
`-- webapp
    |-- pom.xml
    `-- src</screen></para>

        <para></para>
      </sect1>

      <sect1>
        <title>Building the application</title>

        <para>Once an archetype is created it can be built using Maven and
        run. Build using the <emphasis>install</emphasis> goal as shown
        here.</para>

        <screen>[rcm@localhost expenses]$ <emphasis role="bold">mvn clean install</emphasis>
[INFO] Scanning for projects...
[INFO] Reactor build order: 
[INFO]   [[NAME]] Application
[INFO]   Domain Model
[INFO]   Services
[INFO]   Fixtures
[INFO]   Exploration
[INFO] ------------------------------------------------------------------------
[INFO] Building [[NAME]] Application
[INFO]    task-segment: [clean, install]
[INFO] ------------------------------------------------------------------------
[INFO] [clean:clean]
[INFO] [site:attach-descriptor]
[INFO] [install:install]
[INFO] Installing /home/rcm/tmp/bearingpoint/expenses/pom.xml to /home/rcm/.m2/repository/org/example/expenses/1.0-SNAPSHOT/expenses-1.0-SNAPSHOT.pom
[INFO] ------------------------------------------------------------------------
[INFO] Building Domain Model
[INFO]    task-segment: [clean, install]
[INFO] ------------------------------------------------------------------------
[INFO] [clean:clean]
[INFO] Deleting directory /home/rcm/tmp/bearingpoint/expenses/dom/target
[INFO] [resources:resources]
[INFO] Using default encoding to copy filtered resources.
[INFO] [compiler:compile]
[INFO] Compiling 7 source files to /home/rcm/tmp/bearingpoint/expenses/dom/target/classes
[INFO] [resources:testResources]
[INFO] Using default encoding to copy filtered resources.
:
:
[INFO] [resources:testResources]
[INFO] Using default encoding to copy filtered resources.
[INFO] [compiler:testCompile]
[INFO] No sources to compile
[INFO] [surefire:test]
[INFO] No tests to run.
[INFO] [jar:jar]
[INFO] Building jar: /home/rcm/tmp/bearingpoint/expenses/exploration/target/expenses.jar
[INFO] [assembly:attached {execution: default}]
[INFO] Reading assembly descriptor: src/main/assembly/descriptor.xml
[INFO] Processing DependencySet (output=lib)
[INFO] Copying files to /home/rcm/tmp/bearingpoint/expenses/exploration/target/expenses-exploration-1.0-SNAPSHOT-prototype.dir
[WARNING] Assembly file: /home/rcm/tmp/bearingpoint/expenses/exploration/target/expenses-exploration-1.0-SNAPSHOT-prototype.dir is not a regular file (it may be a directory). It cannot be attached to the project build for installation or deployment.
[INFO] [install:install]
[INFO] Installing /home/rcm/tmp/bearingpoint/expenses/exploration/target/expenses.jar to /home/rcm/.m2/repository/org/example/expenses-exploration/1.0-SNAPSHOT/expenses-exploration-1.0-SNAPSHOT.jar
[INFO] 
[INFO] 
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary:
[INFO] ------------------------------------------------------------------------
[INFO] [[NAME]] Application .............................. SUCCESS [6.087s]
[INFO] Domain Model .......................................... SUCCESS [8.711s]
[INFO] Services .............................................. SUCCESS [2.432s]
[INFO] Fixtures .............................................. SUCCESS [2.283s]
[INFO] Commandline ........................................... SUCCESS [10.774s]
[INFO] ------------------------------------------------------------------------
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 31 seconds
[INFO] Finished at: Tue Mar 03 11:59:50 GMT 2009
[INFO] Final Memory: 40M/495M
[INFO] ------------------------------------------------------------------------
[rcm@localhost expenses]$ </screen>

        <para>Once the project is built the results can be found in the
        <filename>exploration/target</filename> directory, which contains both
        a zipped distribution (in this example
        <filename>expenses-exploration-1.0-SNAPSHOT-prototype.zip</filename>)
        and an expanded distribution (again for this example,
        <filename>expenses-exploration-1.0-SNAPSHOT</filename>). Using the
        contained script files the application can be run from the command
        line.<screen>exploration
|-- config
|-- ide
|-- pom.xml
|-- src
`-- target
    |-- archive-tmp
    |-- classes
    |-- expenses-exploration-1.0-SNAPSHOT-prototype.dir
    |   `-- expenses-exploration-1.0-SNAPSHOT
    |       |-- config
    |       |-- images
    |       |-- expenses.jar
    |       |-- isis.bat
    |       |-- isis.sh
    |       |-- lib
    |-- expenses-exploration-1.0-SNAPSHOT-prototype.zip
    |-- expenses.jar
    `-- maven-archiver</screen></para>
      </sect1>

      <sect1>
        <title>Running with the DnD Viewer</title>

        <para>*** below was taken from the tutorial on running the old
        expenses demo</para>

        <para></para>

        <para>The executable version of the Expenses demo application exists
        within the <filename class="directory"
        moreinfo="none">demos</filename> directory of the [[NAME]]
        distribution.</para>

        <para>Run the batch file <filename class="directory"
        moreinfo="none">ExpensesDND.bat</filename> file either by
        double-clicking on the icon (in Windows) or using the following
        commands on the command line. In Windows the commands are</para>

        <programlisting>&gt; cd demos\expenses 
&gt; ExpensesDND.bat</programlisting>

        <para>while on the Mac or when using Unix/Linux they are:</para>

        <programlisting>&gt; cd demos/expenses 
&gt; ./ExpensesDND.sh</programlisting>

        <para>After seeing the [[NAME]] splash screen, you'll be presented
        with a Login screen:</para>

        <screenshot>
          <mediaobject>
            <imageobject>
              <imagedata contentwidth="40%" fileref="images/log-on-dnd.png"
                         format="PNG" />
            </imageobject>
          </mediaobject>
        </screenshot>

        <para>Log in as 'sven' and a password of 'pass'. The application will
        then open like this:</para>

        <screenshot>
          <mediaobject>
            <imageobject>
              <imagedata contentwidth="40%" fileref="images/home-dnd.png"
                         format="PNG" />
            </imageobject>
          </mediaobject>
        </screenshot>

        <para>When an application is started an application window is opened
        and the user's services are displayed on the left hand side. These
        icons typically give the user access to the domain objects held and
        used by the system, and provide a way for to create new instances. Any
        other object that subsequently appears on the screen represents one of
        those objects.</para>

        <remark>TODO replace with up-to-date shot using current
        example</remark>

        <screenshot>
          <screeninfo></screeninfo>

          <mediaobject>
            <imageobject>
              <imagedata contentwidth="40%" fileref="images/dnd-example.png" />
            </imageobject>
          </mediaobject>
        </screenshot>

        <para>The service and objects can be manipulated as follows:</para>

        <itemizedlist>
          <listitem>
            <para>Object actions can be invoked by
            <emphasis>right-clicking</emphasis> on an icon and selecting one
            of the options from the menu.</para>
          </listitem>

          <listitem>
            <para>Resource actions can be invoked by
            <emphasis>right-clicking</emphasis> on a resource icon.To inspect
            an object (when only an icon is shown)
            <emphasis>double-click</emphasis> it - this normally opens up the
            object in a new window.</para>
          </listitem>

          <listitem>
            <para>Objects can be dragged by
            <emphasis>click-dragging</emphasis> on the icons and dropped by
            releasing the mouse button.</para>
          </listitem>

          <listitem>
            <para>Dragged objects can be dropped on an empty object field
            (identified by the grey hole; the label to the right of the hole
            specifies what type of object can be dropped). If the object can
            be dropped into that field then it will flash green. If the object
            cannot be dropped - either because it is the wrong type or that
            specific object is disallowed for some other reason - then the
            field will flash red. Dropping an object into a field sets up that
            field, effectively associating the two objects.</para>
          </listitem>

          <listitem>
            <para>Dragged objects can be dropped on to other object icons. If
            the object that you attempting to drop onto accepts that type of
            object then if will flash green. If that object does not accept
            that kind of object, or disallows that specific object, then it
            will flash red. Dropping one object on to another invokes a
            specific object action, for example: add this product to that
            order.</para>
          </listitem>

          <listitem>
            <para>To quit the application, or access other application related
            options right-click on the desktop to bring up the system
            menu.</para>
          </listitem>
        </itemizedlist>

        <para></para>
      </sect1>

      <sect1>
        <title>Running with the HTML Viewer</title>

        <para>*** below was taken from the tutorial on running the old
        expenses demo</para>

        <para></para>

        <para>2</para>

        <para>To run the expenses demo with the HTML user interface, run the
        batch file <filename class="directory"
        moreinfo="none">ExpensesHTML.bat</filename> either by double-clicking
        on the icon (in Windows) or using the following commands on the
        command line. In Windows the commands are.</para>

        <programlisting>&gt; cd demos\expenses 
&gt; ExpensesHTML.bat</programlisting>

        <para>while on the Mac or when using Unix/Linux they are:</para>

        <programlisting>&gt; cd demos/expenses 
&gt; ./ExpensesHTML.sh</programlisting>

        <para>Allowing a few seconds for the application to start up, you then
        need to launch a browser and point it to <filename class="directory"
        moreinfo="none">http://localhost:8080/logon.app</filename> and you'll
        be presented with a Login screen.</para>

        <screenshot>
          <mediaobject>
            <imageobject>
              <imagedata contentwidth="40%" fileref="images/html-login.png"
                         format="PNG" />
            </imageobject>
          </mediaobject>
        </screenshot>

        <para>Log in as 'sven' and a password of 'pass'. This will direct you
        to the start page of the application, a welcome page is displayed and
        links to the application resources are shown across the top. In the
        same ways as for dnd these links give the user access to the objects
        held and used by the system and provide a way for to create new
        objects. Any other object that subsequently appears on the screen
        represents one of those objects.</para>

        <screenshot>
          <mediaobject>
            <imageobject>
              <imagedata contentdepth="40%" fileref="images/html-start.png"
                         format="PNG" />
            </imageobject>
          </mediaobject>
        </screenshot>

        <para>For example if the claims link is clicked on within the expenses
        demo the claims service page is shown with the resource actions
        available in a menu on the left hand side of the screen.</para>

        <screenshot>
          <screeninfo></screeninfo>

          <mediaobject>
            <imageobject>
              <imagedata contentwidth="40%"
                         fileref="images/html-exampl-claims.png" />
            </imageobject>
          </mediaobject>
        </screenshot>

        <itemizedlist>
          <listitem>
            <para>Object actions can be invoked by clicking on one of the of
            the options from the left hand menu.</para>
          </listitem>

          <listitem>
            <para>Resource actions can be invoked clicking on a resource icon
            link in the resource bar and then clicking on a menu item.</para>
          </listitem>

          <listitem>
            <para>As objects are created or opened they are shown in an object
            history beneath the resource bar.</para>
          </listitem>

          <listitem>
            <para>Similarly the current context, i.e. the current nesting of
            actions is shown beneath the object history.</para>
          </listitem>
        </itemizedlist>
      </sect1>

      <sect1>
        <title>Running with the Scimpi Viewer</title>

        <para></para>
      </sect1>

      <sect1>
        <title>Running with the Restful Viewer</title>

        <para></para>
      </sect1>

      <sect1>
        <title>Running with the Wicket Viewer</title>

        <para></para>
      </sect1>

      <sect1>
        <title>Running the BDD (Concordion) Tests</title>

        <para></para>
      </sect1>
    </chapter>

    <chapter>
      <title>Developing Isis Applications</title>

      <abstract>
        <para>This chapter describes the general approach to follow that we
        recommend for developing domain-driven applications on Isis.</para>
      </abstract>

      <sect1>
        <title>Where to Start?</title>

        <para>There's quite a lot to <emphasis>Apache Isis</emphasis>, with
        lots of optional components (which we call alternates, in keeping with
        JSR-299 terminology). To keep things manageable, the Isis
        documentation is scoped closest to where it's relevant.</para>

        <para>On the other hand, it can be difficult to know exactly where to
        go in the first place... hence these notes. If you read them from top
        to bottom then you'll (a) have a pretty good idea of the general
        process we recommend for developing domain applications in
        <emphasis>Apache Isis</emphasis> and (b) know where to look for more
        detailed documentation.</para>
      </sect1>

      <sect1 id="sec.ApplicationArchetypes">
        <title>Application Archetypes</title>

        <para>We tend to structure Apache Isis applications following a
        standard structure, and you can use the
        <emphasis>application</emphasis> Maven archetype (in
        <filename>support/archetypes/application</filename>) to set this up
        for you. Some of the optional plugins also provide their own Maven
        archetypes which you can run afterwards, for example to setup a
        particular new viewer or object store. The idea is that these are run
        alongside your own application, and provide additional Maven
        (sub)modules which you can then reference.</para>

        <para>Going back to the application archetype though, this sets up a
        simple application that can be run out-of-the-box in exploration mode
        (that is, with the in-memory object store), and using one of the two
        main viewers:</para>

        <itemizedlist>
          <listitem>
            <para>the Drag-n-Drop (<acronym>DnD</acronym>) viewer is a
            client-side viewer that renders the domain objects to a desktop
            metaphor.</para>
          </listitem>

          <listitem>
            <para>the <acronym>HTML</acronym> viewer is designed to run within
            a webapp, and renders a single domain object per page.</para>
          </listitem>
        </itemizedlist>

        <para>Each of these can be run from the command line (the
        <acronym>HTML</acronym> viewer boots up an instance of Jetty web
        server); the archetype documentation explains how; there's further
        documentation on these particular viewers themselves in their
        respective module documentation (see <xref
        linkend="sec.Viewers" />).</para>

        <para>Later on you'll want to deploy the application more formally,
        for example as a <acronym>WAR</acronym> archive (see <xref
        linkend="sec.DeployingAnIsisApplication" /> for more details).</para>
      </sect1>

      <sect1>
        <title>Programming Model</title>

        <para>Once you've got the archetype application running, you're ready
        to start developing your own domain objects. But no matter what
        application you are developing, you'll need to understand the
        <emphasis>Isis programming model</emphasis>.</para>

        <para>The programming model is the set of annotations and programming
        conventions that Isis recognizes. You'll find the programming model is
        documented in the Application Library module (in
        <filename>applib</filename>).</para>

        <para>In addition, the applib contains a small number of utilities
        which can be useful when writing your application: one such is the
        ability to create XML snapshots of your domain object graphs.</para>

        <para>The applib documentation also provides pointers to other
        features that can have an impact on the way in which you write your
        code, namely the cglib and javassist bytecode providers modules (<xref
        linkend="sec.BytecodeProviders" />), the
        <filename>alternates/headless</filename> viewer plugin (<xref
        linkend="sec.Headless" />), and the <ulink
        url="http://groovy.codehaus.org">Groovy</ulink> language support
        (<xref linkend="sec.OtherLanguages" />).</para>
      </sect1>

      <sect1>
        <title>Fixtures and Prototyping</title>

        <para>We suggest that the fastest way to develop your application is
        to start prototyping using the in-memory object store (that is, as set
        up by the application archetype, see <xref
        linkend="sec.ApplicationArchetypes" />). The nice thing about working
        this way is that there is no database schema to slow you down; you can
        make changes and then rapidly try them out.</para>

        <para>On the other hand, the in-memory object store doesn't persist
        objects between runs, so you'll soon tire of continually recreating
        test objects to try out your changes. You should therefore use
        fixtures: blocks of code that are used to setup objects in the
        in-memory object store prior to the app running.</para>

        <para>You can find more information about using fixtures in the
        <filename>applib</filename> module. It's also worth knowing about them
        because they are used when writing tests for your domain application
        (see <xref linkend="sec.AgileTesting" />).</para>
      </sect1>

      <sect1 id="sec.AgileTesting">
        <title>Agile Testing</title>

        <para><emphasis>Apache Isis</emphasis> is very much aligned to agile
        development practices, and provides two complementary mechanisms for
        you to test-drive the development of your application.</para>

        <sect2>
          <title>Story Testing</title>

          <para>Many agile practitioners use story tests as a means to capture
          the acceptance (or completion) criteria for high-level user stories.
          These story tests are typically captured in a non-programmatic form
          so that is understandable to domain experts as well as
          programmers.</para>

          <para>Isis provides integrations with two story testing
          frameworks:</para>

          <itemizedlist>
            <listitem>
              <para><ulink url="http://fitnesse.org">FitNesse</ulink>, where
              the story test is captured within a wiki, and</para>
            </listitem>

            <listitem>
              <para><ulink url="http://concordion.org">Concordion</ulink>,
              where the story test is captured as HTML.</para>
            </listitem>
          </itemizedlist>

          <para>For more information on using these integrations and their
          supporting archetypes, see the <filename>storytests</filename>
          module.</para>
        </sect2>

        <sect2 id="sec.UnitTesting">
          <title>Unit Testing</title>

          <para>Unlike story tests, unit tests are normally written in a
          programming language, typically in a framework such as <ulink
          url="http://junit.org">JUnit</ulink>. <emphasis>A story test ensures
          that the right system is built, while a unit tests ensures the
          system is built right</emphasis>.</para>

          <para>When writing unit tests, you have a choice. Since all the
          business logic in [[NAME]] applications is encapsulated in domain
          object pojos, you can just write unit tests using nothing more than
          JUnit and perhaps also a mocking library such as <ulink
          url="http://jmock.org">JMock</ulink>.</para>

          <para>A slightly more sophisticated approach is to use the JUnit
          integrations and supporting classes of the (so-called) Headless
          module (in <filename>alternates/headless</filename>) . The idea of
          these utilities is to wrap your domain objects in proxies that apply
          the same rules as an <emphasis>Apache Isis</emphasis> viewer. For
          example, if you try to change a property or invoke an action that is
          disabled, then the proxy will throw an exception. You write your
          test to pass if the exception is thrown, and failed otherwise (eg
          using <code>@Test(expected=DisabledException.class)</code>).</para>
        </sect2>
      </sect1>

      <sect1>
        <title>A Domain Library</title>

        <para>The idea behind the <filename>domain</filename> module is to
        provide some off-the-shelf code for you to use and adapt in your own
        applications. This code is fully tested (comes with tests), and is
        intended to be well-designed. Using code from the library should give
        you a kick-start in writing your own domain applications.</para>

        <note>
          <para>The library is currently very modest, but we hope it might
          build up in time.</para>
        </note>

        <para>Of course, there's a limit to the complexity of the code that's
        included in the library, because every domain is different. But having
        a full set of tests should allow you to safely refactor the code to
        your own requirements.</para>

        <para>There's also no guarantee that the library will contain code for
        your specific requirement. But if you do write some domain logic that
        you think might be reusable by others, why not consider donating it
        back to Isis when you've done so?</para>

        <para>The domain library breaks out into three: services, entities and
        values.</para>

        <sect2>
          <title>Domain Services</title>

          <para><emphasis>Apache Isis</emphasis> applications use
          <emphasis>domain service</emphasis>s (a domain-driven design
          pattern) to allow objects to interact with other domains (or
          <emphasis>bounded context</emphasis>s, to use the correct term).
          These domain services are automatically injected into each domain
          object as it is instantiated.</para>

          <para>Domain services split into two: those that interact with
          technical domains (such as sending email, or rendering
          <acronym>PDF</acronym>s), and those that interact with business
          domains (such as general ledger, <acronym>CRM</acronym>s or legacy
          systems).</para>

          <para>Obviously domain services that bridge to business domain
          services are always likely to be specific to each individual
          application. So the services in the
          <filename>domain/services</filename> module focus on providing
          off-the-shelf implementations for some of the more common
          <emphasis>technical</emphasis> domain services.</para>

          <note>
            <para>TODO: discuss comments on general style; use of
            primitives;</para>

            <para></para>
          </note>

          <note>
            <para>TODO: discuss fact that different implementations may be
            required if running client/server (it may not even make sense to
            have an implementation that does anything on server, eg preview
            PDF communication in Acrobat Reader)</para>

            <para></para>
          </note>
        </sect2>

        <sect2>
          <title>Domain Values</title>

          <para></para>

          <para>integrating 3rd party libraries such as JodaTime.</para>

          <para></para>

          <note>
            <para>TODO</para>
          </note>
        </sect2>

        <sect2>
          <title>Domain Entities</title>

          <para></para>

          <para>This should mostly be an x-ref to the applib documentation.
          However, applib is really just the programming model for the
          "default" programming model. So also a good place to explain the
          concept of programming models, and how they can be adjusted.</para>

          <para></para>

          <para>... Programming Model</para>

          <para>x-ref applib docs</para>

          <para></para>

          <para>... Lazy Loading / Dirty Tracking</para>

          <para></para>

          <para></para>

          <note>
            <para>TODO</para>
          </note>
        </sect2>
      </sect1>

      <sect1>
        <title>Object Stores</title>

        <para>Although you can go a long way in developing your application
        using only fixtures and the in-memory object store, eventually you
        will need to integrate with a "real" object store that persists object
        to some sort of serialized store.</para>

        <para>There are several object stores to choose from. Some are easy to
        configure, some more complex; some are only suitable for single-user
        apps, others for multi-users. Each of the object stores has its own
        documentation, so you can select the correct object store to
        choose:</para>

        <itemizedlist>
          <listitem>
            <para>the <acronym>XML</acronym> object store (in
            <filename>alternates/objectstores/xml</filename>) is designed for
            single-user systems, and persists to its own internal
            (proprietary) <acronym>XML</acronym> format;</para>
          </listitem>

          <listitem>
            <para>the Berkeley object store (in
            <filename>alternates/objectstores/berkeley</filename>) is a
            multi-user object store, persists using <ulink
            url="http://www.oracle.com/technetwork/database/berkeleydb/overview/index.html">Berkeley
            DB</ulink>;</para>
          </listitem>

          <listitem>
            <para>the <acronym>SQL</acronym> object store (in
            <filename>alternates/objectstores/sql</filename>) is a multi-user
            object store that persists to an <acronym>RDBMS</acronym> (direct
            over <acronym>JDBC</acronym>);</para>
          </listitem>

          <listitem>
            <para>the <acronym>JPA</acronym> object store (in
            <filename>alternates/objectstores/</filename>jpa) is a multi-user
            object store, persists to an <acronym>RDBMS</acronym> (using a
            <acronym>JPA</acronym> provider for the heavy lifting);</para>
          </listitem>

          <listitem>
            <para>the <acronym>CouchDB</acronym> object store (in
            <filename>alternates/objectstores/</filename>couchdb) is a
            multi-user object store that persists to <ulink
            url="http://couchdb.apache.org">CouchDB</ulink>.</para>
          </listitem>
        </itemizedlist>

        <para>At the time of writing some of these object stores were still
        alpha/beta; check the documentation for each of the above object
        stores to confirm their exact status.</para>

        <para>You'll also find coverage of the object store
        <acronym>API</acronym> itself in the <filename>core</filename>
        documentation. Most users of the framework are unlikely to write their
        own object store, of course, though we hope that over time new
        implementations will be written by the community.</para>
      </sect1>

      <sect1 id="sec.Viewers">
        <title>Viewers</title>

        <para>In the same way that object stores provide pluggability for the
        "back-end", <emphasis>Apache Isis</emphasis> also offers pluggability
        on the front-end too.</para>

        <para>We already noted that there are two main viewers, the
        <acronym>DnD</acronym> viewer and the <acronym>HTML</acronym> viewer
        (configured by the application archetype, see <xref
        linkend="sec.ApplicationArchetypes" />). In addition, there are a
        number of other viewers. Here's the full list:</para>

        <itemizedlist>
          <listitem>
            <para>The <acronym>DnD</acronym> viewer (in
            <filename>alternates/viewers/dnd</filename>) is one of the two
            main viewers setup by the application archetype, and is currently
            the only viewer designed to run client-side (ie not as a
            webapp).</para>

            <para>Out-of-the-box it provides a generic view of all domain
            objects, but provides its own API to allow more sophisticated
            views to be constructed.</para>
          </listitem>

          <listitem>
            <para>The <acronym>HTML</acronym> viewer (in
            <filename>alternates/viewers/html</filename>) is the second of the
            two main viewers setup by the application archetype, running as a
            webapp.</para>

            <para>Other than tweaking <acronym>CSS</acronym>, the views that
            it provides of objects cannot be customized.</para>
          </listitem>

          <listitem>
            <para>Scimpi (in <filename>alternates/viewers/scimpi</filename>)
            allows your application to be deployed as a webapp.</para>

            <para>Out-of-the-box you get a generic view (very similar to that
            provided by HTML viewer); you can then customize the view by
            providing custom pages that use Scimpi tags.</para>
          </listitem>

          <listitem>
            <para>The Wicket viewer (in
            <filename>alternates/viewers/wicket</filename>) uses <ulink
            url="http://wicket.apache.org">Apache Wicket</ulink> to render
            generic views of your domain objects in a webapp.</para>

            <para>Like Scimpi, it allows these views to be customized, this
            time by leveraging the Wicket <classname>Component</classname>
            <acronym>API</acronym>.</para>
          </listitem>

          <listitem>
            <para>The RESTful viewer (in
            <filename>alternates/viewers/restful</filename>) is designed to
            expose your domain objects through a <ulink
            url="http://en.wikipedia.org/wiki/Representational_State_Transfer">RESTful</ulink>
            interface.</para>

            <para>The intention is to allow programmatic access to your domain
            objects from other (perhaps non-Java) clients. The viewer does
            also render as <acronym>XHTML</acronym> for debugging
            purposes.</para>
          </listitem>
        </itemizedlist>

        <para>If deploying with the <acronym>DnD</acronym> viewer you also
        need to decide whether to deploy standalone (ie, each user has their
        own private object store) or in client/server mode (so all users share
        a server-based object store). If the latter case then you will need to
        set up remoting (see <xref linkend="sec.Remoting" />).</para>
      </sect1>

      <sect1 id="sec.Remoting">
        <title>Remoting</title>

        <para>If deploying the <acronym>DnD</acronym> viewer in client/server
        mode then you will need to set up remoting. The main consideration is
        what transport to use:</para>

        <itemizedlist>
          <listitem>
            <para>sockets</para>

            <para>In this configuration both client and server run as
            command-line programs. No plugins are needed, this is the
            default;</para>
          </listitem>

          <listitem>
            <para>http</para>

            <para>In this configuration the server runs as a webapp with a
            servlet used to listen for client-side requests. The client,
            meanwhile, is configured to send its requests via
            <acronym>HTTP</acronym>.</para>
          </listitem>
        </itemizedlist>

        <para>In addition, you can choose the marshalling mechanism by which
        objects are serialized across the wire to be varied. There are
        (again), two options:</para>

        <itemizedlist>
          <listitem>
            <para>encoding/serialization</para>

            <para>In this configuration <emphasis>Apache Isis</emphasis>
            encodes/serializes all objects into a succession of bytestreams.
            This is the default</para>
          </listitem>

          <listitem>
            <para>xstream</para>

            <para>In this configuration the <ulink
            url="http://xstream.codehaus.org">Xstream</ulink> library is used
            to serialize objects</para>
          </listitem>
        </itemizedlist>

        <para>You'll find further coverage of the remoting APIs and how to
        deploy applications in client/server mode in the
        <filename>alternatives/remoting</filename> documentation.</para>
      </sect1>

      <sect1>
        <title>Authentication and Authorization</title>

        <para><emphasis>Apache Isis</emphasis> provides an
        <acronym>API</acronym>s for both authentication and
        authorization.</para>

        <para>The core implementation of these <acronym>API</acronym>s are
        simple basic noop-based authentication and authorization mechanisms.
        For deployment into production, you'll need to configure with another
        alternative implementation.</para>

        <para>One option is the file-based implementation (in
        <filename>alternatives/security/file</filename>), that stores the
        security information in flat files. This is simple, but unlikely to be
        robust enough for enterprise use.</para>

        <para>Another alternative is to use the LDAP implementation (in
        <filename>alternatives/security/ldap</filename>), which can integrate
        with an LDAP infrastructure if you have one. If you have a different
        security infrastructure, then you might consider to write your own
        implementation (the API is not complex).</para>
      </sect1>

      <sect1>
        <title>Running as a Prototype</title>

        <para></para>

        <para></para>

        <para></para>

        <para>A [[NAME]] application is commonly developed in two stages.
        First it is developed as standalone prototype, running on a single
        machine, with no security, and with all the objects in memory. Then it
        is converted into a deployable application i.e. running on a server
        with multiple clients, with a persistence layer (most commonly in the
        form of the Hibernate Object Store) and with full authentication and
        authorization. (Note that these two phases do not have to be
        sequential, you might prefer to develop your system feature-by-feature
        right through to a deployable version.) In this section we show you
        how to run [[NAME]] Objects as prototype; in the next section we show
        you how to deploy the same domain object model as the real
        application.</para>

        <para>Running a [[NAME]] application generally requires some
        configuration files and images. Resources are typically loaded from
        the working directory, while specific resources can be loaded from the
        class path. Assuming that we will be running from the development
        directory the following structure is typical of a [[NAME]]
        application.</para>

        <screen format="linespecific">project/
    src/
    xat/
    config/
        isis.properties
        passwords
    images/
    build.xml
    :</screen>

        <para></para>

        <sect2>
          <title>Configuration</title>

          <para></para>

          <para></para>

          <para>[[NAME]] loads in one or more properties files during startup.
          The properties files must contain at least a list of services that
          the application uses and commonly there is also a list of fixtures
          that are to be run at startup. In addition to the core properties
          there may be also other properties that are used by other
          components. The file <filename class="directory"
          moreinfo="none">isis.properties</filename> is always loaded up,
          while other properties files relating to specific components are
          only loaded up if the component they relate to is to be is used. For
          example when using the DND viewer the system will also load in the
          file <filename class="directory"
          moreinfo="none">viewer_dnd.properties</filename>, and when using the
          hibernate object store the file <filename class="directory"
          moreinfo="none">persistor_hibernate.properties</filename> is loaded.
          While <filename class="directory"
          moreinfo="none">isis.properies</filename> must exist for the
          framework to start up properly, all other properties files are
          optional.</para>

          <para>The example <filename class="directory"
          moreinfo="none">isis.properties</filename> file below shows a number
          of service classes being listed along with a generic repository for
          accessing Location objects. The prefix is prepended to each class
          name before loading. The second set of properties lists the fixture
          classes to load and instantiate.</para>

          <programlisting format="linespecific">isis.services.prefix=org.apache.isis.example.ecs
isis.services=repository#Location,resources.CustomerRepository, \
  CustomerFactory, BookingFactory, resources.PaymentMethodFactory, \
  resources.PhoneNumberFactory, LocationFactory

isis.fixtures.prefix=org.apache.isis.example.ecs.fixtures
isis.fixtures=CitiesFixture, BookingsFixture, ContextFixture</programlisting>

          <para></para>
        </sect2>

        <sect2>
          <title>Authentication</title>

          <para></para>

          <para></para>

          <para>By default the authentication mechanism is a username/password
          challenge with the details stored in a password file called
          <filename class="directory" moreinfo="none">passwords</filename>.
          This file is a simple list of user names and their corresponding
          passwords separated by a colon. The file below shows two users with
          badly chosen passwords.</para>

          <programlisting format="linespecific">jbrown:pass
tsmith:pass</programlisting>

          <para></para>
        </sect2>

        <sect2>
          <title>Images</title>

          <para></para>

          <para></para>

          <para>The drag and drop and web interfaces both display icons as
          part of the views for each object. Images for these icons, and for
          other uses, are sought in the <filename class="directory"
          moreinfo="none">images</filename> directory. The web interface
          currently only works with GIF images, while the DnD interface will
          work with GIF, PNG and JPEG images. The following shows images for
          the main objects in the ECS example.</para>

          <screen format="linespecific">images
    Booking.gif
    City.gif
    CreditCard.gif
    Customer.gif
    Location.gif
    Telephone.gif
</screen>

          <para></para>
        </sect2>
      </sect1>

      <sect1 id="sec.DeployingAnIsisApplication">
        <title>Deploying an Isis Application</title>

        <para>*** x-ref isis-remoting.</para>

        <para></para>

        <para>Deploying your application depends on whether it is a webapp,
        client/server (DnD) or standalone (DnD). With the current set of
        deployment options it is likely to be one of:</para>

        <itemizedlist>
          <listitem>
            <para>standalone client running with DnD viewer and a local object
            store</para>
          </listitem>

          <listitem>
            <para>client/server over sockets</para>

            <itemizedlist>
              <listitem>
                <para>client running DnD viewer, sockets connection</para>
              </listitem>

              <listitem>
                <para>server running as a standalone app, listening on
                sockets</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para>client/server over HTTP</para>

            <itemizedlist>
              <listitem>
                <para>client running DnD viewer, HTTP requests</para>
              </listitem>

              <listitem>
                <para>server running as a webapp, with HTTP servlet listening
                for requests</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para>webapp, meaning any of:</para>

            <itemizedlist>
              <listitem>
                <para>HTML viewer</para>
              </listitem>

              <listitem>
                <para>Scimpi</para>
              </listitem>

              <listitem>
                <para>Wicket</para>
              </listitem>

              <listitem>
                <para>RESTful</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist>

        <para>Indeed, it's theoretically possible to combine the various
        webapp viewers; for example the server-side HTTP, Scimpi and RESTful
        might all be colocated.</para>

        <para>In all cases you're likely to want to enable authentication and
        authorization; the exact configuration to use here will depend both on
        the implementation chosen (file-based, LDAP or some other) and whether
        running in client/server mode or not.</para>

        <para></para>

        <para></para>

        <para></para>
      </sect1>

      <sect1>
        <title>Other Features</title>

        <para></para>

        <para></para>

        <note>
          <para>TODO: discuss other features, x-ref elsewhere in this
          doc</para>
        </note>

        <para></para>

        <sect2 id="sec.BytecodeProviders">
          <title>Lazy Loading / Dirty Tracking</title>

          <para></para>

          <para></para>
        </sect2>

        <sect2>
          <title>Extending the Isis Meta Model</title>

          <para></para>
        </sect2>

        <sect2 id="sec.Headless">
          <title>Using the Wrapper Prog Model</title>

          <para></para>
        </sect2>

        <sect2 id="sec.OtherLanguages">
          <title>Other Languages</title>

          <para></para>
        </sect2>
      </sect1>
    </chapter>

    <chapter id="building_with_maven">
      <title>Developing with an IDE</title>

      <sect1>
        <title>Using Eclipse for development</title>

        <para>There are two approaches for using Eclipse in
        development.</para>

        <para>The recommended approach is to use the Eclipse's Maven plug-in,
        m2eclipse, obtainable from <ulink
        url="???">http://m2eclipse.sonatype.org/</ulink>. This then allows the
        Maven projects to be imported directly using File &gt; Import &gt;
        Maven Projects.</para>

        <para></para>

        <remark>TODO: would be good to have some screenshots of using
        m2eclipse to import projects here.</remark>

        <para></para>

        <para>In fact, you can use m2eclipse to create the project from the
        archetype in a single go:</para>

        <para></para>

        <para><remark>TODO: would be good to have a screenshot of using
        m2eclipse to generate project using archetype here.</remark></para>

        <para></para>

        <para>Alternatively you can use Maven's Eclipse plug-in to generate
        .project and .classpath files. These can then be imported into Eclipse
        using File &gt; Import &gt; Existing Projects. The remainder of this
        section discusses this alternative approach; to reiterate the
        m2eclipse approach is more straightforward and generally
        preferred.</para>

        <screen>[rcm@localhost ~]$ <emphasis role="bold">cd expenses/</emphasis>
[rcm@localhost expenses]$ <emphasis role="bold">mvn eclipse:eclipse</emphasis>
[INFO] Scanning for projects...
[INFO] Reactor build order: 
[INFO]   [[NAME]] Application
[INFO]   Domain Model
[INFO]   Fixtures
[INFO]   Services
[INFO]   Exploration
[INFO]   Hibernate Object Store
[INFO]   Web App
[INFO]   Client Distribution
[INFO]   Server Distribution
[INFO] Searching repository for plugin with prefix: 'eclipse'.
[INFO] ------------------------------------------------------------------------
[INFO] Building [[NAME]] Application
[INFO]    task-segment: [eclipse:eclipse]
[INFO] ------------------------------------------------------------------------
[INFO] Preparing eclipse:eclipse
:
:
:
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 1 minute 22 seconds
[INFO] Finished at: Thu Oct 02 20:44:41 BST 2008
[INFO] Final Memory: 32M/247M
[INFO] ------------------------------------------------------------------------</screen>

        <para>This downloads all the required libraries and creates
        <filename>.project</filename> and <filename>.classpath</filename>
        files for Eclipse to use. After this is complete we can start up
        Eclipse and import the projects.</para>

        <screen>[rcm@localhost expenses]$ <emphasis role="bold">eclipse -data .</emphasis></screen>

        <screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/eclipse-platform.png" width="40%" />
            </imageobject>
          </mediaobject>
        </screenshot>

        <para>The workspace starts off empty as this is a new project. First
        we need to import the modules using the
        <guimenu>File/Import...</guimenu> menu. On the first page of this
        dialog select the <emphasis role="strong">Existing Project into
        Workspace</emphasis> option.</para>

        <screenshot>
          <screeninfo></screeninfo>

          <mediaobject>
            <imageobject>
              <imagedata fileref="???" />
            </imageobject>
          </mediaobject>
        </screenshot>

        <screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/eclipse-Import.png" width="40%" />
            </imageobject>
          </mediaobject>
        </screenshot>

        <para>After selecting the same directory that we are running in, then
        you select all the modules in the list as Eclipse projects to
        import.</para>

        <screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/eclipse-Import2.png" width="40%" />
            </imageobject>
          </mediaobject>
        </screenshot>

        <para>All the libraries are referenced using a the variable M2_REPO,
        so this needs to be set up in the Classpath variables in the main
        preferences. In the <emphasis>Classpath Variable</emphasis> tab press
        the <guibutton>New...</guibutton> button.</para>

        <screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/eclipse-Preferences%20.png"
                         width="40%" />
            </imageobject>
          </mediaobject>
        </screenshot>

        <para>Enter the name <emphasis>M2_REPO</emphasis> and find the path to
        <filename>.m2/repository</filename>.</para>

        <para>Now to run the application select <guimenu>Run/Run
        Configuration...</guimenu> on the commandline project and browse for
        the class <classname>org.apache.isis.runtime.Isis</classname>. With
        that selected press the <guibutton>Run</guibutton> button.</para>

        <screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/eclipse-Run%20Configurations%20.png"
                         width="40%" />
            </imageobject>
          </mediaobject>
        </screenshot>

        <para>After a short while the login dialog should appear. Logon with a
        valid user name and password, like <emphasis>sven</emphasis> and
        <emphasis>pass</emphasis>.</para>

        <screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/example-Login.png" width="12%" />
            </imageobject>
          </mediaobject>
        </screenshot>

        <para>When the application has finished starting up you should the
        services on the DnD user interface.</para>

        <screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/example-screen.png" width="40%" />
            </imageobject>
          </mediaobject>
        </screenshot>

        <para></para>
      </sect1>
    </chapter>
  </part>

  <part id="prt.Architecture">
    <title>Architecture</title>

    <partintro>
      <para>*** partinfo...</para>
    </partintro>

    <chapter>
      <title>Overview</title>

      <abstract>
        <para>*** yada yada</para>
      </abstract>

      <para>***</para>

      <para></para>

      <sect1>
        <title>Hexagonal Architecture</title>

        <para></para>

        <para>x-ref</para>

        <para></para>

        <para></para>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/HexagonalArchitectureOverview.png"
                       scale="50" />
          </imageobject>
        </mediaobject>

        <para></para>
      </sect1>
    </chapter>

    <chapter>
      <title>Core, Defaults, Alternatives and Viewers</title>

      <abstract>
        <para>*** Explain what each pf the modules are for</para>
      </abstract>

      <para></para>

      <para></para>

      <para></para>

      <sect1>
        <title>Core</title>

        <para>x-ref part 2...</para>

        <para>consists of:</para>

        <itemizedlist>
          <listitem>
            <para>common</para>
          </listitem>

          <listitem>
            <para>test support</para>
          </listitem>

          <listitem>
            <para>metamodel</para>
          </listitem>

          <listitem>
            <para>progmodel</para>
          </listitem>

          <listitem>
            <para>runtime</para>
          </listitem>

          <listitem>
            <para>webapp</para>
          </listitem>

          <listitem>
            <para>webserver</para>
          </listitem>
        </itemizedlist>

        <para></para>
      </sect1>

      <sect1>
        <title>Defaults</title>

        <para></para>
      </sect1>

      <sect1>
        <title>Alternative Implementations</title>

        <para></para>
      </sect1>

      <sect1>
        <title>Other Alternatives</title>

        <para></para>

        <sect2>
          <title>Embedded</title>

          <para></para>
        </sect2>

        <sect2>
          <title>Remoting</title>

          <para></para>
        </sect2>
      </sect1>

      <sect1>
        <title>Viewers</title>

        <para></para>
      </sect1>
    </chapter>

    <chapter>
      <title>Configuration</title>

      <para></para>

      <para></para>
    </chapter>

    <chapter>
      <title>Bootstrapping</title>

      <para></para>

      <para></para>

      <para></para>

      <para>There are two startup mechanisms provided with [[NAME]]: a
      [[NAME]] container; and a web container based on Jetty. Both are run
      from the command line and allow parameters to be specified that control
      its behaviour, determing how logging is performed, what components are
      loaded and so on.</para>

      <para>The [[NAME]] container is run using the
      <classname>Isis</classname> class from the core-runtime module.</para>

      <para>Another way to run [[NAME]] is in a independent web container like
      Tomcat or WebSphere. This process is dealt with later.</para>

      <para></para>

      <para></para>

      <sect1>
        <title>General process</title>

        <para>*** this material is probably better in the runtime module ...
        however we should have something here that describes the main concepts
        and classes.</para>

        <para></para>

        <para>The first thing that happens is the logging is set up so that
        everything can be logged. This attempts to load
        <filename>logging.properties</filename> from the
        <filename>config</filename> directory on the filesystem and if that
        cannot be found it will look for the same file in the same directory
        on the classpath. If neither of these are found then a default logging
        configuration will be programmatically installed that writes to the
        console.</para>

        <para>Now that logging is initialised the container can prepare for
        bootstrapping the system. The first task is load up all the component
        installers, which is done by the InstallerLookupDefault class. This
        reads the <filename>installer-registry.properties</filename> file from
        classpath and attempts to load each class listed. Any class not found
        is logged so it is easy to determine if a component should be
        available. Each installer simply knows how to install a component; the
        component is not loaded at this stage.</para>

        <para>Now the container knows what components are available a series
        of option handlers (<classname>OptionHandler</classname>) are
        intialise, with addtional one provided by the [[NAME]] container and
        web server subclasses. These interact with the Apache CLI library to
        provide details about the command line parameters and will lookup the
        available components so they can be listed on the command line help.
        With the handlers set up the command line is parsed using the Apache
        library. If this parse fails then the library generates a error
        message with an option summary and displays via the console and the
        startup process terminates.</para>

        <para>The last step before bootstrapping starts is to prepare the
        ground for using congfiguration properties. Configuration details are
        loaded by a <classname>ConfigurationBuilder</classname> object and
        will be subsequently placed in an immutable
        <classname>IsisConfiguration</classname> object. Immediately after
        this has been created each handler is visited so that it can, via its
        <methodname>primeConfigurationBuilder</methodname> method, add it
        properties to the builder. This way each command line option is
        converted to one or more properties of the same form as can be
        specified in the properties files, hence we only need one way to
        determine how the system is to be run.</para>

        <para>Now that the ground has been prepared it is time for the
        bootstrapping to begin. This is done via a call to the
        <methodname>bootstrapIsis</methodname> method, which is where the
        process differs for the [[NAME]] container and the web server.</para>

        <para></para>

        <para></para>
      </sect1>

      <sect1>
        <title>Loading configurations</title>

        <para>Configurations are loaded by a
        <classname>ConfigurationBuilder</classname>. The builder should
        immediately create a <classname>Configuration</classname> object, and
        then can be used to add more confiration properties to the
        configuration object, ie properties cannot be added the
        <classname>Configuration</classname> object directly. Properties can
        loaded via the <classname>ConfigurationBuilder</classname> either from
        files, via Properties object, or as key-value pairs. When files are
        loaded they can be specified, via the addConfigurationFile(file name,
        ensure loaded) method, as mandatory or optional. If mandatory then the
        file must exist.</para>

        <para>Although properties can be accessed from the
        <classname>Configuration</classname> object at any point, it should be
        remembered that the properties that it contains only include
        properties that have been loaded so far.</para>

        <para>The default property loader (ConfigurationBuilderDefault) reads
        the file <filename>isis.properties</filename> from the directory
        <filename>config</filename>. The directory can be changed by
        specifying it as the parameter of the single parameter constructor.
        This loader uses Java style property files of the form</para>

        <programlisting>name=value
name2=value2 </programlisting>

        <para></para>

        <para></para>

        <para></para>

        <para>Using properties specified in the configuration files is done by
        get the <classname>IsisConfiguration</classname> singleton from the
        context and using one of the lookup methods to get a value, as the
        example below shows. The <literal
        moreinfo="none">Configuration.ROOT</literal> constant provides the
        base property name ("isis."). If no value is found with the specified
        property name exists then null (or 0 or false) will be
        returned.</para>

        <programlisting format="linespecific">String formatRequired = IsisContext.getConfiguration().getString(Configuration.ROOT + "value.format.date");</programlisting>

        <para></para>
      </sect1>

      <sect1>
        <title>Property naming conventions</title>

        <para>Properties used within the framework start with 'isis', which is
        available from the <literal
        moreinfo="none">Configuration.ROOT</literal> constant. Next is the
        category and optionally a component. Finally is the property name
        (which can be as many levels as needed) for the component. Examples
        are:</para>

        <programlisting format="linespecific">isis.viewer.cli.log
isis.services.prefix
isis.viewer.dnd.specification.view
isis.exploration.users
isis.viewer.html.header</programlisting>
      </sect1>
    </chapter>

    <chapter>
      <title>Facet Decorators</title>

      <para></para>

      <para></para>

      <sect1>
        <title>Introduction</title>

        <para></para>
      </sect1>

      <sect1>
        <title>Existing Facet Decorators</title>

        <para></para>
      </sect1>
    </chapter>

    <chapter>
      <title>Diagnostics</title>

      <para></para>

      <para>The NOF provides a number of tools to help resolve problems and
      debug the system. These are mainly applicable to issues within system
      code, but some of them can be useful when developing applications. The
      framework provides the following:-</para>

      <itemizedlist>
        <listitem>
          <para>Extensive use of logging through the <ulink
          url="http://logging.apache.org/log4j/docs/">Log4j</ulink> framework,
          an open source logging framework made available as part of the
          Apache Jakarta project ;</para>
        </listitem>

        <listitem>
          <para>Additional logging decorators that can be explicitly added to
          specific component to capture details about the usage of those
          components;</para>
        </listitem>
      </itemizedlist>

      <para>In addition, the DnD viewer provides debug views that display
      details of components and anything else that implements the
      <classname>DebugInfo</classname> interface. There is further coverage of
      this last feature in the DnD viewer's documentation.</para>

      <para></para>

      <sect1>
        <title>Logging</title>

        <para>Logging using Log4j is used throughout the NOF and the
        components the [[NAME]] Group have created and it recommended that you
        use it too. Logging allows you to look what the framework and
        components have been when you investigate a problem and help to
        identify what parts of the system where doing what before an problem
        arose. Often logging alone is enough to pin point a problem, but if
        not it help you target what to investigate.</para>

        <para>Log4j allows you to log log debug messages, information about
        the system's state, warnings and errors. These events can be displayed
        on the console, written to files, or sent out over the network for
        remote logging. These are output in a user defined format and also can
        be filtered (so only events from certain components are seen). All
        this is configured through a set of properties passed to Log4J.</para>

        <sect2>
          <title>Configuring Logging</title>

          <para>The complete options for outputting and formatting can be
          found in the relavent Log4J documentation (including the API).
          However, it crucial to smooth development of an NOF system that will
          cover some of it here. The NOF configures Log4j using properties
          files and will generally load <filename class="directory"
          moreinfo="none">log4j.properties</filename> or retrieve the
          properties from the that were loaded from <filename
          class="directory" moreinfo="none">isis.properties</filename> after
          that is loaded for framework configuration (these files need to be
          located in the working directory). If you are not using classes
          within the NOF to start the framework then how these properties are
          loaded could vary. The downside of putting the logging properities
          in the framework properties files is that there is no logging until
          it has been loaded. If this is necessary then it is better to use
          the separate properties file.</para>

          <para>The following file, or portion of a file, is a basic
          configuration for logging. It consists of two appenders and a basic
          logging configuration.</para>

          <programlisting format="linespecific">log4j.rootLogger=INFO, Console, File

# The console appender
log4j.appender.Console=org.apache.log4j.ConsoleAppender
log4j.appender.Console.Target=System.out
log4j.appender.Console.layout=org.apache.log4j.PatternLayout
log4j.appender.Console.layout.ConversionPattern=%-5r [%-20c{1} %-10t %-5p]  \t\t%m%n

# The exploration.log file appender
log4j.appender.File=org.apache.log4j.FileAppender
log4j.appender.File.File=exploration.log
log4j.appender.File.layout=org.apache.log4j.PatternLayout
log4j.appender.File.layout.ConversionPattern=%-4r %-5p [%t] %37c %3x - %m%n
log4j.appender.File.Append=false</programlisting>

          <para>The first line sets up logging to show events of level
          <emphasis>INFO</emphasis> and above through the
          <emphasis>Console</emphasis> and <emphasis>File</emphasis>
          appenders, which writes those events to the console and the file
          <filename class="directory"
          moreinfo="none">exploration.log</filename> respectively. The two
          blocks sepcifiy how to write to the console and the file. Other
          appenders can be used to change where the logs are written to. The
          number of appenders specified is unlimited, although there should be
          at least one. The console below (from Eclipse) shows the log. The
          file will contain the same thing although the formatting will be
          slightly different as the conversion pattern for the two appenders
          is different.</para>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/console-log.png" />
            </imageobject>
          </mediaobject>

          <sect3>
            <title>Logging levels</title>

            <para>The types of events that are logged can be changed. This
            determines how large the files become or how much traffic is put
            over the network, and is reflected in the amount of processing
            that needs to be done to process the events into messages that can
            be written out. Levels in order of increasing verbosity and log
            size, and is decreasing order of severity are:-</para>

            <itemizedlist>
              <listitem>
                <para>OFF - no logging</para>
              </listitem>

              <listitem>
                <para>FATAL - something very serious has happened that
                requires the system to be shut down.</para>
              </listitem>

              <listitem>
                <para>ERROR - something serious has happened that might affect
                any subsequent actions.</para>
              </listitem>

              <listitem>
                <para>WARN - something has not been set up properly, or needs
                attention. Although subsequent action might function
                correctly, they might not function as expected.</para>
              </listitem>

              <listitem>
                <para>INFO - information to the developer about something that
                has taken place.</para>
              </listitem>

              <listitem>
                <para>DEBUG - detailed information for the developer.</para>
              </listitem>
            </itemizedlist>

            <para>So in the above example to increase the logging level to
            debug change the first part of the property to
            <emphasis>DEBUG</emphasis> from <emphasis>INFO</emphasis> as
            below:</para>

            <programlisting format="linespecific">log4j.rootLogger=DEBUG, Console, File</programlisting>

            <para>Logging should almost never be set to off, but should at
            least be set to log the errors (unsing level ERROR). Whilst
            developing we recommend that you set your basic level to INFO and
            switch to DEBUG if you need to investigate something.</para>

            <para>Setting the logging level via the properties file applies
            that level at startup and cannot be changed using the properties,
            ie, that level will be used to filter all logged event while the
            system is running. If you are using the Skylark viewer, however,
            you can use the debug options to change the logging level on the
            client at any time. By using Ctrl-Shift-right-click on the desktop
            you will be shown the debug menu and see the following
            options:-</para>

            <mediaobject>
              <imageobject>
                <imagedata align="left" fileref="images/logging-debug.png"
                           format="PNG" />
              </imageobject>
            </mediaobject>

            <para>The greyed-out option indicates the current level.
            Selectiing one of the other levels will change the logging to that
            level.</para>
          </sect3>

          <sect3>
            <title>Limiting logging by class</title>

            <para>As well as limiting the level of events that are logged, we
            can also specify which classes we are interested in capturing log
            events for. In Log4j events are organised by loggers, which are
            set up programmatically, but as we create a logger for each class
            we talk about classes.</para>

            <para>To change the levels of events captured according to the
            class where the log event was created we can class based
            requirements after the root logger is specified. To set a logging
            level for a class add a property in the form</para>

            <programlisting format="linespecific">log4j.logger.&lt;package to log&gt;=&lt;level for package&gt;
log4j.logger.&lt;class to log&gt;=&lt;level for class&gt;</programlisting>

            <para>Events for the specified packages or class will be logged at
            the specified level, overriding the root level set up first. So
            for example the following configuration:</para>

            <programlisting format="linespecific">log4j.rootLogger=WARN, Console

log4j.logger.org.apache.isis.object=INFO
log4j.logger.org.apache.isis.object.reflect=DEBUG
log4j.logger.org.apache.isis.object.persistence=DEBUG

log4j.logger.org.apache.isis.object.loader.ObjectLoaderImpl=OFF</programlisting>

            <para>will capture warning and errors for all classes (as defined
            by the root logger), and information messages for those classes
            whose package begins with
            <classname>org.apache.isis.object</classname>. In addition those
            classes beginning with <classname>org.apache.isis.object.reflect
            </classname>or
            <classname>org.apache.isis.object.persistence</classname> will
            have their debug events captured as well. Finally, the class
            <classname>ObjectLoader</classname> will have all of its events
            ignored.</para>

            <para>It is important to make use of this feature when using the
            Skylark viewer as it logs events about it rendering. In Java
            rendering the screen (via the
            <methodname>paint(Graphics)</methodname> method) happens very
            often and can cause the logs to be swamped with superflous events.
            The logger for these events are prepended with the text 'ui.' so
            we can disable all of these events across all the viewing classes
            by adding the following to the properties:</para>

            <programlisting format="linespecific">log4j.logger.ui=OFF</programlisting>
          </sect3>

          <sect3>
            <title>Writing XML log files</title>

            <para>By writing out the logs to a file in XML rather than as text
            allows you to look at the log using Chainsaw, a Log4j viewer. This
            tool allows you to quickly look at events in specific classes and
            hide events that are of no interest by setting up simple
            conditions.</para>

            <para>To write out an XML file the same appender as before is
            used, but the layout is changed. The following configuration logs
            all events (DEBUG and greater) to a file with an XML
            layout.</para>

            <programlisting format="linespecific">log4j.rootLogger=DEBUG, XmlFile

log4j.appender.XmlFile=org.apache.log4j.FileAppender
log4j.appender.XmlFile.file=isis.log.xml
log4j.appender.XmlFile.layout=org.apache.log4j.xml.XMLLayout
log4j.appender.XmlFile.append=false</programlisting>
          </sect3>

          <sect3>
            <title>Writing HTML log files</title>

            <para>HTML files can be viewed in a web browser and will display
            nicely in most email clients. Change the appender to use the
            <classname>HTMLLayout</classname> class.</para>

            <programlisting format="linespecific">log4j.appender.Snapshot.layout=org.apache.log4j.HTMLLayout</programlisting>
          </sect3>
        </sect2>

        <sect2>
          <title>Snapshot appenders</title>

          <para>The NOF provides a number of appenders that create a snapshot
          of the recently logged events instead of capturing all events since
          the system started. The benefits here are twofold. First, writing to
          the appenders is minimised as they are only written when errors
          occur or the user demands it. Second, the partial log can be
          automatically sent over the network to someone who needs to know
          when things have gone wrong.</para>

          <para>All the snapshot appends support the same basic
          properties:-</para>

          <itemizedlist>
            <listitem>
              <para><emphasis> <methodname>addInfo</methodname>
              </emphasis></para>

              <para>(boolean) indicates whether to prepend details about the
              machine, os and Java to log, eg</para>

              <programlisting format="linespecific">Snapshot:- Thu Dec 01 14:34:24 GMT 2005
  R Matthews
  Windows XP (x86) 5.1
  Java HotSpot(TM) Client VM 1.4.2_04-b05
  Version  000000</programlisting>
            </listitem>

            <listitem>
              <para><emphasis> <methodname>bufferSize</methodname>
              </emphasis></para>

              <para>(integer) the number of events to write out to the
              snapshot. Defaults to 512 events.</para>
            </listitem>

            <listitem>
              <para><emphasis> <methodname>locationInfo</methodname>
              </emphasis></para>

              <para>(boolean) whether to capture the details of where in the
              code the event was generated. Note - capturing this information
              can be quite expensive.</para>
            </listitem>

            <listitem>
              <para><emphasis> <methodname>evaluatorClass</methodname>
              </emphasis></para>

              <para>(<classname>org.apache.log4j.spi.TriggeringEventEvaluator</classname>)
              a trigger that determines when a snapshot should be created. The
              trigger object is given each event that is logged and flags when
              to produce a snapsho.</para>

              <para>When not trigger is specified a default trigger is applied
              that triggers a snapshot when an event of level ERROR or FATAL
              occurs.</para>
            </listitem>
          </itemizedlist>

          <sect3>
            <title>File snapshot appender</title>

            <para>The <classname>FileSnapshotAppender</classname> writes the
            snapshot to timestamped file. The following properties can be
            specified:-</para>

            <itemizedlist>
              <listitem>
                <para><emphasis><methodname>directory</methodname></emphasis></para>

                <para>The directory path where the files are to be created. If
                none is specified then the working directory will be
                used.</para>
              </listitem>

              <listitem>
                <para><emphasis><methodname>extension</methodname></emphasis></para>

                <para>The extension type to append to the file name.</para>
              </listitem>

              <listitem>
                <para><emphasis><methodname>fileName</methodname></emphasis></para>

                <para>The base name of the log file, which will have timestamp
                appended. Defaults to 'log-snapshot-'.</para>
              </listitem>
            </itemizedlist>

            <para>The following example writes xml snapshots to the logs
            directory to files ending with '.xml'.</para>

            <programlisting format="linespecific">log4j.appender.Snapshot=org.apache.isis.utility.logging.FileSnapshotAppender
log4j.appender.Snapshot.bufferSize=1024
log4j.appender.Snapshot.addInfo=true
log4j.appender.Snapshot.locationInfo=true
log4j.appender.Snapshot.directory=logs
log4j.appender.Snapshot.extension=xml
log4j.appender.Snapshot.layout=org.apache.log4j.xml.XMLLayout</programlisting>
          </sect3>

          <sect3>
            <title>Popup snapshot appender</title>

            <para>The <classname>PopupSnapshotAppender</classname> displays a
            popup dialog showing the snapshot.</para>

            <mediaobject>
              <imageobject>
                <imagedata align="left" fileref="images/popup-snapshot.png"
                           format="PNG" width="12.5cm" />
              </imageobject>
            </mediaobject>

            <para>Do not use this on a server as there will be no one sitting
            in front of it to see it. It has no properties so its
            configuration is short.</para>

            <programlisting format="linespecific">log4j.appender.Popup=org.apache.isis.utility.logging.PopupSnapshotAppender
log4j.appender.Popup.layout=org.apache.log4j.PatternLayout
log4j.appender.Popup.layout.ConversionPattern=%-5r [%-20c{1} %-10t %-5p]  %m%n
</programlisting>
          </sect3>

          <sect3>
            <title>Email snapshot appender</title>

            <para>The <classname>SmtpSnapshotAppender</classname> generates an
            email with the snapshot in it and sends it to a specified
            recipient. The following properties can be specified:-</para>

            <itemizedlist>
              <listitem>
                <para><emphasis><methodname>server</methodname></emphasis></para>

                <para>Address of the email server</para>
              </listitem>

              <listitem>
                <para><emphasis><methodname>port</methodname></emphasis></para>

                <para>The port the server listen on for SMTP requests.
                Defaults to port 25.</para>
              </listitem>

              <listitem>
                <para><emphasis><methodname>recipient</methodname></emphasis></para>

                <para>Email address to send the snapshot to.</para>
              </listitem>

              <listitem>
                <para><emphasis><methodname>domain</methodname></emphasis></para>

                <para>The address that client connects to the server with.
                Some email servers validate the sender's address in the MAIL
                FROM command so you may need to specify a real address
                here.</para>
              </listitem>
            </itemizedlist>

            <para>The following example sends a short HTML snapshot logs to
            logs@support.acme.com, via the email server at my.emailserver.com
            using port 25.</para>

            <programlisting format="linespecific">log4j.appender.EmailSnapshot=org.apache.isis.utility.logging.SmtpSnapshotAppender
log4j.appender.EmailSnapshot.bufferSize=50
log4j.appender.EmailSnapshot.addInfo=true
log4j.appender.EmailSnapshot.server=my.emailserver.com
log4j.appender.EmailSnapshot.port=25
log4j.appender.EmailSnapshot.recipient=logs@support.acme.com
log4j.appender.EmailSnapshot.layout=org.apache.log4j.HTMLLayout</programlisting>
          </sect3>

          <sect3>
            <title>Socket snapshot appender</title>

            <para>The <classname>SocketSnapshotAppender</classname>
            establishes a socket connection to a server and passes across the
            the snapshot. This is designed to be used with
            <classname>SnapshotServer</classname>, which collects collects
            snapshots from multiple clients.</para>

            <para>The following example sends an XML snapshot to a server on a
            private network.</para>

            <programlisting format="linespecific">log4j.appender.SocketSnapshot=org.apache.isis.utility.logging.SocketSnapshotAppender
log4j.appender.SocketSnapshot.bufferSize=1024
log4j.appender.SocketSnapshot.addInfo=true
log4j.appender.SocketSnapshot.server=191.168.1.1
log4j.appender.SocketSnapshot.port=12345
log4j.appender.SocketSnapshot.layout=org.apache.log4j.xml.XMLLayout</programlisting>

            <para>The snaphot server should be directed to a maching running
            the server. The server is run using the following command:</para>

            <screen format="linespecific">java -cp isis.jar org.apache.isis.utility.logging.SnapshotServer</screen>

            <para></para>

            <para>The server needs a properties file with the following
            properties defined (with the prefix
            <methodname>isis.snapshotserver.</methodname>):-</para>

            <itemizedlist>
              <listitem>
                <para><emphasis><methodname>server</methodname></emphasis></para>

                <para>Address of the server.</para>
              </listitem>

              <listitem>
                <para><emphasis><methodname>port</methodname></emphasis></para>

                <para>The port the server listens on for logging requests.
                Defaults to port 9289.</para>
              </listitem>

              <listitem>
                <para><emphasis><methodname>directory</methodname></emphasis></para>

                <para>The directory path where the transferred files are to be
                saved. If none is specified then the working directory will be
                used.</para>
              </listitem>

              <listitem>
                <para><emphasis><methodname>fileName</methodname></emphasis></para>

                <para>The base name of the log file, which will have timestamp
                appended. Defaults to 'log-snapshot-'.</para>
              </listitem>

              <listitem>
                <para><emphasis><methodname>extension</methodname></emphasis></para>

                <para>The extension type to append to the file name.</para>
              </listitem>
            </itemizedlist>

            <para>An example configuration would be:-</para>

            <programlisting format="linespecific">isis.snapshotserver.port=12345
isis.snapshotserver.directory=logs
isis.snapshotserver.filename=log
isis.snapshotserver.extension=xml</programlisting>
          </sect3>

          <sect3>
            <title>Web snapshot appender</title>

            <para>The <classname>WebSnapshotAppender</classname> sends the
            snapshot to a web server. The following properties can be
            specified:-</para>

            <itemizedlist>
              <listitem>
                <para><emphasis><methodname>url</methodname></emphasis></para>

                <para>URL of server to post data to (including the protocol
                'http').</para>
              </listitem>

              <listitem>
                <para><emphasis><methodname>proxyAddress</methodname></emphasis></para>

                <para>Address of web proxy if one is being used.</para>
              </listitem>

              <listitem>
                <para><emphasis><methodname>proxyPort</methodname></emphasis></para>

                <para>Port of proxy server.</para>
              </listitem>
            </itemizedlist>

            <para>The following example sends a default length snapshot to the
            webserver.</para>

            <programlisting format="linespecific">log4j.appender.Remote=org.apache.isis.utility.logging.WebSnapshotAppender
log4j.appender.Remote.addInfo=true
log4j.appender.Remote.locationInfo=true
log4j.appender.Remote.url=http://192.168.1.3/support/test.php
log4j.appender.Remote.layout=org.apache.log4j.HTMLLayout</programlisting>

            <para>This appender use the HTTP POST method to upload the data.
            It passes up a message and the snapshot as two parameters to the
            request: <varname>error</varname> and
            <varname>trace</varname>.</para>
          </sect3>
        </sect2>

        <sect2>
          <title>Using logging to get help</title>

          <para>When you are working with someone else it is often useful to
          send details of what is happening including screenshots, code, and
          logs. To make the other person's life easier provide as much
          information as possible:</para>

          <itemizedlist>
            <listitem>
              <para>Detail the version of the framework and the platform (Java
              or .Net) you are using</para>
            </listitem>

            <listitem>
              <para>Describe the problem in detail</para>
            </listitem>

            <listitem>
              <para>Provide screenshots (as a <filename class="directory"
              moreinfo="none">.gif</filename> or <filename class="directory"
              moreinfo="none">.png</filename>, avoid jpegs and Word documents)
              that shows the problem</para>
            </listitem>

            <listitem>
              <para>Provide log files from both the client and the server in
              an XML format so they can be viewed using Chainsaw</para>
            </listitem>

            <listitem>
              <para>Include your contact details, preferrably you email
              address</para>
            </listitem>
          </itemizedlist>

          <para>Collate all this information ensuring each file is clearly
          named. Then zip up (or tar) the whole set (as the logs, in
          particular, can be huge) and email the compressed file.</para>
        </sect2>

        <sect2>
          <title>Adding logging to your code</title>

          <para>It is recommended that you also add logging to your code,
          particularly if you are developing a component or extending the
          framework in some way. This way you will be able to see the
          interaction of your classes with those of the NOF. The following
          lays out how the framework uses Log4j, and hence how you should use
          it to be consistent.</para>

          <para>Simple ensure that any class that does any logging makes a
          <classname>Logger</classname> available. By convention the name is
          always <varname>LOG</varname>. The name of the logger should be the
          name of the class in its fully qualified form. To make this easy use
          the constructor that takes a <classname>Class</classname> object and
          pass in your class using as shown here. Don't forget to add an
          import to <classname>org.apache.log4j.Logger</classname>, not the
          class of the same name in the NOF or in Java itself.</para>

          <programlisting format="linespecific">private final static Logger LOG = Logger.getLogger([[NAME]]Class.class);</programlisting>

          <para>Where you wish to add log message add a statement like the
          following, deciding first what level the event should be classified
          as (see above); the available methods are
          <methodname>debug</methodname>, <methodname>info</methodname>,
          <methodname>warn</methodname>, <methodname>error</methodname> and
          <methodname>fatal</methodname>.</para>

          <programlisting format="linespecific">LOG.debug("mark as dirty " + object);

LOG.error("failed to create instance of " + this, e);</programlisting>

          <para>The first statement in this example contains just a message,
          while the second version logs a message and, separately, the
          complete stack trace.</para>

          <sect3>
            <title>Making you classes useful in logs</title>

            <para>To make the most of logging, even if you don't log anything
            in you code, make sure that you declare a
            <methodname>toString</methodname> method in each of you classes.
            This way when a log message is created that references your object
            the message will show your object in detail rather than like
            this:</para>

            <screen format="linespecific">MyObject@33D4</screen>

            <para>A suitable toString can cause it to be rendered more
            usefully such as:</para>

            <screen format="linespecific">MyObject [name=windows,size=34x20]</screen>
          </sect3>
        </sect2>
      </sect1>

      <sect1>
        <title>Component loggers</title>

        <para>The NOF provides a set of component loggers that specifically
        log the use of a component, adding additional log messages to the
        Log4j log or write out to a separate file. Additional logger can also
        be defined for other components. These logger are designed to log the
        parameters passed to and the the results return from the requests to a
        component and tend to be more verbose than the general logging just
        discussed. At present the following components have loggers
        available:-</para>

        <itemizedlist>
          <listitem>
            <para>The object persistor -
            <classname>ObjectPersistorLogger</classname></para>
          </listitem>

          <listitem>
            <para>The object store -
            <classname>ObjectStoreLogger</classname></para>
          </listitem>

          <listitem>
            <para>The distibution interface -
            <classname>DistributionLogger</classname></para>
          </listitem>
        </itemizedlist>

        <para>To set up a logger create an instance of it passing in the
        object you are logging. Then use the logger instance in place of the
        original component. The constructors for each of the loggers are
        overloaded so they take a component to decorate and possibly a file
        name. If the filename is specified then the logging is done to that
        file. If there is no file name then the events are logged via Log4j.
        For example the object store persistor would logged by
        replacing:</para>

        <programlisting format="linespecific">ObjectAdapterPersistor persistor = new ObjectStorePersistor();
isis.setObjectPersistor(persistor);</programlisting>

        <para>with this, which will log request to the persistor the <filename
        class="directory" moreinfo="none">sever-persistor.log</filename>
        file:</para>

        <programlisting format="linespecific">ObjectAdapterPersistor persistor = new ObjectStorePersistor();
persistor = new ObjectManagerLogger(persistor, "server-persistor.log");
isis.setObjectPersistor(persistor);</programlisting>

        <para>Please note that the log files, when used, are created when the
        logger is instantiated and will overwrite any exsiting file. This is
        not normally a problem as we are interested in the activities during
        an entire session. However on a stateless server where the component
        is being recreated each time the continual recreation of the file
        could be a problem.</para>

        <sect2>
          <title>Defining a logger</title>

          <para>To define a logger extend the Logger class, providing a
          suitable constructor, and implement the
          <methodname>getDecoratedClass</methodname> so it passes back the
          <classname>Class</classname> object of the class being decorated
          (this allows the Log4j logger to log messages as that class rather
          than as a separate class). Within the subclass you can use the
          following methods:</para>

          <itemizedlist>
            <listitem>
              <para><emphasis> <methodname>void log(String
              message)</methodname> </emphasis></para>

              <para>output a log entry with the specified message.</para>
            </listitem>

            <listitem>
              <para><emphasis> <methodname>void log(String message, Object
              result)</methodname> </emphasis></para>

              <para>output a log entry with the specified message and the
              specified result. This is useful when needing to show both the
              entry and exit states, or the paramters and the return
              value.</para>
            </listitem>

            <listitem>
              <para><emphasis> <methodname>void close()</methodname>
              </emphasis></para>

              <para>closes the file that is being written to.</para>
            </listitem>
          </itemizedlist>
        </sect2>
      </sect1>

      <sect1>
        <title>Writing code to help investigate problems</title>

        <sect2>
          <title>The Dump Utility</title>

          <para>The <classname>org.apache.isis.object.Dump</classname> class
          provides a simple way out outputting the details of adapters and
          specifications. The two <methodname>specification
          </methodname>methods detail the specified
          <classname>ObjectSpecification</classname> as follows:-</para>

          <screen format="linespecific">Full Name: bom.Location
Short Name: Location
Plural Name: Locations
Singular Name: Location

Abstract: false
Lookup: false
Object: true
Value: false
Persistable: User Persistable
Superclass: java.lang.Object
Subclasses: empty
Interfaces: bom.Common
Fields
    OneToOneAssociationImpl@1408a92 [type=VALUE,id=type,label='Type',derived=false,type=Option]
    :
    :</screen>

          <para>The two <methodname>object</methodname> methods detail the
          specified <classname>[[NAME]]</classname> object as follows:-</para>

          <screen format="linespecific">Specification: bom.Location
Class: bom.Location
Adapter: org.apache.isis.object.defaults.PojoAdapter
Hash: #dada24
Title: test, Fort Worth
Object: bom.Location@18e4327
OID: OID#2F
State: ResolveState@1e1be92 [name=Resolved,code=PR]
Version: LongNumberVersion#1 20051118-025400170
Icon: null
Persistable: User Persistable</screen>

          <para>The two <methodname>graph</methodname> methods detail the
          specified <classname>[[NAME]]</classname> object as follows, showing
          each adapter, it associated objects and values:-</para>

          <screen format="linespecific">PojoAdapter@dada24 [PR:OID#2F,specification=Location,version=LongNumberVersion#1 20051118-025400...
    +--type: POJO BusinessValueAdapter: One
    +--knownas: POJO TextStringAdapter: test
    +--streetaddress: POJO TextStringAdapter: address
    +--city: PojoAdapter@b51404 [PR:OID#C,specification=City,version=LongNumberVersion#1 ...
    |    +--name: POJO TextStringAdapter: Fort Worth
    +--customer: PojoAdapter@92dcdb [PR:OID#1C,specification=Customer,version=LongNumberVers...
    |    +--firstname: POJO TextStringAdapter: Richard
    |    +--lastname: POJO TextStringAdapter: Pawson
    |    +--phonenumbers: VectorCollectionAdapter@1d381d2 [PR:-,specification=Vector,version=...
    : 
    :</screen>
        </sect2>
      </sect1>
    </chapter>
  </part>

  <part id="prt.CoreModules">
    <title>Core Modules</title>

    <chapter>
      <title>Test Support</title>

      <para>The testsupport module holds helper classes to support writing
      unit tests in either JUnit or JMock.</para>

      <para>It should only ever be added as a dependency with a scope of
      test.</para>

      <para></para>
    </chapter>

    <chapter>
      <title>Common</title>

      <abstract>
        <para>***</para>
      </abstract>

      <para></para>

      <para></para>

      <para></para>

      <sect1>
        <title></title>

        <para></para>

        <para>The core commons module provides a set of common utilities and
        language extensions for use across the rest of the framework.</para>

        <para>It also defines a number of small APIs that are used
        throughout:</para>

        <itemizedlist>
          <listitem>
            <para>a set of interfaces for defining Components and their
            scope</para>
          </listitem>

          <listitem>
            <para>a debug framework</para>
          </listitem>

          <listitem>
            <para>an Ensure API</para>
          </listitem>

          <listitem>
            <para>a set of Hamcrest Matchers</para>
          </listitem>

          <listitem>
            <para>a ResourceStream API</para>
          </listitem>

          <listitem>
            <para>a Filter API</para>
          </listitem>

          <listitem>
            <para>a Future API</para>
          </listitem>
        </itemizedlist>

        <para></para>

        <para></para>
      </sect1>

      <sect1>
        <title>Scopes</title>

        <para></para>

        <para></para>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/architecture.gif" scale="30" />
          </imageobject>
        </mediaobject>

        <para></para>
      </sect1>
    </chapter>

    <chapter>
      <title>MetaModel</title>

      <para></para>

      <para></para>

      <para></para>

      <para></para>

      <sect1>
        <title></title>

        <para></para>

        <para>The core metamodel module defines the interfaces and classes
        that make up the Apache Isis metamodel. The metamodel is used in
        numerous ways, including:</para>

        <itemizedlist>
          <listitem>
            <para>by viewers to obtain information about the domain objects,
            so that they can be rendered in a generic object-oriented user
            interface;</para>
          </listitem>

          <listitem>
            <para>by object stores (the default and some of the alternatives)
            to determine which data is to be persisted;</para>
          </listitem>

          <listitem>
            <para>by remoting, to marshall domain objects automatically
            between different tiers;</para>
          </listitem>

          <listitem>
            <para>by the core runtime, to provide the ability to provide XML
            Snapshots (through the XmlSnapshot utility class). The metamodel
            module does not itself define the programming model conventions;
            that is the responsibility of the core progmodel.</para>
          </listitem>
        </itemizedlist>

        <para></para>
      </sect1>

      <sect1>
        <title>ObjectAdapter and ObjectSpecification</title>

        <para></para>
      </sect1>

      <sect1>
        <title>ObjectMember hierarchy</title>

        <para></para>
      </sect1>

      <sect1>
        <title>Similarity between Properties and Parameters</title>

        <para></para>
      </sect1>

      <sect1>
        <title>Oid</title>

        <para></para>

        <para>An Oid is an object identifier, assigned by the runtime. For
        persisted objects it is value is assigned by the object store, but for
        transient objects the framework still assigns an Oid also (and will
        update the Oid if the object is persisted). </para>

        <para></para>
      </sect1>

      <sect1>
        <title>FacetFactory</title>

        <para></para>
      </sect1>

      <sect1>
        <title>MethodFilteringFacetFactory</title>

        <para></para>
      </sect1>

      <sect1>
        <title>MethodPrefixBasedFacetFactory</title>

        <para></para>
      </sect1>

      <sect1>
        <title>PropertyOrCollectionIdentifyingFacetFactory</title>

        <para></para>

        <para></para>
      </sect1>

      <sect1>
        <title>InteractionAdvisor</title>

        <para></para>

        <para></para>

        <sect2>
          <title>HidingInteractionAdvisor</title>

          <para></para>
        </sect2>

        <sect2>
          <title>DisablingInteractionAdvisor</title>

          <para></para>
        </sect2>

        <sect2>
          <title>ValidatingInteractionAdvisor</title>

          <para></para>
        </sect2>
      </sect1>

      <sect1>
        <title>PropertyOrCollectionIdentifyingFacetFactory</title>

        <para></para>
      </sect1>

      <sect1>
        <title>Reflector Properties</title>

        <sect2>
          <title>FacetDecorator</title>

          <para></para>

          <para>*** gonna try to get rid of.</para>

          <para></para>

          <para>The reflector facet-decorators property specifies a list of
          <classname>FacetDecoratorInstaller</classname> objects that should
          be installed and registered with the reflector. These decorators
          decorate specific facets of the metamodel, allowing it change or
          modify their behaviour. This allows us to add internationalization,
          help look up and other features. Although transaction management is
          also achieved by decorating the reflector this is done automatically
          and does not need to be specified using this property. The following
          example adds a single decorator that provide internationalization
          via resource files.</para>

          <programlisting format="linespecific">isis.reflector.facet-decorators=resource-i18n</programlisting>

          <para></para>

          <para></para>

          <para></para>
        </sect2>
      </sect1>

      <sect1 id="i18n-files" label="">
        <title>Internationalization resource files</title>

        <sect2>
          <title>Files</title>

          <para>Translated names, descriptions and help text for a specific
          language should be held in a file named in the following
          format:</para>

          <screen format="linespecific">i18n_&lt;language code&gt;_&lt;country code&gt;.properties</screen>

          <para>The language and country codes must reflect the translated
          language are ISO standards and are detailed in the <link
          linkend="locale">Locale section</link>.</para>

          <para>Theses files must be on the root of the class path, otherwise
          they cannot be loaded.</para>
        </sect2>

        <sect2>
          <title>Properties</title>

          <para>Each property can have a line for each of the name,
          description and help text. The format for each is shown
          below.</para>

          <programlisting format="linespecific">&lt;fully qualified class name&gt;.property.&lt;property name&gt;.name=&lt;translated name&gt;
&lt;fully qualified class name&gt;.property.&lt;property name&gt;.description=&lt;translated description&gt;
&lt;fully qualified class name&gt;.property.&lt;property name&gt;.help=&lt;translated help&gt;</programlisting>

          <para>The class name must be fully qualified and the property name
          is the short name provided by the reflector. All the values are case
          sensitive. The following shows the translated name and description
          being specified for the property <emphasis>fullName</emphasis>,
          which is defined by the <methodname>getFullName</methodname>
          method.</para>

          <programlisting format="linespecific">example.dom.Contact.property.fullName.name=Nom
example.dom.Contact.property.fullName.description=Le nom complet du client</programlisting>
        </sect2>

        <sect2>
          <title>Collections</title>

          <para><remark>TODO: presumably i18n is supported for collections,
          too?</remark></para>
        </sect2>

        <sect2>
          <title>Actions</title>

          <para>Actions are specified in a similar fashion to properties but
          with the keyword <emphasis>action</emphasis> instead of
          <emphasis>property</emphasis>. Parameters within an action can also
          be translated by inserting <emphasis>parameter</emphasis> and a
          number before the keyword. Each parameter must be numbered to show
          its position, starting from one (1), eg
          <emphasis>parameter1</emphasis>, <emphasis>parameter2</emphasis>
          etc.</para>

          <programlisting format="linespecific">&lt;fully qualified class name&gt;.action.&lt;action name&gt;.name=&lt;translated name&gt;
&lt;fully qualified class name&gt;.action.&lt;action name&gt;.description=&lt;translated description&gt;
&lt;fully qualified class name&gt;.action.&lt;action name&gt;.help=&lt;translated help&gt;

&lt;fully qualified class name&gt;.action.&lt;action name&gt;.parameter&lt;index&gt;.name=&lt;translated name&gt;
&lt;fully qualified class name&gt;.action.&lt;action name&gt;.parameter&lt;index&gt;.description=&lt;translated description&gt;
&lt;fully qualified class name&gt;.action.&lt;action name&gt;.parameter&lt;index&gt;.help=&lt;translated help&gt;</programlisting>

          <para>The class name must be fully qualified and the action name is
          the short name provided by the reflector. All the values are case
          sensitive. The following shows the translated action name and
          description, and two parameter names being specified for the action
          <emphasis>createPhone</emphasis>, which is defined by the
          <methodname>createPhone</methodname> method.</para>

          <programlisting format="linespecific">example.dom.Contact.action.createPhone.name=Nouveau téléphone
example.dom.Contact.action.createPhone.parameter1.name=Indicatif de zone
example.dom.Contact.action.createPhone.parameter2.name=Nombre
example.dom.Contact.action.createPhone.description=Créez un nouveau téléphone et ajoutez-le au contact actuel</programlisting>

          <para></para>
        </sect2>
      </sect1>

      <sect1>
        <title>Using the reflector</title>

        <para></para>

        <para>When the framework starts up it is told about the service
        objects that are provided by DOM and any referenced class is then
        introspected to build up the model of the known domain objects. Any
        other domain classes that are subsequently used will also be reflected
        upon as they are used (this will happen when there are classes that
        have no direct references from the service objects, typically because
        the references are for abstract types and not concrete ones). With the
        model in place clients can then determine how to interact with the
        domain model. Each domain class that is in use by the framework has a
        corresponding <classname>ObjectSpecification</classname> detailing the
        properties and structure of the domain class. Properties include the
        classes variouse names (full, short, singular and plural names), a
        description and flags indicating various features. The structure of
        the object includes related classes (superclass, subclasses and
        implemented interfaces), properties and actions. In additions to these
        common elements there are also a set of <classname>Facet</classname>s
        associated with each specification that provide additional information
        about and behaviour for the class.</para>

        <para></para>

        <remark>Classes: MemberIdentifier</remark>

        <sect2>
          <title>Specifications</title>

          <para>The specification is typically got from an adapted domain
          object via the
          <methodname>ObjectAdapter.getSpecification()</methodname> method,
          but can also be looked up via the
          <emphasis>ObjectReflector.loadSpecification()</emphasis> method (for
          a class object or class name) as follows</para>

          <programlisting>ObjectSpecification spec;
spec = IsisContext.getReflector().loadSpecification(Book.class);
String screenName = spec.getSingularName();</programlisting>

          <para></para>
        </sect2>

        <sect2>
          <title>Properties</title>

          <para></para>

          <formalpara>
            <title></title>

            <para></para>
          </formalpara>

          <para>From the specification an array of every available property
          can be access via the <methodname>getProperties()</methodname>
          method and an individual property can be accessed via the
          <methodname>getProperty(String)</methodname> method, where the sole
          parameter is the the identifier of the property. For the included
          introspector the property identifier will be the name of the
          property method with the <emphasis>get</emphasis> prefix removed,
          and the first character of the remaining string converted to
          lowercase, so <methodname>getCustomerId()</methodname> become
          <emphasis>customerId</emphasis>. Typically the complete list of
          properties is used for things like persistence and remoting, user
          interfaces need to consider what properties they show to avoid
          making hidden or unauthorised properties visible.</para>

          <para>To gather a selective set of properties for a specification
          you can use the .... method.</para>

          <para>All properties detailed are as
          <classname>ObjectAssociation</classname> objects, specifically
          <classname>OneToOneAssociation</classname> and
          <classname>OneToManyAssociation</classname> for value and reference
          objects and collections respectively. Each association object knows
          what type it for (<methodname>getSpecification()</methodname>), can
          provide its name, description and help text, determine whether it
          should be visible and useable, provides various flags indicating its
          usage and provides access to the facets that exist a the property
          level.</para>

          <programlisting>ObjectAssociation[] properties = spec.getProperties();
for (int i = 0; i &lt; properties.length; i++) {
    String name = properties[i].getName();
    boolean mustEnter = properties[i].isMandatory();
    :
    :
}</programlisting>

          <para>To selectively get hold of properties the
          <methodname>getProperties(ObjectAssociationFilter)</methodname>
          method should be used. The
          <classname>ObjectAssociationFilter</classname> class allows us to
          set up a search filter to get properties based on name, type, facet
          etc. Predefined instances and factory methods are available from the
          <classname>Filters</classname> and
          <classname>DynamicFilters</classname> classes or you can extend the
          <classname>ObjectAssociationFilter</classname> class to create your
          own. Two useful predefined versions are the
          <varname>Filters.STATICALLY_VISIBLE</varname> instance and the
          <methodname>DynamicFilters.dynamicallyVisible(ObjectAdapter)</methodname>
          factory method. Using these filters you can find the properties that
          are visible on a particular type and for a particular object, in
          other words excluding those that where hidden during definition
          (using anotations etc) and those that are programatically hidden
          depending on role or state. Typically views are created using only
          dynamically visible properties so hidden fields are not visible and
          do not have any screen space reserved form them. In particular views
          all the possible properties might need space although the final
          propert might not be shown, a good example of this is table views
          where each statically visible property has a column created for it,
          while for each object shown in table only the dynamically visible
          properties for that object are show (ie there may be blank
          cells).</para>

          <para></para>

          <programlisting>ObjectAssociationFilter filter = DynamicFilters.DynamicFilters.dynamicallyVisible(object);
ObjectAssociation[] properties = object.getSpecification().getProperties(filter);
for (int i = 0; i &lt; properties.length; i++) {
    addField(properties[i].getName(), createFieldView(properties[i]));
}</programlisting>

          <para></para>

          <para></para>
        </sect2>

        <sect2>
          <title>Actions</title>

          <para></para>
        </sect2>
      </sect1>

      <sect1>
        <title>Extending the reflector</title>

        <remark>Describe how introspection takes place</remark>

        <para></para>

        <remark>Facets (describe (including how they are defined, how they are
        used), then list all types with descriptions; Javadocs should detail
        how to use each one, but do check as working through list)</remark>

        <para></para>

        <remark>Detail how introspector determines what facets to give to each
        holder</remark>

        <para></para>

        <remark>Adding behaviour via decorator facets, eg for I18n, logging
        etc</remark>

        <para></para>

        <remark>Adding new behaviour by adding new facets, including how to
        access then</remark>

        <para></para>

        <formalpara>
          <title>Interaction utilties</title>

          <para>Other than the properties and actions that the are made
          available by the reflector the other way the reflector is used is
          via by the reflector utilities classes <remark>I don't think this
          name really reflects the intent, a better one is required</remark>
          such as InteractionUtils and CollectionUtils. These helper classes
          generally make use of the <classname>Facet</classname>s on a
          <classname>FacetHolder</classname> to interact with the domain
          model. For example the <methodname>size(ObjectAdapter)</methodname>
          method on the <classname>CollectionFacetUtils</classname> class will
          determine the size of the collection without having to resort to
          finding the right facet and using that yourself.</para>
        </formalpara>

        <para>These utility classes then make use of the related facets (got
        singularly or a set via the
        <methodname>getFacets(FacetFilter)</methodname> method that typically
        search for facets using the mix-in interfaces that are used to mark
        the facets for this kind of use) which are then all process on behalf
        of the client. For example, the <methodname>isVisible</methodname>
        method get all the facets to do with hidding things by filtering for
        facets that <classname>are of the type
        HidingInteractionAdvisor</classname>. This interface is implemented by
        hide-related facets</para>

        <para></para>

        <para></para>

        <para><classname>DisablingInteractionAdvisor</classname>,
        <classname>HidingInteractionAdvisor</classname> and
        <classname>ValidatingInteractionAdvisor</classname> interfaces are
        used to bring together all facets for disabling, hiding and validating
        properties, actions and parameters. These each provide a single method
        for for checking a proposed interaction. These are then used by the
        <classname>InteractionUtils</classname> class to provide all the
        domain related interaction checking behaviour to the clients of the
        reflector</para>

        <para></para>
      </sect1>

      <sect1>
        <title>How to write your own Facet Decorator</title>

        <para></para>

        <para></para>
      </sect1>
    </chapter>

    <chapter>
      <title>ProgModel</title>

      <abstract>
        <para>***</para>
      </abstract>

      <para></para>

      <sect1>
        <title></title>

        <para></para>

        <para>The core progmodel provides a set of reusable elements
        (implementations of the <classname>FacetFactory</classname> API) that
        can be reused to make up a programming model.</para>

        <para>Most of those within this module are in fact used in the default
        programming model, defined by the default progmodel module. They are
        defined within core, however, to allow custom programming models
        (perhaps extending or trimming back the default programming model) to
        be defined.</para>

        <para></para>
      </sect1>

      <sect1>
        <title>Reflection</title>

        <para>*** this probably should move to progmodel ?</para>

        <para></para>

        <para>To make the domain objects useful within the framework the
        objects' public interfaces must be exposed. Reflection capabilities
        are used to determine what fields or properties an object has, what
        behaviour it can offer, and to find other information such as the
        object's title, a suggested order of it fields, when the actions can
        or can't be used. The details about this interface are recorded in an
        instance of <classname>ObjectSpecification</classname>. As each class
        of domain object is loaded into the system introspection is performed
        and an instance of <classname>ObjectSpecification</classname> is
        generated. That specification object is subsequently available from
        any object adapter (using the
        <methodname>ObjectAdapter.getSpecification</methodname> method) for
        that type of domain object; or it can be retrieved directly, by name
        or class, from the <classname>ObjectSpecificationLoader</classname>
        instance (obtained from the <classname>Isis</classname>
        repository).</para>

        <para>Through an object's <classname>ObjectSpecification</classname>
        instance the rest of the NOF can find out the fields that an object
        has, the methods it offers, the title to use to identify the object,
        and other details about the object. These are used normally used by
        the implementations of ObjectAdapter etc when another component ask
        the adapter for details about another object. For example For example
        the statement <code>adapter.getField(no.getFields()[0])</code> would
        retrieve the first field in the domain object held by the [[NAME]]
        referenced by <code>adapter</code>.</para>

        <sect2>
          <title>How it Works</title>

          <para>When a domain object is used within the NOF the
          <classname>ObjectSpecificationLoader</classname> instance is asked
          for the <classname>ObjectSpecification</classname> for the domain
          object's class (by name or <classname>java.lang.Class</classname>
          object). For performance reasons these objects are normally cached
          and if the class has previously been introspected then the cached
          version would be returned. The first time that class is requested
          however the loader is responsible for performing the introspection
          and creating a complete
          <classname>ObjectSpecification</classname>.</para>

          <para>For each field that the reflector recognises the loader
          creates either a <classname>OneToOneAssociation</classname> object
          for a value field or a reference field, or a
          <classname>OneToManyAssociation</classname> object for a collection
          or array. Using the field objects the NOF can access or change the
          values and references in the domain object. The fields can also be
          used by the NOF to find out the field name, if the fields are
          visible and whether it can be modified.</para>

          <para>For each action method that the reflector recognises the
          loader must create an <classname>Action</classname> object. Using
          the action object the NOF can invoke the method on the domain
          object. The action object also can be used by the NOF to find out
          the action's name, whether it is visible and whether it can be
          executed.</para>

          <para>In addition to the fields and actions the specification must
          can also: return the various forms of class name (singular; plural;
          short; and full); retrieve a title from, or generate a title for,
          the domain object; flag the type of object (abstract, lookup,
          object, value, and whether persistable); refer to its superclass,
          any inteferfaces it implements and any subclasses; and allow objects
          to marked/cleared as being dirty.</para>
        </sect2>

        <sect2>
          <title>Installation</title>

          <para>To set up the NOF to use a reflection mechanism the
          <classname>Isis</classname> repository must be given a
          <classname>ObjectSpecificationLoader</classname> instance before the
          repository is initialised. This can be done using the repository's
          static <methodname>setSpecificationLoader</methodname> method. For
          example, the following sets the NOF up to use the basic
          reflector.</para>

          <programlisting>ObjectSpecificationLoader loader = new
        JavaSpecificationLoader();
        Isis.setSpecificationLoader(loader);</programlisting>

          <para></para>
        </sect2>
      </sect1>

      <sect1>
        <title>Reflector</title>

        <para></para>

        <para>The reflector provides the NOF with two distinct facilities.
        First it provides the framework with a model of the domain objects
        that it will be using, and second, it provides a mechanism for the
        framework and the clients of the framework to access and maniplate the
        domain objects (the framework and its clients should never interact
        with the domain objects directly).</para>

        <para>This section is divided into two. The first part looks at how
        the reflector is used by the framework and its clients, while the
        second part looks at how the reflector itself works and how it can be
        extended.</para>
      </sect1>
    </chapter>

    <chapter>
      <title>Runtime</title>

      <para></para>

      <para></para>

      <para>The runtime module is the "engine-room" of the framework, taking
      responsibility to manage domain object (pojo) instances at
      runtime.</para>

      <para>Each pojo is wrapped in an <classname>ObjectAdapter</classname>
      (cf <classname>java.lang.Object</classname>) from which the
      <classname>ObjectSpecification</classname> (cf
      <classname>java.lang.Class</classname>) can be obtained.</para>

      <para>Associated with each <classname>ObjectAdapter</classname> is an
      <classname>Oid</classname>: an opaque serializable identifier to the
      object. The runtime module maintains a 3-way identity map between these,
      allowing forward and reverse lookups.</para>

      <para>The runtime module defines a number of APIs the most important of
      which is the <classname>ObjectStore</classname> API. The runtime module
      manages persistence and transaction demarcation, with the actual storage
      of objects being delegated to an object store implementation.</para>

      <para>The other major API defined by the runtime module security API,
      dealing with authentication and authorization.</para>

      <para>In addition to all the above, the runtime module defines a
      command-line bootstrapper, making it easy to bootstrap Apache Isis from
      a main() or a JUnit test case.</para>

      <para></para>

      <sect1>
        <title></title>

        <para><emphasis>Context</emphasis></para>

        <para>The ObjectAdapterContext provide access to the main components
        of the NOF. If the system is started in a multi-user mode then the
        context will hold specific components for specific execution contexts,
        allowing the same process to access the same components and different
        processes to access unique instances.</para>

        <para>Each execution context will have its own Persistor, Message
        Broker and Update Notifier.</para>

        <para>The Reflector and Configuration are shared among all execution
        contexts.</para>

        <para><emphasis>Persistor</emphasis></para>

        <para>During startup the persistor is given a set of service objects.
        During intialisation the persistor must determine the OIDs for these
        service objects. If the persistor does not know about a service (by
        its ID) from a previous run then it must generate an OID for the
        service and persist that with the ID of the service. This allows
        references to be held persistently to service objects despite the fact
        that they are singletons.</para>

        <para><emphasis>[[NAME]]</emphasis></para>

        <para></para>

        <variablelist>
          <varlistentry>
            <term>Oid</term>

            <listitem>
              <para></para>

              <para></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Resolved State</term>

            <listitem>
              <para></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Version</term>

            <listitem>
              <para></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term></term>

            <listitem>
              <para></para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para><emphasis>Identity map</emphasis></para>

        <para>Any object that has identity (whether it is persisted or not)
        must be registered with the identity map. This maps two relationships:
        domain objects to proxies and OIDs to proxies.</para>

        <para>Whenever a domain object is handled by the system, and before a
        proxy is created, it must be checked against the identity map and if
        it exists the proxy already in the identity map must be used instead
        of creating a new proxy.</para>

        <para></para>

        <para></para>
      </sect1>

      <sect1>
        <title>Adapters and OIDs</title>

        <para>[[NAME]] wrap each domain object in the system. The rest of the
        framework does not normally work with the domain objects directly, but
        via these proxies. The proxies provide access to the tools of the
        reflector by providing a <classname>ObjectSpecification</classname>
        for the object's class and to access additional information about the
        domain object. The specification is accessed via the
        <methodname>getSpecification()</methodname> method and is then used
        with the proxy as a mechanism to access and manipulate the domain
        object. Other key methods on the proxy allow access to the: object
        identifier, via the getOid() method to get its unique OID; version
        information, via <methodname>getVersion()</methodname> to get it
        current Version object; and its lazy loaded state, via the
        <methodname>getResolved()</methodname> state returning the
        <classname>ResolvedSate</classname> object reflecting how complete the
        object is.</para>

        <sect2>
          <title>OIDs</title>

          <para>Any domain object that is not a composite part of another
          domain object must have an identity so that the references between
          objects can be persisted for future access and transferred between
          VMs. The OID must be unique so that a one to one mapping can be
          maintained between an <classname>Oid</classname> and a
          <classname>ObjectAdapter</classname>, and hence a domain object.
          Using the OID the client and server can have copies of the same
          objects and identify those objects remotely and persistently. The
          identity is held by the proxy is an <classname>Oid</classname>
          object. The OID for a specific domain object is unique and will not
          change other than when the object is persisted. Until that point it
          has a transient OID that is morphed into the persistent OID when the
          object is persisted. This is so that the transient objects can be
          passed back and forth between client and server, and once persisted
          both ends can match the identity of the previously transient object
          with the identity of the now persistent object.</para>

          <para>When an object is made persistent (typically via the persistor
          and specifically via <classname>OidGenerator</classname>) its OID is
          changed to reflect this and also to allow the persistor to provide
          its own identifier (as is necessary when using natural keys in a
          relational database backend). So the
          <methodname>isTransient()</methodname> state changes from
          <code>true</code> to <code>false</code> while the internal id state
          might be changed. More visibly, the previous state of the OID is
          copied so that <methodname>getPrevious()</methodname> now returns a
          copy of the original OID instead of null and
          <methodname>hasPrevious()</methodname> will return true.</para>

          <para>When a OID with a previous OID is used to retrieve an object
          from the persistor the persistor first checks the OID and if
          <methodname>hasPrevious()</methodname> returns <code>true</code> the
          original tranisent object is retrieved, that object is removed from
          the cache, its OID is updated (via the
          <methodname>copyFrom(Oid)</methodname> method) and then it is
          returned to the cache. This results in the newly persisted object
          having the new persistent OID and it being accessible as such from
          the cache. At this point the original version's transient state will
          no longer be recognised.</para>
        </sect2>

        <sect2>
          <title>ResolveState</title>

          <para></para>

          <para></para>
        </sect2>

        <sect2>
          <title>Version</title>

          <para></para>

          <para></para>
        </sect2>
      </sect1>

      <sect1>
        <title>Persistor</title>

        <para></para>

        <para>The persistor is tasked with managing all of the domain objects
        and ensuring that they can be retrieved in the futures. In addition to
        it more obvious role in the storing of objects the persistor must also
        manage the object that are memory. This second task is known a
        identity mapping and is required to ensure that any domain object only
        ever has one adapter for it. If more than one adapter exists for an
        object then there will be risk that the system has .......</para>

        <para></para>

        <para></para>

        <sect2>
          <title>Identity Map</title>

          <para>A persistor should utilise an object-identity map (see Martin
          Fowler's Patterns of Enterprise Application Architecture) to manage
          the mapping of domain objects and adapters, and OIDs and adapters.
          For each domain object the map should store a single adapter, and an
          OID to that same adapter. The persitor can then guarantee that the
          same adapter is always provided for a specific domain object or
          OID</para>

          <para></para>

          <para></para>
        </sect2>

        <sect2>
          <title>Creating Adapters</title>

          <para>Numerous methods exist in the persistor (see
          <classname>ObjectAdapterManager</classname>) for creating adapters.
          These methods do three things. First, they insure that there is no
          existing adapter for a domain object or OID, and if there is one
          then that adapter is returned to the caller immediately. Assuming
          there is no existing adapter then a new one is created for the
          domain object and the adapter's OID and resolved state are
          initialised. The OID is typically set to the one provided during the
          reuqest except when a new domain object is being created, in which
          case a new transient OID is created for it. The resolved state
          reflects the type of object and its persistent state. Newly created
          objects end up with <constant>TRANSIENT</constant>, persistent ones
          with <constant>GHOST</constant> and for objects that are aggregated
          the state is intialised to <constant>AGGREGATED (see
          ResolvedState)</constant></para>

          <para></para>

          <para></para>
        </sect2>
      </sect1>

      <sect1>
        <title>Update Notifier (Change Listener)</title>

        <para></para>

        <para>Changes to objects are collected by the
        <classname>UpdateNotifier</classname> object once they have been
        persisted. These changes can then be asynchronously accessed by a
        client to keep it in sync with the underlying model. Once changes are
        retrieved by client the notifier resets its collection so that changes
        are only available once.</para>

        <para>Within the framework, specifically the persistor, when objects
        changes and deletions are persisted the notifier should be informed
        via its <methodname>addChangedObject(ObjectAdapter)</methodname> and
        <methodname>addDisposedObject(ObjectAdapter)</methodname>
        methods.</para>

        <para>Clients should use the
        <methodname>allChangedObjects()</methodname> and
        <methodname>allDisposedObjects()</methodname> to get an
        <classname>Enumeration</classname> of the changes.</para>

        <para>The notifier itself can be got from system context using
        <methodname>IsisContext.getUpdateNotifer()</methodname>.</para>

        <para></para>
      </sect1>

      <sect1>
        <title>What makes up a PersistenceSession</title>

        <para></para>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/PersistenceSession.png" scale="30" />
          </imageobject>
        </mediaobject>

        <para></para>
      </sect1>

      <sect1 id="sec.RuntimeLauncher">
        <title>Launcher</title>

        <para></para>

        <para></para>

        <para>The command line container runs [[NAME]] within its own
        container and is best suited to running from the command line where
        parameters are used to determine what components are used and how it
        all runs.</para>

        <para>In essense we are running Java with the Isis class like
        this</para>

        <para>$ java -cp &lt;classpath&gt;
        org.apache.isis.runtime.[[NAME]]Object &lt;parameters...&gt;</para>

        <para>however we typically use a script like the one created by the
        archetype so we can run more easily, eg</para>

        <para>$ ./isis.sh &lt;parameters...&gt;</para>

        <para>The Isis class immediately starts up the logging so that log
        messages are never lost. Next the
        <classname>InstallerLookup</classname> object is instantiated. This
        loads up all the installers that can be found on the classpath, which
        are listed in <filename>installer-registry.properties</filename> . (In
        the source tree, this file physically resides in
        <filename>core/runtime/src/main/resources/</filename>). This allows
        Isis to be aware of all the components that are available, allowing
        names such as xml, file, dnd and html to be used to refer to
        components instead of their fully qualified class names. We maintain
        this list with the framework and public available components will be
        added to the registry list when we know about them.</para>

        <para>With these details loaded Isis then parses the command line
        parameters. If there is problem with these then a help text is
        displayed list all the options and the program exits. With the command
        line arguments processed Isis initializes the installers and
        bootstraps the system.</para>

        <para></para>

        <para></para>

        <para></para>

        <para></para>

        <para>If you are asked from diagnostic information then run [[NAME]]
        Objects as follows to capture details about your machine,
        configuration and [[NAME]].</para>

        <programlisting>$ isis.sh --diagnostics &gt; diagnostics.txt</programlisting>

        <para></para>

        <para></para>

        <para></para>

        <para>A bootstrapper takes care of loading up the [[NAME]] framework
        and application, initialising it, and running it. When it starts up it
        reads in a list of components and attempts to load in each one. Any
        component that can be loaded is then available to be used and can then
        be specified on the command line if required. Requesting a component
        that cannot be loaded will result in an error. To resolve such an
        error simply ensure that the component's Jar file is available on the
        class path. All the components supplied with the framework are listed
        in the file <filename class="directory"
        moreinfo="none">installer-registry.properties</filename> which is part
        of the <filename class="directory"
        moreinfo="none">runtime-4.0.jar</filename> file.</para>

        <para>During start-up [[NAME]] loads in a number of configuration
        files. The main file, <filename class="directory"
        moreinfo="none">isis.properties</filename>, is always loaded and must
        be present for the framework to start up. For each of the various
        types of persistor and viewer, there is a separate configuration file.
        For example, for the following command line parameters</para>

        <screen format="linespecific">-v dnd -r xml</screen>

        <para>specifies that the viewer is to be the drag and drop (<literal
        moreinfo="none">dnd</literal>) interface, and the persistor is to be
        the 'xml object store'. As well as loading those components, the
        framework will look for configuration files named
        <filename>viewer.properties</filename>, <filename class="directory"
        moreinfo="none">viewer_dnd.properties</filename>,
        <filename>persistor.xml</filename> and <filename class="directory"
        moreinfo="none">persistor_xml.properties</filename> and will load them
        if found.</para>

        <para></para>

        <para></para>

        <sect2>
          <title>Class</title>

          <para>The bootstrapper is the class
          <classname>org.apache.isis.runtime.Isis</classname> and takes the
          following options on the command line. (Note that in each case there
          is an abbreviated, and a full, version of the option).</para>

          <para>There is also an alternative bootstrapper,
          org.apache.isis.webserver.WebServer.</para>

          <para></para>

          <para>*** can also use org.apache.Isis - just delegates to
          org.apache.isis.runtime.Isis.</para>

          <para></para>
        </sect2>

        <sect2>
          <title>Configuration</title>

          <screen format="linespecific">-c &lt;config file&gt;
--config &lt;config file&gt;</screen>

          <para>Loads in the specified configuration file, in addition to
          <filename class="directory"
          moreinfo="none">isis.properties</filename> and the properties files
          relating to the installed component.</para>
        </sect2>

        <sect2>
          <title>Disable splash</title>

          <screen format="linespecific">-s
--nosplash</screen>

          <para>Prevents the splash screen from being displayed during start
          up.</para>
        </sect2>

        <sect2>
          <title>Help</title>

          <screen format="linespecific">-h
--help</screen>

          <para>Prints out the options that are available. This is dynamic so
          that only the components that can be used are listed.</para>
        </sect2>

        <sect2>
          <title>Logging</title>

          <para>The amount of logging detail can be controlled from the
          command line. If no flag is specified only warnings and errors are
          output. All logging level relate to the Log4J levels, which is the
          logging mechanism used by [[NAME]].</para>

          <screen format="linespecific">-quiet</screen>

          <para>Quiet reduces logging to show errors only.</para>

          <screen format="linespecific">-verbose</screen>

          <para>Increases logging to show information about the system as it
          runs.</para>

          <screen format="linespecific">-debug</screen>

          <para>Increases logging to show all logged entries. At this level so
          much is logged that it will likely slow down the system if used when
          outputting log details to the console or other slow devices.</para>
        </sect2>

        <sect2>
          <title>Deployment Type (or Mode)</title>

          <screen format="linespecific">-t &lt;mode&gt;
--type &lt;mode&gt;</screen>

          <para>The framework is started up in one of several different
          deployment modes, as listed below:</para>

          <para><emphasis>exploration</emphasis> - Exploration mode is for
          developers to explore and test their code. The framework always uses
          an in-memory persistor and runs the fixtures at startup to ensure a
          known state every time the system is started. The user is not
          prompted to log in, but is automatically logged in as user
          'exploration'. The logged in user can be changed on the fly using an
          option with the user interface; this simply changes the user and
          does not require an explicit login action. Also, exploration methods
          defined in the DOM are also available to the user to do things that
          a user would not normally be allowed to do. These are used expressly
          for testing the system. Please note it is an error to specify a
          persistor type in exploration mode.</para>

          <para><emphasis>prototype</emphasis> - Prototype mode is for
          demonstrating the system in realistic fashion. The user is always
          prompted to log in at start up, and can log out and log in again
          without losing the state of the objects. This allows a user to
          demonstrate exactly how a system would work.</para>

          <para><emphasis>single-user</emphasis> - Single user mode runs the
          system for a single user with object persistence.</para>

          <para><emphasis>client</emphasis> - Client mode provides multiple
          users access to a server. With this mode selected the
          <emphasis>connection</emphasis> option must also be
          specified.</para>

          <para><emphasis>server-exploration</emphasis> - Server mode, but all
          clients will automatically be logged in as the 'exploration' user
          (or as <classname>LoginFixture</classname> is present).</para>

          <para><emphasis>server-prototype</emphasis> - Server mode, but if a
          <classname>LoginFixture</classname> is present then all clients will
          automatically be logged in as this user.</para>

          <para><emphasis>server</emphasis> - Server mode runs [[NAME]] as a
          server for multiple clients. With this mode selected the
          <emphasis>connection</emphasis> option must also be
          specified.</para>

          <para>If no mode is specified, the framework will start up in
          <emphasis>prototype</emphasis> mode.</para>
        </sect2>

        <sect2>
          <title>Overridden properties</title>

          <screen format="linespecific">-D property=value</screen>

          <para>Using this flag we can pass in properties from the command
          line that would otherwise need to specified in a configuration file.
          This is normally used to override a property, or to temporarily
          specify one.</para>
        </sect2>

        <sect2>
          <title>Password</title>

          <screen format="linespecific">-p &lt;password&gt;
--password &lt;password&gt;</screen>

          <para>Ignored if type is prototype or not used with the user option
          below.</para>

          <para>Uses the specified password when logging the user in with the
          username specified with <methodname>--user</methodname>.</para>
        </sect2>

        <sect2>
          <title>Persistor</title>

          <screen format="linespecific">-r &lt;persistor&gt;
--persistor &lt;persistor&gt;</screen>

          <para>Ignored if type is client.</para>

          <para>The persistor option allows you to choose how the objects
          created by the system will be persisted so they are still available
          the next time you run the system. The following options are
          available with the current distribution, and if none is specified
          then the in-memory persistor will be used for exploration mode and
          xml persistor will be used for other non-client modes by
          default.</para>

          <para><emphasis>in-memory</emphasis> - A simple non-persisting
          mechanism that will only hold the persisted object while the virtual
          machine is running. This is used for testing and
          demonstrating.</para>

          <para><emphasis>xml</emphasis> - A simple file based mechanism that
          encodes each object's data in an XML file. Alongside the data files
          for the objects are instance lists listing all the files for each
          type of object.<emphasis></emphasis></para>

          <para><emphasis>&lt;class name&gt;</emphasis> - By specifying a
          class name the boot loader will load up that class as the
          persistor.</para>
        </sect2>

        <sect2>
          <title>Remote connector</title>

          <screen format="linespecific">-x &lt;connector&gt;
--connector &lt;connector&gt;</screen>

          <para>Ignored if mode is not a client. If the type is a client then
          a connection mechanism can be specified. Connector mechanisms
          available are:-</para>

          <para><emphasis>encoding-sockets</emphasis> - Uses the encoding
          mechanism (of value types) to serialize/deserialize objects, over
          TCP/IP sockets.</para>

          <para><emphasis>encoding-http</emphasis> - Uses the encoding
          mechanism (of value types) to serialize/deserialize objects, over
          HTTP.</para>

          <para><emphasis>serializing-sockets</emphasis> - Uses Java
          serialization (of value types) to serialize/deserialize objects,
          over TCP/IP sockets.</para>

          <para><emphasis>xstream-sockets</emphasis> - Uses the Xstream
          library to serialize/deserialize objects to/from XML for simple
          stream communications, over TCP/IP sockets.</para>
        </sect2>

        <sect2>
          <title>User</title>

          <screen format="linespecific">-u &lt;user name&gt;
--user &lt;user name&gt;</screen>

          <para>Ignored if type is prototype.</para>

          <para>Uses the specified name when logging the user in. If the
          password is also specified (see above) then an attempt to log in
          using the supplied user name and password is made; authentication
          failure at this point will exit the program.</para>
        </sect2>

        <sect2>
          <title>Viewer</title>

          <screen format="linespecific">-v &lt;viewer&gt;
--viewer &lt;viewer&gt;</screen>

          <para>The viewer option allows you to choose the user interface that
          is used to access your [[NAME]] application. The following options
          are available with the current distribution, and if none is
          specified then the drag and drop view will be used by
          default.</para>

          <para><emphasis>dnd</emphasis> - Drag and Drop viewer</para>

          <para><emphasis>html</emphasis> - Web browser viewer - accessed via
          standard web browser such as FireFox, Internet Explorer or
          Opera</para>

          <para><emphasis>encoding-sockets</emphasis> - Uses the encoding
          mechanism (of value types) to serialize/deserialize objects, over
          TCP/IP sockets.</para>

          <para><emphasis>encoding-http</emphasis> - Uses the encoding
          mechanism (of value types) to serialize/deserialize objects, over
          HTTP.</para>

          <para><emphasis>serializing-sockets</emphasis> - Uses Java
          serialization (of value types) to serialize/deserialize objects,
          over TCP/IP sockets.</para>

          <para><emphasis>xstream-sockets</emphasis> - Uses the Xstream
          library to serialize/deserialize objects to/from XML for simple
          stream communications, over TCP/IP sockets.</para>

          <para><emphasis>&lt;class name&gt;</emphasis> - By specifying a
          class name the boot loader will load up that class as the
          viewer</para>
        </sect2>
      </sect1>

      <sect1>
        <title>Configuration Loading</title>

        <para>*** explain the principle, how we construct from the "id" of the
        installer.</para>

        <para></para>

        <para></para>

        <para>The configuration file (<filename class="directory"
        moreinfo="none">isis.properties</filename>) needs to specify what
        resources are used by the application and what fixtures to load. These
        details are common to all the modes that the NOF can be run in.
        Additional properties can be also specified for use in specific modes,
        such as database connection details when using the SQL object
        store.</para>

        <para>The configuration file <filename class="directory"
        moreinfo="none">isis.properties</filename> is always picked up. In
        addition other properties files will be picked up, if present, based
        on the type, viewer, persistor and connection command line switches
        with the filename matching the option. E.g.</para>

        <para>-r (or --persistor) hibernate will cause
        <filename>persistor.properties</filename> and <filename
        class="directory"
        moreinfo="none">persistor_hibernate.properties</filename> to be
        used</para>

        <para>-t (or --type) client will cause <filename class="directory"
        moreinfo="none">client.properties</filename> to be used</para>

        <para>-v (or --viewer) dnd will cause
        <filename>viewer.properties</filename> and <filename class="directory"
        moreinfo="none">viewer_dnd.properties</filename> to be used</para>

        <para>-x (or -- connector) xstream-sockets will cause
        <filename>transport.properties</filename>,
        <filename>transport_sockets.properties</filename>,
        <filename>protocol.properties</filename> and
        <filename>protocol_xstream.properties</filename> to be loaded; because
        of the way that connector is implemented it will also load
        <classname>persistor.properties</classname> and <filename
        class="directory"
        moreinfo="none">persistor_xstream-sockets.properties</filename>
        too.</para>

        <para>In addition a particular file can be selected with the -c
        switch. For example</para>

        <para>-c <filename class="directory"
        moreinfo="none">mysettings.properties</filename></para>

        <para></para>

        <sect2>
          <title>Properties file contents</title>

          <para>Each properties file can contain lists of services and
          fixtures as well as any specific settings (e.g. Hibernate setting).
          Services are defined using the
          <methodname>isis.services</methodname> property, fixtures by the
          <methodname>isis.fixtures</methodname> property.</para>

          <para></para>

          <para>As a shortcut you can specify the prefix for all classes
          listed in the <methodname>services</methodname> property using
          <methodname>services.prefix</methodname> and the
          <methodname>fixtures</methodname> property using
          <methodname>fixtures.prefix</methodname>.</para>

          <programlisting format="linespecific"># uncomment to hide splash
#isis.nosplash
isis.locale=en_GB
isis.services.prefix = org.apache.isis.example.expenses
isis.services = resources.ExpenseTypeFactory \
                       , resources.naive.NaiveClaimRepository\
                       , resources.naive.NaiveEmployeeRepository\
                       , resources.naive.NaiveExpenseTypeRepository\
                       , resources.naive.NaiveItemRepository

isis.fixtures.prefix=org.apache.isis.example.expenses.fixture
isis.fixtures=ExpenseTypes, Employees, ExampleClaim, Context</programlisting>

          <para>Other settings that can be set include</para>

          <itemizedlist>
            <listitem>
              <para>isis.nosplash</para>
            </listitem>

            <listitem>
              <para>isis.locale (e.g. en_GB)</para>
            </listitem>
          </itemizedlist>

          <para>See the relevant section for details of settings specific to
          persistence, web viewer etc.</para>

          <para>The <filename class="directory"
          moreinfo="none">logging.properties</filename> file allows control
          over the logging settings. The NOF uses log4j for logging so please
          refer to <ulink
          url="http://logging.apache.org/log4j/docs/documentation.html">Apache</ulink>
          log4j documentation.</para>

          <para></para>

          <para></para>

          <para></para>
        </sect2>
      </sect1>

      <sect1>
        <title>Other Properties</title>

        <sect2 id="locale">
          <title>Locale</title>

          <para>The locale that the system works in can be set by the
          following property:</para>

          <programlisting format="linespecific">isis.locale = en_GB</programlisting>

          <para>The locale is specified in two parts separated by an
          underscore.</para>

          <para>The first part is the language and is a valid ISO Language
          Code. These codes are the lower-case, two-letter codes as defined by
          ISO-639. You can find a full list of these codes at a number of
          sites, such as: <ulink
          url="???">http://www.loc.gov/standards/iso639-2/php/English_list.php</ulink>
          The second part is the country and is a valid ISO Country Code.
          These codes are the upper-case, two-letter codes as defined by
          ISO-3166. You can find a full list of these codes at a number of
          sites, such as: <ulink
          url="???">http://www.iso.ch/iso/en/prods-services/iso3166ma/02iso-3166-code-lists/list-en1.html</ulink></para>

          <para>If no underscore is used then the setting is deemed to be the
          language.</para>

          <para>If no locale is specified the system uses the locale specified
          by the operating system.</para>
        </sect2>

        <sect2>
          <title>Time zone</title>

          <para>The time zone that the system works in can be set by the
          following property:</para>

          <programlisting format="linespecific">isis.timezone = Europe/London</programlisting>

          <para>The time zone is normally a geographic area and a location
          separated by a slash (/), such as
          <emphasis>America/New_York</emphasis>,
          <emphasis>Europe/Paris</emphasis> or
          <emphasis>Australia/Perth</emphasis>. These codes can be looked up
          online on sites such as <ulink
          url="http://www.convertit.com/Go/ConvertIt/World_Time/Current_Time.ASP">ConvertIt.com</ulink>
          and <ulink url="http://twiki.org/cgi-bin/xtra/tzdatepick.html">Date
          and Time Gateway</ulink>.</para>

          <para>Alternatively the time zone can be specified in relative
          format of the form <emphasis>GMT-8:00</emphasis> where the relative
          number of hours and minutes can be specified.</para>
        </sect2>
      </sect1>

      <sect1>
        <title>Image Loading</title>

        <para>All images must be held in a directory called <filename
        class="directory" moreinfo="none">images</filename> in the working
        directory, or on the classpath.</para>

        <para>Images for objects are picked up by class name in the form of
        <filename class="directory"
        moreinfo="none">&lt;ClassName&gt;.&lt;extension</filename>&gt; and
        will be case sensitive on Unix/Linux, but case insensitive on
        Windows.</para>

        <para>The names of the images can be overriden by the reflector, which
        can pass back a name of an image that is found from the domain object.
        This provides a mechanism for objects to be shown with images that
        they themselves specify.</para>

        <para><emphasis>Extensions</emphasis> that are currently supported are
        <filename class="directory" moreinfo="none">.gif</filename>, <filename
        class="directory" moreinfo="none">.png</filename>, <filename
        class="directory" moreinfo="none">.jpg</filename> and <filename
        class="directory" moreinfo="none">.jpeg</filename>.</para>

        <para><emphasis>ClassName</emphasis> is either the short form or the
        fully qualified name of the class, and case can be important depending
        on the platform.</para>

        <para>When loading images based on class, if no image is found for the
        current class using the above variations then the process is repeated
        using the name (both short and fully qualified) of the class's
        immediate superclass. This process repeats until there are no more
        superclasses.</para>

        <para></para>

        <para></para>

        <para>There are a number of generic images that are used by the
        framework, and that can be changed to create a different look. These
        are:-</para>

        <itemizedlist>
          <listitem>
            <para><literal>empty-field.png</literal></para>
          </listitem>

          <listitem>
            <para><literal>logo.jpg</literal></para>
          </listitem>

          <listitem>
            <para><literal>small-logo.png</literal></para>
          </listitem>

          <listitem>
            <para><literal>transient.png</literal></para>
          </listitem>

          <listitem>
            <para><literal>unknown.png</literal></para>
          </listitem>
        </itemizedlist>

        <para></para>
      </sect1>

      <sect1>
        <title>Exploration Properties</title>

        <sect2>
          <title>Users</title>

          <para>The list of users that can be switched between during
          exploration can be listed, separated by commas, with the following
          property. If no users are specified the default user "exploration"
          will be used and switching between users will not be
          possible.</para>

          <programlisting format="linespecific">isis.exploration.users=sven, dick, bob</programlisting>
        </sect2>

        <sect2>
          <title>Exploration options</title>

          <para>To disable the showing of exploration menu items set the
          following property to false (by default exploration options are
          shown).</para>

          <programlisting format="linespecific">isis.exploration.show=false</programlisting>
        </sect2>
      </sect1>
    </chapter>

    <chapter>
      <title>Webapp</title>

      <para></para>

      <para>The webapp module is a small module that provides reusable servlet
      context listeners and filters to webapp viewers. They include:</para>

      <itemizedlist>
        <listitem>
          <para><classname>IsisWebAppBootstrapper</classname> which is a
          servlet context listener to bootstrap an Isis runtime and bind to
          the servlet context</para>
        </listitem>

        <listitem>
          <para><classname>IsisSessionFilter</classname> which is a filter
          used to creating an IsisSession for each request (the Open session
          in View pattern)</para>
        </listitem>

        <listitem>
          <para><classname>ResourceServlet</classname> which serves up static
          content from the specified resource</para>
        </listitem>

        <listitem>
          <para><classname>StaticContentFilter</classname> which decorates
          static content with headers for caching</para>
        </listitem>
      </itemizedlist>

      <para>Not every webapp-based viewer is required to use these classes;
      refer to their documentation for exact details of what should reside in
      the web.xml.</para>

      <para></para>
    </chapter>

    <chapter>
      <title>Webserver</title>

      <para></para>

      <para>The webserver module is intended to make it easy to run
      webapp-based viewers, using the webapp as defined in
      <filename>src/main/webapp/WEB-INF/web.xml</filename>.</para>

      <para>This is a useful facility to have during development, but is not
      (expected to be) needed for deployment. In essence all the module does
      is to bundle up Jetty.</para>

      <para>An alternative would be to use <code>mvn jetty:run</code>; this
      module is for when you'd rather just run a standalone program (ie, with
      a <methodname>main()</methodname> in it) without the overhead of
      <emphasis>Maven</emphasis>.</para>

      <para></para>

      <sect1>
        <title></title>

        <para></para>

        <sect2>
          <title>Properties</title>

          <para>The embedded web server (implemented by Jetty) has only one
          properties</para>

          <programlisting format="linespecific">isis.embedded-web-server.port=8080</programlisting>

          <para>Which specifies the port to use when prototyping.</para>
        </sect2>
      </sect1>
    </chapter>
  </part>

  <part id="prt.DefaultImplementations">
    <title>Default Implementations</title>

    <partintro>
      <para>*** part intro</para>
    </partintro>

    <chapter>
      <title>Bootstrapping APIs</title>

      <para></para>

      <para></para>

      <note>
        <para>TODO: discuss Installer architecture; do indicate that this
        stuff is going to change with JSR-299</para>
      </note>

      <para></para>

      <para></para>

      <sect1>
        <title>Services</title>

        <para>Services are registered with the Framework at startup via the
        properties file, using the services properties. The
        <methodname>services</methodname> property itself dictates which
        service classes are to be instantiated at startup, for example:</para>

        <programlisting format="linespecific">isis.services = bom.BookingFactory, bom.CustomerFactoryAndRepository, \
  bom.LocationFactoryAndRepository
</programlisting>

        <para>The <methodname>prefix</methodname> property allows you to
        specify the common package once and, hence omit them from the classes
        in the list. The following set of properties is therefore equivalent
        to the previous example.</para>

        <programlisting format="linespecific">isis.services.prefix = bom
isis.services = BookingFactory, CustomerFactoryAndRepository, \
  LocationFactoryAndRepository
</programlisting>

        <para></para>
      </sect1>

      <sect1>
        <title>Registering fixtures</title>

        <para>Fixtures are simple classes that are used to set up a adapter
        objects system. The code for a fixture should be placed in the
        <methodname>install</methodname> method, which is run when the system
        installs the fixtures. Fixtures are only installed if the
        <classname>ObjectAdapterPersistor</classname> flags that it is
        uninitialised via its <methodname>isInitialized</methodname> method.
        For the in memory object store this will be every time it is started,
        and for other object stores will only be when they detect they have no
        persistent data.</para>

        <para></para>

        <para>Fixtures are registered with the Framework at startup via the
        properties file, using the fixtures properties. The
        <methodname>fixtures</methodname> property itself dictates which
        fixture classes are to be instantiated at startup, for example:</para>

        <programlisting format="linespecific">isis.fixtures = fixture.BookingsFixture, fixture.PerspectivesFixture</programlisting>

        <para>The <methodname>prefix</methodname> property allows you specify
        the common package name once and, hence omit them from the classes in
        the list. The following set of properties is therefore equivalent to
        the previous example.</para>

        <programlisting format="linespecific">isis.fixtures.prefix = fixture
isis.fixtures = BookingsFixture, PerspectivesFixture</programlisting>
      </sect1>

      <sect1>
        <title></title>

        <para></para>
      </sect1>
    </chapter>

    <chapter id="chp.ProgrammingModelApi">
      <title>Programming Model API and Default Implementation</title>

      <para></para>

      <para>***</para>

      <para></para>

      <para></para>

      <note>
        <para>At the moment this API is rather fine-grained. We intend to
        introduce higher level abstractions to make it easier to work with. We
        may also split out member sorting into a separate abstraction.</para>
      </note>

      <para></para>

      <para></para>

      <para></para>

      <note>
        <para>TODO: tidy up the following paras, were just copied/pasted in
        from APT</para>
      </note>

      <para></para>

      <para>Although we generally recommend that you stick to the conventions
      of the programmingmodel as documented in the Application Library (in
      <filename>applib</filename>), it is in fact possible to customize or
      modify these conventions. A typical case might be to make Isis support
      some of your own annotations. You'll find that some of the viewers and
      object stores also define their own extensions to the standard
      programming model.</para>

      <para></para>

      <para></para>

      <para>The metamodel is built up using a collection of
      &lt;&lt;&lt;FacetFactory&gt;&gt;&gt;s. These are used to identify the
      classes and class members, and to decorate these class members with
      semantics. It is easy to write new &lt;&lt;&lt;FacetFactory&gt;&gt;&gt;s
      to support new programming conventions or, indeed, new languages. The
      &lt;&lt;&lt;FacetFactory&gt;&gt;&gt; API is defined in
      {{{../core/metamodel/index.html}metamodel}} module, along with
      implementations to support the Java language. The
      {{{http://groovyobjects.sourceforge.net}Groovy Objects}} sister project
      provides implementations to allow [[NAME]] to support domain objects
      written in {{{http://groovy.codehaus.org}Groovy}}.</para>

      <para></para>

      <sect1>
        <title>FacetFactory</title>

        <para></para>

        <para></para>

        <para></para>
      </sect1>

      <sect1>
        <title>Facets</title>

        <para></para>

        <sect2>
          <title>PropertiesAndCollectionsIdentifyingFacet</title>

          <para></para>
        </sect2>

        <sect2>
          <title>InteractionAdvisors</title>

          <para></para>

          <sect3>
            <title>HidingInteractionAdvisor</title>

            <para></para>
          </sect3>

          <sect3>
            <title>DisablingInteractionAdvisor</title>

            <para></para>
          </sect3>

          <sect3>
            <title>ValidatingInteractionAdvisor</title>

            <para></para>

            <para></para>
          </sect3>
        </sect2>
      </sect1>

      <sect1>
        <title>MetaModel Validator</title>

        <para></para>

        <para></para>
      </sect1>

      <sect1>
        <title>Other Languages</title>

        <para></para>

        <sect2>
          <title>Groovy Language Support</title>

          <para></para>

          <para></para>

          <para></para>

          <note>
            <para>TODO: tidy up the following paras, were just copied/pasted
            in from APT</para>
          </note>

          <para></para>

          <para>[[NAME]] also allows you to develop your domain application in
          Groovy. This support should be considered experimental for the
          moment; although the viewers and fixtures/in-memory object store
          work fine, it has not been fully tested out with other object
          stores. Further details are available in the
          {{{./support/languages/groovy/index.html}groovy}} module.</para>

          <para></para>

          <para></para>
        </sect2>
      </sect1>

      <sect1>
        <title>Alternative Implementations</title>

        <para></para>

        <para></para>
      </sect1>

      <sect1>
        <title>"Rolling-your-own" Programming Model</title>

        <para></para>
      </sect1>
    </chapter>

    <chapter id="chp.ObjectStoreApi">
      <title>Object Store API and Default Implementation</title>

      <abstract>
        <para>***</para>
      </abstract>

      <sect1>
        <title></title>

        <para></para>

        <para></para>

        <note>
          <para>TODO: tidy up the following paras, were just copied/pasted in
          from APT</para>
        </note>

        <para></para>

        <para>The API is defined in {{{../core/runtime/index.html}runtime}}
        module, with just an in-memory object store provided for prototyping
        and testing only. The plugins provide a number of other
        implementations: a simple {{{./xml-persistor/index.html}XML}}
        persistor (for single user apps), a
        {{{./sql-persistor/index.html}SQL}} persistor to persist directly to
        RDBMS (using JDBC), and a
        {{{./berkeley-persistor/index.html}BerkeleyDB}} persistor. In
        addition, the {{{http://jpaobjects.sourceforge.net}JPA Objects}}
        sister projects uses JPA to persist to an RDBMS.</para>

        <para></para>
      </sect1>

      <sect1>
        <title>Alternative Implementations</title>

        <para></para>
      </sect1>

      <sect1>
        <title>Writing your own Object Store</title>

        <para></para>

        <para>When a object is persisted the object store's
        <methodname>createCreateObjectCommand</methodname> method is called.
        This create a command object (see GoF Patterns books), which will
        later be processed when the transaction is be commited. All
        persistence actions (create, destroy and save) are collected together
        until this point. This way when a transaction is aborted all commands
        can be thrown away without recourse to the database. Specifically it
        is the <methodname>execute</methodname> method that is called on the
        command, and this command runs an insert command agains the the
        database.</para>

        <para></para>
      </sect1>
    </chapter>

    <chapter id="chp.ProfileStoreApi">
      <title>Profile Store API and Default Implementation</title>

      <abstract>
        <para>***</para>
      </abstract>

      <sect1>
        <title></title>

        <para></para>

        <para></para>

        <para>Information about a user of the system (rather that a user of
        the application domain model) is stored in a
        <classname>UserProfile</classname> object which is got from the
        <classname>UserProfileService</classname>, which in turn is accessible
        from <classname>IsisSession</classname>. There is also convienence
        methods on <classname>IsisContext</classname> to get both the
        <classname>UserProfile</classname> and the
        <classname>UserProfileService</classname>. The user profile details
        the perspectives the user has set up and options that have been
        specified, typically for the user interfaces. The user profile service
        provides a way to create, save and retrieve the user profiles,
        specifically the profile of the current user. The service in turn has
        a <classname>UserProfilePersistor</classname> that is used to do the
        actual persistence.</para>

        <para>Setting up profiles</para>

        <para>Profiles can be created at start up by creating
        <classname>UserProfileFixture</classname> subclasses. Theses are only
        ever loaded once as the fixture installer checks with
        <methodname>UserProfileSevice.isInitialized()</methodname> to see if
        the service is already set up. The profile fixture (which is defined
        in the application library and is therefore not part of the [[NAME]]
        framework) loads the profiles into [[NAME]] by passing in an
        implementation of ProfilePersistor that provides a way for the
        perspective to make requests of the framework.</para>

        <para></para>

        <para></para>

        <note>
          <para>TODO: tidy up the following paras, were just copied/pasted in
          from APT</para>
        </note>

        <para></para>

        <para>***</para>

        <para></para>
      </sect1>

      <sect1>
        <title>Alternative Implementations</title>

        <para></para>

        <para></para>

        <para></para>
      </sect1>

      <sect1>
        <title></title>

        <para></para>

        <para>To store profiles (during exploration) for users the a profile
        store must be specified.</para>

        <para>On the command line use -e xml to store them in an XML.</para>

        <para>Without this the profile will simply be kept in memory, and lost
        on exit.</para>

        <para></para>
      </sect1>
    </chapter>

    <chapter id="chp.SecurityApi">
      <title>Security APIs and Default Implementation</title>

      <abstract>
        <para>This chapter covers the authentication and authorization
        APIs</para>
      </abstract>

      <para></para>

      <para>Apache Isis supports authentication  and role-based authorization.
      Within the framework the user is represented by a
      <classname>Session</classname> object. From the session object you can
      get the name of the user and their roles.</para>

      <para>The session is used within the distribution mechanism and the
      security manager. The security manager uses the session to determine if
      a user can access or manipulate an object member. The distribution
      mechanism passes the session to the server so the server knows which
      user is accessing it.</para>

      <para></para>

      <para></para>

      <para></para>

      <para></para>

      <para>As with authentication, authorization may be executed via a file,
      LDAP, or database. If no authorization mechanism is specified, all
      domain calls, methods and properties will be available to all
      users.</para>

      <para></para>

      <para></para>

      <note>
        <para>TODO: tidy up the following paras, were just copied/pasted in
        from APT</para>
      </note>

      <para><emphasis></emphasis></para>

      <para><emphasis>Apache Isis</emphasis> applications support
      authentication ("who are you"?) and authorization ("what can you do?").
      This allows the set of functionality to be restricted based upon the
      user's role, with no security knowledge needing to be embedded within
      the domain objects. The API is defined in
      {{{../core/runtime/index.html}runtime}}, along with two implementations,
      one file-based and one using LDAP.</para>

      <para></para>

      <para></para>

      <para>An <classname>Authoriser</classname> processes an
      <classname>AuthorizationRequest</classname> and if granted generates a
      <classname>Session</classname> object to represent the user.</para>

      <para></para>

      <para></para>

      <para>There is an optional capability to authorise the visibility and
      usability of fields independently. Thus a field may be visible to
      certain roles but not editable. In order to configure this against a
      authorization a flag must be added as follows.</para>

      <para></para>

      <para></para>

      <sect1>
        <title>Capturing authorization requirements automatically</title>

        <para>As a tool for helping to configure the initial security settings
        there is a 'learn' property.</para>

        <programlisting format="linespecific">isis.authorization.learn=true</programlisting>

        <para>When this is present and set, all methods will be authorised for
        all roles. However as each method is accessed through the user
        interface authorization will be configured for that method and the
        current role. Configuration will be saved in either the file (saved on
        shutdown), database table or LDAP security settings depending upon the
        reflector setup.</para>

        <para>The settings can then be modified to conform to the required
        security settings.</para>

        <para></para>

        <para></para>
      </sect1>

      <sect1>
        <title>Alternative Implementations</title>

        <para></para>
      </sect1>
    </chapter>

    <chapter>
      <title>Bytecode Provider APIs</title>

      <para></para>

      <para></para>

      <para></para>

      <note>
        <para>TODO: tidy up the following paras, were just copied/pasted in
        from APT</para>
      </note>

      <para></para>

      <para>[[NAME]] normally performs lazy loading of references and dirty
      tracking by proxying all domain objects. Two implementations are
      provided, using either cglib or javassist. The application archetype
      automatically configures the use of these proxies. However, some object
      stores (notably, the {{{./plugins/jpa-persistor/index.html}JPA object
      store}}) do not require these proxies (because they add their own
      proxies instead); in which case these can be disabled. Alternatively,
      you may not want to use the bytecode support, in which case you can add
      the appropriate calls for lazy loading and dirty tracking. This area is
      covered in the {{{./applib/index.html}applib}}, but there is also
      module-specific documentation in the
      {{{./core/bytecode-cglib/index.html}bytecode-cglib}} and
      {{{./core/bytecode-javassist/index.html}bytecode-javassist}}
      modules.</para>

      <para></para>

      <para></para>

      <para></para>

      <sect1>
        <title>Alternative Implementations</title>

        <para></para>

        <para></para>

        <para></para>
      </sect1>
    </chapter>
  </part>

  <part id="prt.DeploymentGuide">
    <title>Deployment Guide</title>

    <partintro>
      <para>partintro:</para>

      <para></para>

      <para>Assuming that you have developed your domain model and tested it
      as a standalone prototype (previous section), this section describes the
      process of deploying the domain object model as an enterprise
      application.</para>

      <para></para>
    </partintro>

    <chapter id="chp.DeployingIsisApplications">
      <title>Overview</title>

      <note>
        <para>TODO: tidy up the following paras, were just copied/pasted in
        from APT</para>
      </note>

      <para></para>

      <para>All the following describe setting up the default security
      implementations. *** Mention that there are other implementations</para>

      <para></para>

      <para></para>

      <para>For desktop-based viewers the framework provides a
      <classname>ViewerInstaller</classname> <acronym>API</acronym>, defined
      in the <filename>core/runtime</filename> module. This approach is used
      by the <acronym>DnD</acronym> viewer and the <acronym>HTML</acronym>
      viewer, for example.</para>

      <para>Alternatively the viewer can use its own mechanism to get started
      (eg as a webapp) and then simply bootstrap the Isis runtime with a
      couple of lines of code. This is the technique used by the Scimpi webapp
      viewer, by the Wicket viewer and by the Restful viewer.</para>

      <para></para>

      <para>*** x-ref remoting docs as a way of deploying in client/server
      mode.</para>

      <para></para>

      <para></para>

      <sect1>
        <title>Setting up perspectives</title>

        <para></para>

        <para>profilestore</para>

        <para>x-ref alternatives/profilestore/xml</para>

        <para></para>

        <para>Perspectives allow the set of services available to a user (eg
        as icons in the DnD viewer) to be customized for that user. Since
        these services represent the "start points" for the user to interact
        with the domain model, they in a sense define an application on a
        per-user basis.</para>

        <para>The perspectives are stored in user-profiles, which are a
        persistence mechanism independent of the object store. (The intent is
        for user profiles to store additional information for use by viewers,
        for example allowing a user to reskin an application or change colors
        or fonts. As of NOF 4.0 the functionality provided is still limited,
        however).</para>

        <para>The key here is that if a user logs in and no perspective exists
        for that user then one will be created for them. The new perspective
        will be a copy of the 'template' perspective, or, if none was defined,
        a perspective containing all the known services. To create a template
        perspective add a perspective fixture that calls
        <methodname>saveAsDefault()</methodname>, rather than
        <methodname>saveForUser()</methodname> for a named user, as shown
        below.</para>

        <programlisting>public class PerspectivesFixture extends UserProfileFixture {
    @Override
    protected void installProfiles() {
        Profile profile = newUserProfile();
        Perspective perspective = profile.newPerspective("ECS");
        perspective.addToServices(LocationFactory.class);
        perspective.addToServices(CustomerRepository.class);
        perspective.addToServices(PaymentMethodFactory.class);
        
        saveAsDefault(profile);
    }
}
</programlisting>

        <para>With that set up, when a new user now logs in they will see
        three service icons on the screen for locations, customers and payment
        methods. On the drag and drop user interface the user can add and
        remove services from their perspective. To remove a service icon
        right-click on the grey border and select the close option. To add a
        service select the Services... option from the application menu
        (accessed by right-clicking on the application background) and drag
        the required service onto the desktop. Unfortunately there is no
        similar mechanism available on the HTML user interface so you will
        need to modify the created perspectives via the DND UI.</para>
      </sect1>

      <sect1>
        <title>Adding Security (Authentication and Authorization)</title>

        <para></para>

        <para>x-ref alternatives/security/file</para>

        <para></para>

        <sect2>
          <title></title>

          <para></para>
        </sect2>
      </sect1>

      <sect1>
        <title>Adding support for internationalisation</title>

        <para>All the text that appears to the user comes from the domain
        object model. Any literal text used within the code may be
        externalised, and localised using the standard Java mechanism of
        resource bundles. However as all field and menu names are derived from
        the method names the framework provides a mechanism to adapt these
        names using resource bundles as well.</para>

        <sect2>
          <title>Localisation files</title>

          <para>Create a file for each required language, e.g., <filename
          class="directory" moreinfo="none">i18n_en_GB.properties</filename>
          for English in Great Britain, and place them into the project such
          that they will be included in the class path. For the project
          structures we have already seen the files could be added to the
          <filename class="directory" moreinfo="none">resources</filename>
          directory, as the following example shows.</para>

          <screen format="linespecific">resources/
   <emphasis role="strong">i18n_en_GB.properties
   i18n_de_DE.properties
   i18n_fr_FR.properties</emphasis>
   </screen>

          <para>The following example is part of one of those translation file
          and shows how property and action names and descriptions may be
          specified.</para>

          <programlisting format="linespecific">example.dom.Contact.property.Phone.name=Téléphone
example.dom.Contact.action.NewPhone.name=Nouveau téléphone
example.dom.Contact.property.FullName.description=Le nom complet du client</programlisting>

          <para>For more details on defining localisation files, <xref
          linkend="i18n-files" />.</para>
        </sect2>

        <sect2>
          <title>Configuration</title>

          <para>The reflector needs to be decorated with a facet decorator to
          look up the translated names every time the framework needs
          information about the fields and menus. To include the decorator add
          the following to a properties file.</para>

          <programlisting format="linespecific">isis.reflector.facet-decorators=resource-i18n</programlisting>

          <para>If the application is being accessed via the web (html)
          viewer, then the server will need to perform the localisation, so
          the above property should be included in one of isis.properties read
          by the server; if the application is being accessed by a client
          (e.g. the DND viewer) then the localisation will be performed within
          the client, and the property should be specified in one of the
          properties files read by the client e.g. <filename class="directory"
          moreinfo="none">facet-decorator_i18n.properties</filename>.</para>

          <para>The locale will be picked up automatically from the machine on
          which the code is executing. You may override this by specifying the
          <link linkend="locale">locale</link> in a properties file.</para>
        </sect2>
      </sect1>
    </chapter>

    <chapter>
      <title>Web App Deployment</title>

      <para></para>

      <para></para>

      <para></para>

      <sect1>
        <title>Setting up Security</title>

        <para></para>

        <para></para>

        <para>x-ref <xref linkend="chp.SecurityApi" />.</para>

        <para></para>

        <para></para>
      </sect1>

      <sect1>
        <title>Running as a WebApp</title>

        <para>[[NAME]] provides three different ways to run as a
        webapp:</para>

        <sect2>
          <title>Using isis.sh</title>

          <screen format="linespecific">$ isis.sh --type server --viewer html --persistor xml
2007-08-09 12:37:13.671::INFO:  Logging to STDERR via org.mortbay.log.StdErrLog
2007-08-09 12:37:13.801::INFO:  jetty-6.0.2
2007-08-09 12:37:13.954::INFO:  Started SocketConnector @ 0.0.0.0:8080
</screen>

          <para>This command runs the [[NAME]] with the HTML viewer, allowing
          multiple clients to access it via a browser. As for the standalone
          version the users need to access the URL
          http://<emphasis>server/logon.app</emphasis> to access the log on
          page.</para>
        </sect2>

        <sect2>
          <title>Using WebServer bootstrap</title>

          <para>The next mechanism uses the
          <classname>org.apache.isis.webserver.WebServer</classname> bootstrap
          to run [[NAME]]. This loads up whatever is in the webapp project's
          <filename>web.xml</filename> file.</para>

          <para><remark>TODO: we don't have a webserver.sh script to show this
          in action; we probably should.</remark></para>

          <para>Ordinarily the web.xml will be configured to run the same HTML
          viewer, so the end result will be the same. However, if necessary
          the remoting servlet can also be configured</para>
        </sect2>

        <sect2>
          <title>Deploying as a WAR</title>

          <para>The final mechanism is to use Maven to package up the webapp
          project as a WAR file, packaging up whatever is in the web.xml file.
          As above, ordinarily the web.xml will be configured to run the same
          HTML viewer, so the end result will be the same. However, if
          necessary the remoting servlet can also be configured</para>

          <para>Packaging up is done using:</para>

          <screen format="linespecific">$ cd webapp
$ mvn clean package</screen>

          <para>This should result in a WAR file in
          <filename>target</filename> directory. This can be deployed to an
          existing servlet containerd</para>
        </sect2>
      </sect1>
    </chapter>

    <chapter>
      <title>Standalone Deployment</title>

      <para></para>

      <para></para>

      <note>
        <para>TODO: discuss sealed/signed JARs to prevent tampering?</para>
      </note>

      <para></para>

      <sect1>
        <title>Setting up Security</title>

        <para></para>

        <para></para>

        <para>x-ref <xref linkend="chp.SecurityApi" />.</para>

        <para></para>

        <para></para>

        <para></para>

        <para></para>

        <para></para>
      </sect1>
    </chapter>
  </part>
</book>
