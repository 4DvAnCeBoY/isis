	<!-- project directories -->
	<!-- source -->
	<property name="src.dir" value="src"/>
	<property name="test.dir" value="test"/>
	<property name="example.dir" value="example"/>
	
	<!-- resources -->
	<property name="lib.dir" value="../lib"/>
	<property name="images.dir" value="images"/>
	<property name="doc.dir" value="docs"/>
	<property name="icon.dir" value="icon-library"/>
	<property name="conf.dir" value="conf"/>
	<property name="resource.dir" value="resources"/>
	<property name="bin.dir" value="bin"/>

	<!-- output directories -->
	<!-- build directories -->
	<property name="build.dir" value="build"/>
	<property name="build.src.dir" value="${build.dir}/src"/>
	<property name="build.test.dir" value="${build.dir}/test"/>
	<property name="build.classes.src" value="${build.dir}/classes/src"/>
	<property name="build.classes.test" value="${build.dir}/classes/test"/>
	<property name="build.example.dir" value="${build.dir}/examples"/>
	<property name="build.doc.dir" value="${build.dir}/docs"/>
	<property name="build.doc.api" value="${build.doc.dir}/api"/>
	<property name="build.relase.dir" value="${build.dir}/release"/>

	<!-- test directories -->
	<property name="test.run.dir" value="${build.dir}/test-run"/>
	<property name="test.results.dir" value="${build.relase.dir}/tests"/>
	
	<property environment="env"/>





	<!--                        -->
	<!--        init            -->
	<!--                        -->
	<target name="-init">
		<echo message="Version ${build.version}  ${build.id}"/>

		<mkdir dir="${build.dir}"/>
		
		<!-- copy across source and add version -->
		<mkdir dir="${build.src.dir}"/>
		<copy todir="${build.src.dir}">
			<fileset dir="${src.dir}"/>
		</copy>

		<mkdir dir="${build.test.dir}"/>
		<copy todir="${build.test.dir}">
			<fileset dir="${test.dir}"/>
		</copy>

		<replace dir="${build.src.dir}">
			<include name="**/AboutNakedObjects.java"/>
			<replacefilter token="%VERSION%" value="${build.version}"/>
			<replacefilter token="%BUILD_ID%" value="${build.id}"/>
			<replacefilter token="%NAME%" value="${build.name}"/>
			<replacefilter token="%COPYRIGHT_NOTICE%" value="${build.copyright}"/>
			<replacefilter token="%IMAGE_FILE%" value="${build.image-file}"/>
		</replace>

		<tstamp/>
	</target>


	<target name="set.flags">
		<condition property="environment.ok">
			<and>
				<available file="${env.ANT_HOME}/lib"             type="dir"/>
				<available file="${env.XALAN_HOME}/bin/xalan.jar" type="file"/>
			</and>
		</condition>
	</target>


	<target name="check.env" depends="set.flags" unless="environment.ok">
		<echo message="Environment variable(s) not set."/>
		<fail message="Aborting"/>
	</target>


	<!--                              -->
	<!--  configure ANT               -->
	<!--                              -->
	<target name="ant" depends="check.env"
	        description="Configure ant to allow builds to be created">
		<copy file="${env.XALAN_HOME}/bin/xalan.jar" todir="${env.ANT_HOME}/lib"/>
	</target>


	<target name="all" depends="clean, test"/>
	
	<!--                               -->
	<!-- remove build/dist/test directories -->
	<!--                               -->
	<target name="clean" description="Remove build, dist and test directories.">
		<delete failonerror="false" dir="${build.dir}"/>
	</target>


	<!--                              -->
	<!--  compile the framework srcs  -->
	<!--                              -->

	<target name="compile.src" depends="-init" description="Compile the component">
		<mkdir dir="${build.classes.src}"/>
		<javac 
			srcdir="${build.src.dir}" 
			destdir="${build.classes.src}" 
			includes="**/*.java"
			target="${compile.target}" 
			debug="${compile.debug}" 
			deprecation="false" >
			
			<classpath refid="libs.internal"/>
			<classpath refid="libs.external"/>
		</javac>
	</target>

	<!--                              -->
	<!--  compile the test srcs  -->
	<!--                              -->
	<target name="compile.tests" depends="-init" description="Compile the component's tests">
		<mkdir dir="${build.classes.test}"/>
		<javac 
			srcdir="${build.test.dir}"
			destdir="${build.classes.test}" 
			includes="**/*.java"
			target="${compile.target}" 
			debug="${compile.debug}" 
			deprecation="false" >

			<classpath refid="libs.internal"/>
			<classpath refid="libs.external"/>
			<classpath path="${build.classes.src}"/>
		</javac>
	</target>

	<!--                              -->
	<!--  create packages    -->
	<!--                              -->
	<target name="package" depends="compile.src,compile.tests,docs.javadoc" description="Create jar/zip files containing the component, its tests, and its source">
		<mkdir dir="${build.relase.dir}"/>
		
		<jar jarfile="${build.relase.dir}/${component}.jar">
			<fileset dir="${build.classes.src}"/>
		</jar>

		<jar jarfile="${build.relase.dir}/${component}-test.jar">
			<fileset dir="${build.classes.test}"/>
		</jar>
		
		<jar jarfile="${build.relase.dir}/${component}-src.jar">
			<fileset dir="${build.src.dir}"/>
		</jar>
		
		<zip zipfile="${build.relase.dir}/${component}-api.zip">
			<fileset dir="${build.doc.api}"/>
		</zip>
	</target>


	<target name="docs.javadoc" depends="-docs.javadocs-check" 
		unless="docs.javadocs.disable" description="Create the JavaDoc api documentation file.">
		<mkdir dir="${build.doc.api}"/>
		<javadoc 
			destDir="${build.doc.api}" 
			sourcepath="${build.src.dir}" 
			windowtitle="Naked Objects API version ${build.version}" 
			additionalparam="-breakiterator -tag group -tag testpackage -tag testcase -tag testkind -tag testfamily -tag testsetup -tag testedclass">

			<classpath refid="libs.internal"/>
			<classpath refid="libs.external"/>
			<package name="org.nakedobjects.*"/>
		</javadoc>
	</target>


	<target name="-docs.javadocs-check" depends="-init">
		<!-- if index.html is newer than the sources we are up to date -->
		<uptodate property="docs.javadocs.disable"
	      targetfile="${build.doc.dir}/api/index.html">
			<srcfiles dir="src" includes="**/*.java"/>
		</uptodate>
	</target>



	<!--                              -->
	<!--    run all the unit tests    -->
	<!--                              -->
	<target name="test" depends="package" description="Runs all unit tests">
		<delete failonerror="false" dir="${test.run.dir}"/>

		<mkdir dir="${test.run.dir}"/>
		<mkdir dir="${build.relase.dir}/tests"/>

		<patternset id="test.sources">
			<include name="**/*Test.java"/>
			<include name="**/*Tests.java"/>
		</patternset>

		<junit fork="yes" printsummary="no" haltonfailure="no" dir="${test.run.dir}">
			<classpath refid="libs.internal"/>
			<classpath refid="libs.external"/>
			<classpath path="${build.classes.src}"/>
			<classpath path="${build.relase.dir}/${component}.jar"/>
			<classpath path="${build.relase.dir}/${component}-test.jar"/>

			<formatter type="xml"/>

			<batchtest todir="${test.run.dir}">
				<fileset dir="${test.dir}">
					<patternset refid="test.sources"/>
				</fileset>
			</batchtest>
		</junit>

		<junitreport tofile="${test.run.dir}/all-tests.xml">
			<fileset dir="${test.run.dir}">
				<include name="TEST-*.xml"/>
			</fileset>
			<report format="frames" todir="${test.results.dir}"/>
		</junitreport>
	</target>









	<!--                              -->
	<!--    generate documentation    -->
	<!--                              -->
	<target name="docs.docs" description="Generate user documentation">
		<copy todir="${build.doc.dir}">
			<fileset dir="${doc.dir}">
				<include name="**/*.css"/>
				<include name="images/*"/>
				<include name="anatomy-images/*"/>
				<include name="tutorial/*"/>
			</fileset>

		</copy>

		<style basedir="${doc.dir}" processor="trax" includes="*.xml" destdir="${build.doc.dir}" style="${doc.dir}/html.xsl"/>

		<style basedir="${doc.dir}" processor="trax" includes="readme.xml" destdir="${build.dir}" extension=".txt" style="${doc.dir}/text.xsl"/>
	</target>


	<target name="docs.all" description="build all documentation"
	  depends="docs.javadoc, docs.docs"/>



